# coding: utf-8

"""
    Abstract API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from enigma.swagger_client.models.dataset_summary_data_updated_summary import DatasetSummaryDataUpdatedSummary  # noqa: F401,E501
from enigma.swagger_client.models.dataset_summary_parent_collection_summary import DatasetSummaryParentCollectionSummary  # noqa: F401,E501
from enigma.swagger_client.models.dataset_summary_row_count_summary import DatasetSummaryRowCountSummary  # noqa: F401,E501


class DatasetSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_updated_summary': 'list[DatasetSummaryDataUpdatedSummary]',
        'parent_collection_summary': 'list[DatasetSummaryParentCollectionSummary]',
        'row_count_summary': 'list[DatasetSummaryRowCountSummary]'
    }

    attribute_map = {
        'data_updated_summary': 'data_updated_summary',
        'parent_collection_summary': 'parent_collection_summary',
        'row_count_summary': 'row_count_summary'
    }

    def __init__(self, data_updated_summary=None, parent_collection_summary=None, row_count_summary=None):  # noqa: E501
        """DatasetSummary - a model defined in Swagger"""  # noqa: E501

        self._data_updated_summary = None
        self._parent_collection_summary = None
        self._row_count_summary = None
        self.discriminator = None

        if data_updated_summary is not None:
            self.data_updated_summary = data_updated_summary
        if parent_collection_summary is not None:
            self.parent_collection_summary = parent_collection_summary
        if row_count_summary is not None:
            self.row_count_summary = row_count_summary

    @property
    def data_updated_summary(self):
        """Gets the data_updated_summary of this DatasetSummary.  # noqa: E501


        :return: The data_updated_summary of this DatasetSummary.  # noqa: E501
        :rtype: list[DatasetSummaryDataUpdatedSummary]
        """
        return self._data_updated_summary

    @data_updated_summary.setter
    def data_updated_summary(self, data_updated_summary):
        """Sets the data_updated_summary of this DatasetSummary.


        :param data_updated_summary: The data_updated_summary of this DatasetSummary.  # noqa: E501
        :type: list[DatasetSummaryDataUpdatedSummary]
        """

        self._data_updated_summary = data_updated_summary

    @property
    def parent_collection_summary(self):
        """Gets the parent_collection_summary of this DatasetSummary.  # noqa: E501


        :return: The parent_collection_summary of this DatasetSummary.  # noqa: E501
        :rtype: list[DatasetSummaryParentCollectionSummary]
        """
        return self._parent_collection_summary

    @parent_collection_summary.setter
    def parent_collection_summary(self, parent_collection_summary):
        """Sets the parent_collection_summary of this DatasetSummary.


        :param parent_collection_summary: The parent_collection_summary of this DatasetSummary.  # noqa: E501
        :type: list[DatasetSummaryParentCollectionSummary]
        """

        self._parent_collection_summary = parent_collection_summary

    @property
    def row_count_summary(self):
        """Gets the row_count_summary of this DatasetSummary.  # noqa: E501


        :return: The row_count_summary of this DatasetSummary.  # noqa: E501
        :rtype: list[DatasetSummaryRowCountSummary]
        """
        return self._row_count_summary

    @row_count_summary.setter
    def row_count_summary(self, row_count_summary):
        """Sets the row_count_summary of this DatasetSummary.


        :param row_count_summary: The row_count_summary of this DatasetSummary.  # noqa: E501
        :type: list[DatasetSummaryRowCountSummary]
        """

        self._row_count_summary = row_count_summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
