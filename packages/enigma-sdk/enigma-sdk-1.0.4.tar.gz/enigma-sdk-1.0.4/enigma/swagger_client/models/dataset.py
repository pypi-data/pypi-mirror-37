# coding: utf-8

"""
    Abstract API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from enigma.swagger_client.models.apicollections_parent_collection import ApicollectionsParentCollection  # noqa: F401,E501
from enigma.swagger_client.models.apidatasets_source_lag_time import ApidatasetsSourceLagTime  # noqa: F401,E501
from enigma.swagger_client.models.collection_ancestors import CollectionAncestors  # noqa: F401,E501
from enigma.swagger_client.models.collection_highlights import CollectionHighlights  # noqa: F401,E501
from enigma.swagger_client.models.dataset_current_snapshot import DatasetCurrentSnapshot  # noqa: F401,E501
from enigma.swagger_client.models.dataset_dependencies import DatasetDependencies  # noqa: F401,E501
from enigma.swagger_client.models.tag import Tag  # noqa: F401,E501


class Dataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ancestors': 'list[CollectionAncestors]',
        'citation': 'str',
        'created_at': 'datetime',
        'current_snapshot': 'DatasetCurrentSnapshot',
        'data_updated_at': 'datetime',
        'deletable': 'bool',
        'dependencies': 'list[DatasetDependencies]',
        'derivatives': 'list[DatasetDependencies]',
        'description': 'str',
        'description_short': 'str',
        'display_name': 'str',
        'editable': 'bool',
        'extraction_type': 'str',
        'highlights': 'list[CollectionHighlights]',
        'id': 'str',
        'key_value': 'object',
        'modified_at': 'datetime',
        'one_time_ingestion': 'bool',
        'owner_id': 'str',
        'parent_collection': 'ApicollectionsParentCollection',
        'published': 'bool',
        'resource_owner': 'str',
        'resource_owner_contact': 'str',
        'schema_updated_at': 'datetime',
        'score': 'float',
        'source_description': 'str',
        'source_lag_time': 'ApidatasetsSourceLagTime',
        'source_type': 'str',
        'source_update_schedule': 'ApidatasetsSourceLagTime',
        'tags': 'list[Tag]',
        'technical_owner': 'str',
        'technical_owner_contact': 'str',
        'terms_of_service': 'str'
    }

    attribute_map = {
        'ancestors': 'ancestors',
        'citation': 'citation',
        'created_at': 'created_at',
        'current_snapshot': 'current_snapshot',
        'data_updated_at': 'data_updated_at',
        'deletable': 'deletable',
        'dependencies': 'dependencies',
        'derivatives': 'derivatives',
        'description': 'description',
        'description_short': 'description_short',
        'display_name': 'display_name',
        'editable': 'editable',
        'extraction_type': 'extraction_type',
        'highlights': 'highlights',
        'id': 'id',
        'key_value': 'key_value',
        'modified_at': 'modified_at',
        'one_time_ingestion': 'one_time_ingestion',
        'owner_id': 'owner_id',
        'parent_collection': 'parent_collection',
        'published': 'published',
        'resource_owner': 'resource_owner',
        'resource_owner_contact': 'resource_owner_contact',
        'schema_updated_at': 'schema_updated_at',
        'score': 'score',
        'source_description': 'source_description',
        'source_lag_time': 'source_lag_time',
        'source_type': 'source_type',
        'source_update_schedule': 'source_update_schedule',
        'tags': 'tags',
        'technical_owner': 'technical_owner',
        'technical_owner_contact': 'technical_owner_contact',
        'terms_of_service': 'terms_of_service'
    }

    def __init__(self, ancestors=None, citation='', created_at=None, current_snapshot=None, data_updated_at=None, deletable=None, dependencies=None, derivatives=None, description='', description_short='', display_name=None, editable=None, extraction_type=None, highlights=None, id=None, key_value=None, modified_at=None, one_time_ingestion=None, owner_id=None, parent_collection=None, published=False, resource_owner=None, resource_owner_contact=None, schema_updated_at=None, score=None, source_description=None, source_lag_time=None, source_type=None, source_update_schedule=None, tags=None, technical_owner=None, technical_owner_contact=None, terms_of_service=None):  # noqa: E501
        """Dataset - a model defined in Swagger"""  # noqa: E501

        self._ancestors = None
        self._citation = None
        self._created_at = None
        self._current_snapshot = None
        self._data_updated_at = None
        self._deletable = None
        self._dependencies = None
        self._derivatives = None
        self._description = None
        self._description_short = None
        self._display_name = None
        self._editable = None
        self._extraction_type = None
        self._highlights = None
        self._id = None
        self._key_value = None
        self._modified_at = None
        self._one_time_ingestion = None
        self._owner_id = None
        self._parent_collection = None
        self._published = None
        self._resource_owner = None
        self._resource_owner_contact = None
        self._schema_updated_at = None
        self._score = None
        self._source_description = None
        self._source_lag_time = None
        self._source_type = None
        self._source_update_schedule = None
        self._tags = None
        self._technical_owner = None
        self._technical_owner_contact = None
        self._terms_of_service = None
        self.discriminator = None

        if ancestors is not None:
            self.ancestors = ancestors
        if citation is not None:
            self.citation = citation
        if created_at is not None:
            self.created_at = created_at
        if current_snapshot is not None:
            self.current_snapshot = current_snapshot
        if data_updated_at is not None:
            self.data_updated_at = data_updated_at
        if deletable is not None:
            self.deletable = deletable
        if dependencies is not None:
            self.dependencies = dependencies
        if derivatives is not None:
            self.derivatives = derivatives
        if description is not None:
            self.description = description
        if description_short is not None:
            self.description_short = description_short
        self.display_name = display_name
        if editable is not None:
            self.editable = editable
        if extraction_type is not None:
            self.extraction_type = extraction_type
        if highlights is not None:
            self.highlights = highlights
        if id is not None:
            self.id = id
        if key_value is not None:
            self.key_value = key_value
        if modified_at is not None:
            self.modified_at = modified_at
        if one_time_ingestion is not None:
            self.one_time_ingestion = one_time_ingestion
        if owner_id is not None:
            self.owner_id = owner_id
        if parent_collection is not None:
            self.parent_collection = parent_collection
        if published is not None:
            self.published = published
        if resource_owner is not None:
            self.resource_owner = resource_owner
        if resource_owner_contact is not None:
            self.resource_owner_contact = resource_owner_contact
        if schema_updated_at is not None:
            self.schema_updated_at = schema_updated_at
        if score is not None:
            self.score = score
        if source_description is not None:
            self.source_description = source_description
        if source_lag_time is not None:
            self.source_lag_time = source_lag_time
        if source_type is not None:
            self.source_type = source_type
        if source_update_schedule is not None:
            self.source_update_schedule = source_update_schedule
        if tags is not None:
            self.tags = tags
        if technical_owner is not None:
            self.technical_owner = technical_owner
        if technical_owner_contact is not None:
            self.technical_owner_contact = technical_owner_contact
        if terms_of_service is not None:
            self.terms_of_service = terms_of_service

    @property
    def ancestors(self):
        """Gets the ancestors of this Dataset.  # noqa: E501


        :return: The ancestors of this Dataset.  # noqa: E501
        :rtype: list[CollectionAncestors]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """Sets the ancestors of this Dataset.


        :param ancestors: The ancestors of this Dataset.  # noqa: E501
        :type: list[CollectionAncestors]
        """

        self._ancestors = ancestors

    @property
    def citation(self):
        """Gets the citation of this Dataset.  # noqa: E501


        :return: The citation of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this Dataset.


        :param citation: The citation of this Dataset.  # noqa: E501
        :type: str
        """

        self._citation = citation

    @property
    def created_at(self):
        """Gets the created_at of this Dataset.  # noqa: E501


        :return: The created_at of this Dataset.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Dataset.


        :param created_at: The created_at of this Dataset.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def current_snapshot(self):
        """Gets the current_snapshot of this Dataset.  # noqa: E501


        :return: The current_snapshot of this Dataset.  # noqa: E501
        :rtype: DatasetCurrentSnapshot
        """
        return self._current_snapshot

    @current_snapshot.setter
    def current_snapshot(self, current_snapshot):
        """Sets the current_snapshot of this Dataset.


        :param current_snapshot: The current_snapshot of this Dataset.  # noqa: E501
        :type: DatasetCurrentSnapshot
        """

        self._current_snapshot = current_snapshot

    @property
    def data_updated_at(self):
        """Gets the data_updated_at of this Dataset.  # noqa: E501


        :return: The data_updated_at of this Dataset.  # noqa: E501
        :rtype: datetime
        """
        return self._data_updated_at

    @data_updated_at.setter
    def data_updated_at(self, data_updated_at):
        """Sets the data_updated_at of this Dataset.


        :param data_updated_at: The data_updated_at of this Dataset.  # noqa: E501
        :type: datetime
        """

        self._data_updated_at = data_updated_at

    @property
    def deletable(self):
        """Gets the deletable of this Dataset.  # noqa: E501


        :return: The deletable of this Dataset.  # noqa: E501
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this Dataset.


        :param deletable: The deletable of this Dataset.  # noqa: E501
        :type: bool
        """

        self._deletable = deletable

    @property
    def dependencies(self):
        """Gets the dependencies of this Dataset.  # noqa: E501


        :return: The dependencies of this Dataset.  # noqa: E501
        :rtype: list[DatasetDependencies]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this Dataset.


        :param dependencies: The dependencies of this Dataset.  # noqa: E501
        :type: list[DatasetDependencies]
        """

        self._dependencies = dependencies

    @property
    def derivatives(self):
        """Gets the derivatives of this Dataset.  # noqa: E501


        :return: The derivatives of this Dataset.  # noqa: E501
        :rtype: list[DatasetDependencies]
        """
        return self._derivatives

    @derivatives.setter
    def derivatives(self, derivatives):
        """Sets the derivatives of this Dataset.


        :param derivatives: The derivatives of this Dataset.  # noqa: E501
        :type: list[DatasetDependencies]
        """

        self._derivatives = derivatives

    @property
    def description(self):
        """Gets the description of this Dataset.  # noqa: E501


        :return: The description of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Dataset.


        :param description: The description of this Dataset.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_short(self):
        """Gets the description_short of this Dataset.  # noqa: E501


        :return: The description_short of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._description_short

    @description_short.setter
    def description_short(self, description_short):
        """Sets the description_short of this Dataset.


        :param description_short: The description_short of this Dataset.  # noqa: E501
        :type: str
        """

        self._description_short = description_short

    @property
    def display_name(self):
        """Gets the display_name of this Dataset.  # noqa: E501


        :return: The display_name of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Dataset.


        :param display_name: The display_name of this Dataset.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def editable(self):
        """Gets the editable of this Dataset.  # noqa: E501


        :return: The editable of this Dataset.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this Dataset.


        :param editable: The editable of this Dataset.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def extraction_type(self):
        """Gets the extraction_type of this Dataset.  # noqa: E501


        :return: The extraction_type of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._extraction_type

    @extraction_type.setter
    def extraction_type(self, extraction_type):
        """Sets the extraction_type of this Dataset.


        :param extraction_type: The extraction_type of this Dataset.  # noqa: E501
        :type: str
        """

        self._extraction_type = extraction_type

    @property
    def highlights(self):
        """Gets the highlights of this Dataset.  # noqa: E501


        :return: The highlights of this Dataset.  # noqa: E501
        :rtype: list[CollectionHighlights]
        """
        return self._highlights

    @highlights.setter
    def highlights(self, highlights):
        """Sets the highlights of this Dataset.


        :param highlights: The highlights of this Dataset.  # noqa: E501
        :type: list[CollectionHighlights]
        """

        self._highlights = highlights

    @property
    def id(self):
        """Gets the id of this Dataset.  # noqa: E501


        :return: The id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dataset.


        :param id: The id of this Dataset.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key_value(self):
        """Gets the key_value of this Dataset.  # noqa: E501


        :return: The key_value of this Dataset.  # noqa: E501
        :rtype: object
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this Dataset.


        :param key_value: The key_value of this Dataset.  # noqa: E501
        :type: object
        """

        self._key_value = key_value

    @property
    def modified_at(self):
        """Gets the modified_at of this Dataset.  # noqa: E501


        :return: The modified_at of this Dataset.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Dataset.


        :param modified_at: The modified_at of this Dataset.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def one_time_ingestion(self):
        """Gets the one_time_ingestion of this Dataset.  # noqa: E501


        :return: The one_time_ingestion of this Dataset.  # noqa: E501
        :rtype: bool
        """
        return self._one_time_ingestion

    @one_time_ingestion.setter
    def one_time_ingestion(self, one_time_ingestion):
        """Sets the one_time_ingestion of this Dataset.


        :param one_time_ingestion: The one_time_ingestion of this Dataset.  # noqa: E501
        :type: bool
        """

        self._one_time_ingestion = one_time_ingestion

    @property
    def owner_id(self):
        """Gets the owner_id of this Dataset.  # noqa: E501


        :return: The owner_id of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Dataset.


        :param owner_id: The owner_id of this Dataset.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def parent_collection(self):
        """Gets the parent_collection of this Dataset.  # noqa: E501


        :return: The parent_collection of this Dataset.  # noqa: E501
        :rtype: ApicollectionsParentCollection
        """
        return self._parent_collection

    @parent_collection.setter
    def parent_collection(self, parent_collection):
        """Sets the parent_collection of this Dataset.


        :param parent_collection: The parent_collection of this Dataset.  # noqa: E501
        :type: ApicollectionsParentCollection
        """

        self._parent_collection = parent_collection

    @property
    def published(self):
        """Gets the published of this Dataset.  # noqa: E501


        :return: The published of this Dataset.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Dataset.


        :param published: The published of this Dataset.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def resource_owner(self):
        """Gets the resource_owner of this Dataset.  # noqa: E501


        :return: The resource_owner of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this Dataset.


        :param resource_owner: The resource_owner of this Dataset.  # noqa: E501
        :type: str
        """

        self._resource_owner = resource_owner

    @property
    def resource_owner_contact(self):
        """Gets the resource_owner_contact of this Dataset.  # noqa: E501


        :return: The resource_owner_contact of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._resource_owner_contact

    @resource_owner_contact.setter
    def resource_owner_contact(self, resource_owner_contact):
        """Sets the resource_owner_contact of this Dataset.


        :param resource_owner_contact: The resource_owner_contact of this Dataset.  # noqa: E501
        :type: str
        """

        self._resource_owner_contact = resource_owner_contact

    @property
    def schema_updated_at(self):
        """Gets the schema_updated_at of this Dataset.  # noqa: E501


        :return: The schema_updated_at of this Dataset.  # noqa: E501
        :rtype: datetime
        """
        return self._schema_updated_at

    @schema_updated_at.setter
    def schema_updated_at(self, schema_updated_at):
        """Sets the schema_updated_at of this Dataset.


        :param schema_updated_at: The schema_updated_at of this Dataset.  # noqa: E501
        :type: datetime
        """

        self._schema_updated_at = schema_updated_at

    @property
    def score(self):
        """Gets the score of this Dataset.  # noqa: E501


        :return: The score of this Dataset.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Dataset.


        :param score: The score of this Dataset.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def source_description(self):
        """Gets the source_description of this Dataset.  # noqa: E501


        :return: The source_description of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._source_description

    @source_description.setter
    def source_description(self, source_description):
        """Sets the source_description of this Dataset.


        :param source_description: The source_description of this Dataset.  # noqa: E501
        :type: str
        """

        self._source_description = source_description

    @property
    def source_lag_time(self):
        """Gets the source_lag_time of this Dataset.  # noqa: E501


        :return: The source_lag_time of this Dataset.  # noqa: E501
        :rtype: ApidatasetsSourceLagTime
        """
        return self._source_lag_time

    @source_lag_time.setter
    def source_lag_time(self, source_lag_time):
        """Sets the source_lag_time of this Dataset.


        :param source_lag_time: The source_lag_time of this Dataset.  # noqa: E501
        :type: ApidatasetsSourceLagTime
        """

        self._source_lag_time = source_lag_time

    @property
    def source_type(self):
        """Gets the source_type of this Dataset.  # noqa: E501


        :return: The source_type of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Dataset.


        :param source_type: The source_type of this Dataset.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def source_update_schedule(self):
        """Gets the source_update_schedule of this Dataset.  # noqa: E501


        :return: The source_update_schedule of this Dataset.  # noqa: E501
        :rtype: ApidatasetsSourceLagTime
        """
        return self._source_update_schedule

    @source_update_schedule.setter
    def source_update_schedule(self, source_update_schedule):
        """Sets the source_update_schedule of this Dataset.


        :param source_update_schedule: The source_update_schedule of this Dataset.  # noqa: E501
        :type: ApidatasetsSourceLagTime
        """

        self._source_update_schedule = source_update_schedule

    @property
    def tags(self):
        """Gets the tags of this Dataset.  # noqa: E501


        :return: The tags of this Dataset.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Dataset.


        :param tags: The tags of this Dataset.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def technical_owner(self):
        """Gets the technical_owner of this Dataset.  # noqa: E501


        :return: The technical_owner of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._technical_owner

    @technical_owner.setter
    def technical_owner(self, technical_owner):
        """Sets the technical_owner of this Dataset.


        :param technical_owner: The technical_owner of this Dataset.  # noqa: E501
        :type: str
        """

        self._technical_owner = technical_owner

    @property
    def technical_owner_contact(self):
        """Gets the technical_owner_contact of this Dataset.  # noqa: E501


        :return: The technical_owner_contact of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._technical_owner_contact

    @technical_owner_contact.setter
    def technical_owner_contact(self, technical_owner_contact):
        """Sets the technical_owner_contact of this Dataset.


        :param technical_owner_contact: The technical_owner_contact of this Dataset.  # noqa: E501
        :type: str
        """

        self._technical_owner_contact = technical_owner_contact

    @property
    def terms_of_service(self):
        """Gets the terms_of_service of this Dataset.  # noqa: E501


        :return: The terms_of_service of this Dataset.  # noqa: E501
        :rtype: str
        """
        return self._terms_of_service

    @terms_of_service.setter
    def terms_of_service(self, terms_of_service):
        """Sets the terms_of_service of this Dataset.


        :param terms_of_service: The terms_of_service of this Dataset.  # noqa: E501
        :type: str
        """

        self._terms_of_service = terms_of_service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
