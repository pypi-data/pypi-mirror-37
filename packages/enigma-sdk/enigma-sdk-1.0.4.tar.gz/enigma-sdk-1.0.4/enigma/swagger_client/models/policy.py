# coding: utf-8

"""
    Abstract API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from enigma.swagger_client.models.policy_clause import PolicyClause  # noqa: F401,E501


class Policy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'clause': 'PolicyClause',
        'id': 'str'
    }

    attribute_map = {
        'action': 'action',
        'clause': 'clause',
        'id': 'id'
    }

    def __init__(self, action=None, clause=None, id=None):  # noqa: E501
        """Policy - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._clause = None
        self._id = None
        self.discriminator = None

        self.action = action
        if clause is not None:
            self.clause = clause
        if id is not None:
            self.id = id

    @property
    def action(self):
        """Gets the action of this Policy.  # noqa: E501


        :return: The action of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Policy.


        :param action: The action of this Policy.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["delete", "edit", "export", "view"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def clause(self):
        """Gets the clause of this Policy.  # noqa: E501


        :return: The clause of this Policy.  # noqa: E501
        :rtype: PolicyClause
        """
        return self._clause

    @clause.setter
    def clause(self, clause):
        """Sets the clause of this Policy.


        :param clause: The clause of this Policy.  # noqa: E501
        :type: PolicyClause
        """

        self._clause = clause

    @property
    def id(self):
        """Gets the id of this Policy.  # noqa: E501


        :return: The id of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Policy.


        :param id: The id of this Policy.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
