# coding: utf-8

"""
    Abstract API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from enigma.swagger_client.models.apicollections_parent_collection import ApicollectionsParentCollection  # noqa: F401,E501
from enigma.swagger_client.models.apicollections_tags import ApicollectionsTags  # noqa: F401,E501


class Body1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'description_short': 'str',
        'display_name': 'str',
        'key_value': 'object',
        'parent_collection': 'ApicollectionsParentCollection',
        'published': 'bool',
        'tags': 'list[ApicollectionsTags]'
    }

    attribute_map = {
        'description': 'description',
        'description_short': 'description_short',
        'display_name': 'display_name',
        'key_value': 'key_value',
        'parent_collection': 'parent_collection',
        'published': 'published',
        'tags': 'tags'
    }

    def __init__(self, description='', description_short='', display_name=None, key_value=None, parent_collection=None, published=False, tags=None):  # noqa: E501
        """Body1 - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._description_short = None
        self._display_name = None
        self._key_value = None
        self._parent_collection = None
        self._published = None
        self._tags = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if description_short is not None:
            self.description_short = description_short
        self.display_name = display_name
        if key_value is not None:
            self.key_value = key_value
        if parent_collection is not None:
            self.parent_collection = parent_collection
        if published is not None:
            self.published = published
        if tags is not None:
            self.tags = tags

    @property
    def description(self):
        """Gets the description of this Body1.  # noqa: E501


        :return: The description of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Body1.


        :param description: The description of this Body1.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_short(self):
        """Gets the description_short of this Body1.  # noqa: E501


        :return: The description_short of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._description_short

    @description_short.setter
    def description_short(self, description_short):
        """Sets the description_short of this Body1.


        :param description_short: The description_short of this Body1.  # noqa: E501
        :type: str
        """

        self._description_short = description_short

    @property
    def display_name(self):
        """Gets the display_name of this Body1.  # noqa: E501


        :return: The display_name of this Body1.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Body1.


        :param display_name: The display_name of this Body1.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def key_value(self):
        """Gets the key_value of this Body1.  # noqa: E501


        :return: The key_value of this Body1.  # noqa: E501
        :rtype: object
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this Body1.


        :param key_value: The key_value of this Body1.  # noqa: E501
        :type: object
        """

        self._key_value = key_value

    @property
    def parent_collection(self):
        """Gets the parent_collection of this Body1.  # noqa: E501


        :return: The parent_collection of this Body1.  # noqa: E501
        :rtype: ApicollectionsParentCollection
        """
        return self._parent_collection

    @parent_collection.setter
    def parent_collection(self, parent_collection):
        """Sets the parent_collection of this Body1.


        :param parent_collection: The parent_collection of this Body1.  # noqa: E501
        :type: ApicollectionsParentCollection
        """

        self._parent_collection = parent_collection

    @property
    def published(self):
        """Gets the published of this Body1.  # noqa: E501


        :return: The published of this Body1.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Body1.


        :param published: The published of this Body1.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def tags(self):
        """Gets the tags of this Body1.  # noqa: E501


        :return: The tags of this Body1.  # noqa: E501
        :rtype: list[ApicollectionsTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Body1.


        :param tags: The tags of this Body1.  # noqa: E501
        :type: list[ApicollectionsTags]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
