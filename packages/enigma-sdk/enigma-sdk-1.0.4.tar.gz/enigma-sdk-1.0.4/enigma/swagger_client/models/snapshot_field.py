# coding: utf-8

"""
    Abstract API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SnapshotField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'str',
        'description': 'str',
        'display_name': 'str',
        'is_serialid': 'bool',
        'name': 'str',
        'visible_by_default': 'bool'
    }

    attribute_map = {
        'data_type': 'data_type',
        'description': 'description',
        'display_name': 'display_name',
        'is_serialid': 'is_serialid',
        'name': 'name',
        'visible_by_default': 'visible_by_default'
    }

    def __init__(self, data_type=None, description=None, display_name=None, is_serialid=False, name=None, visible_by_default=None):  # noqa: E501
        """SnapshotField - a model defined in Swagger"""  # noqa: E501

        self._data_type = None
        self._description = None
        self._display_name = None
        self._is_serialid = None
        self._name = None
        self._visible_by_default = None
        self.discriminator = None

        self.data_type = data_type
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if is_serialid is not None:
            self.is_serialid = is_serialid
        self.name = name
        if visible_by_default is not None:
            self.visible_by_default = visible_by_default

    @property
    def data_type(self):
        """Gets the data_type of this SnapshotField.  # noqa: E501


        :return: The data_type of this SnapshotField.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this SnapshotField.


        :param data_type: The data_type of this SnapshotField.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501
        allowed_values = ["boolean", "datetime", "decimal", "geo_point", "geo_shape", "integer", "string"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def description(self):
        """Gets the description of this SnapshotField.  # noqa: E501


        :return: The description of this SnapshotField.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SnapshotField.


        :param description: The description of this SnapshotField.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this SnapshotField.  # noqa: E501


        :return: The display_name of this SnapshotField.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SnapshotField.


        :param display_name: The display_name of this SnapshotField.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def is_serialid(self):
        """Gets the is_serialid of this SnapshotField.  # noqa: E501


        :return: The is_serialid of this SnapshotField.  # noqa: E501
        :rtype: bool
        """
        return self._is_serialid

    @is_serialid.setter
    def is_serialid(self, is_serialid):
        """Sets the is_serialid of this SnapshotField.


        :param is_serialid: The is_serialid of this SnapshotField.  # noqa: E501
        :type: bool
        """

        self._is_serialid = is_serialid

    @property
    def name(self):
        """Gets the name of this SnapshotField.  # noqa: E501


        :return: The name of this SnapshotField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnapshotField.


        :param name: The name of this SnapshotField.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def visible_by_default(self):
        """Gets the visible_by_default of this SnapshotField.  # noqa: E501


        :return: The visible_by_default of this SnapshotField.  # noqa: E501
        :rtype: bool
        """
        return self._visible_by_default

    @visible_by_default.setter
    def visible_by_default(self, visible_by_default):
        """Sets the visible_by_default of this SnapshotField.


        :param visible_by_default: The visible_by_default of this SnapshotField.  # noqa: E501
        :type: bool
        """

        self._visible_by_default = visible_by_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
