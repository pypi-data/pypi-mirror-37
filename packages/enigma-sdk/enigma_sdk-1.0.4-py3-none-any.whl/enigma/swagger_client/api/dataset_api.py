# coding: utf-8

"""
    Abstract API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from enigma.swagger_client.api_client import ApiClient


class DatasetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_datasets_dataset_id_delete(self, dataset_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_delete(dataset_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_datasets_dataset_id_delete_with_http_info(dataset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datasets_dataset_id_delete_with_http_info(dataset_id, **kwargs)  # noqa: E501
            return data

    def api_datasets_dataset_id_delete_with_http_info(self, dataset_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_delete_with_http_info(dataset_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datasets_dataset_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `api_datasets_dataset_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['dataset_id'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/datasets/{dataset_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datasets_dataset_id_get(self, dataset_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_get(dataset_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param bool include_serialids:
        :param str mode:
        :param int phrase_distance:
        :param str query:
        :param int row_limit:
        :param int row_offset:
        :param str row_sort:
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_datasets_dataset_id_get_with_http_info(dataset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datasets_dataset_id_get_with_http_info(dataset_id, **kwargs)  # noqa: E501
            return data

    def api_datasets_dataset_id_get_with_http_info(self, dataset_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_get_with_http_info(dataset_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param bool include_serialids:
        :param str mode:
        :param int phrase_distance:
        :param str query:
        :param int row_limit:
        :param int row_offset:
        :param str row_sort:
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'include_serialids', 'mode', 'phrase_distance', 'query', 'row_limit', 'row_offset', 'row_sort']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datasets_dataset_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `api_datasets_dataset_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['dataset_id'] = params['dataset_id']  # noqa: E501

        query_params = []
        if 'include_serialids' in params:
            query_params.append(('include_serialids', params['include_serialids']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'phrase_distance' in params:
            query_params.append(('phrase_distance', params['phrase_distance']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'row_limit' in params:
            query_params.append(('row_limit', params['row_limit']))  # noqa: E501
        if 'row_offset' in params:
            query_params.append(('row_offset', params['row_offset']))  # noqa: E501
        if 'row_sort' in params:
            query_params.append(('row_sort', params['row_sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/datasets/{dataset_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dataset',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datasets_dataset_id_put(self, dataset_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_put(dataset_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param Body3 body:
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_datasets_dataset_id_put_with_http_info(dataset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datasets_dataset_id_put_with_http_info(dataset_id, **kwargs)  # noqa: E501
            return data

    def api_datasets_dataset_id_put_with_http_info(self, dataset_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_put_with_http_info(dataset_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param Body3 body:
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datasets_dataset_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `api_datasets_dataset_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['dataset_id'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/datasets/{dataset_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dataset',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datasets_dataset_id_snapshots_get(self, dataset_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_snapshots_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_snapshots_get(dataset_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param str filter:
        :param str ingest_status:
        :param str range:
        :param list[str] sort:
        :return: list[Snapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_datasets_dataset_id_snapshots_get_with_http_info(dataset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datasets_dataset_id_snapshots_get_with_http_info(dataset_id, **kwargs)  # noqa: E501
            return data

    def api_datasets_dataset_id_snapshots_get_with_http_info(self, dataset_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_snapshots_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_snapshots_get_with_http_info(dataset_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param str filter:
        :param str ingest_status:
        :param str range:
        :param list[str] sort:
        :return: list[Snapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'filter', 'ingest_status', 'range', 'sort']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datasets_dataset_id_snapshots_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `api_datasets_dataset_id_snapshots_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['dataset_id'] = params['dataset_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'ingest_status' in params:
            query_params.append(('ingest_status', params['ingest_status']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/datasets/{dataset_id}/snapshots/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Snapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datasets_dataset_id_snapshots_post(self, dataset_id, snapshot, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_snapshots_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_snapshots_post(dataset_id, snapshot, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param file snapshot: (required)
        :param file data:
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_datasets_dataset_id_snapshots_post_with_http_info(dataset_id, snapshot, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datasets_dataset_id_snapshots_post_with_http_info(dataset_id, snapshot, **kwargs)  # noqa: E501
            return data

    def api_datasets_dataset_id_snapshots_post_with_http_info(self, dataset_id, snapshot, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_snapshots_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_snapshots_post_with_http_info(dataset_id, snapshot, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param file snapshot: (required)
        :param file data:
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'snapshot', 'data']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datasets_dataset_id_snapshots_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `api_datasets_dataset_id_snapshots_post`")  # noqa: E501
        # verify the required parameter 'snapshot' is set
        if ('snapshot' not in params or
                params['snapshot'] is None):
            raise ValueError("Missing the required parameter `snapshot` when calling `api_datasets_dataset_id_snapshots_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['dataset_id'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            local_var_files['data'] = params['data']  # noqa: E501
        if 'snapshot' in params:
            local_var_files['snapshot'] = params['snapshot']  # noqa: E501

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/datasets/{dataset_id}/snapshots/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Snapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datasets_dataset_id_snapshots_snapshot_id_get(self, dataset_id, snapshot_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_snapshots_snapshot_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_snapshots_snapshot_id_get(dataset_id, snapshot_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param str snapshot_id: (required)
        :param str geo_query:
        :param bool highlight:
        :param bool include_serialids:
        :param int phrase_distance:
        :param str query:
        :param str query_mode:
        :param int row_limit:
        :param int row_offset:
        :param str row_sort:
        :param bool stats:
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_datasets_dataset_id_snapshots_snapshot_id_get_with_http_info(dataset_id, snapshot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datasets_dataset_id_snapshots_snapshot_id_get_with_http_info(dataset_id, snapshot_id, **kwargs)  # noqa: E501
            return data

    def api_datasets_dataset_id_snapshots_snapshot_id_get_with_http_info(self, dataset_id, snapshot_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_snapshots_snapshot_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_snapshots_snapshot_id_get_with_http_info(dataset_id, snapshot_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param str snapshot_id: (required)
        :param str geo_query:
        :param bool highlight:
        :param bool include_serialids:
        :param int phrase_distance:
        :param str query:
        :param str query_mode:
        :param int row_limit:
        :param int row_offset:
        :param str row_sort:
        :param bool stats:
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'snapshot_id', 'geo_query', 'highlight', 'include_serialids', 'phrase_distance', 'query', 'query_mode', 'row_limit', 'row_offset', 'row_sort', 'stats']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datasets_dataset_id_snapshots_snapshot_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `api_datasets_dataset_id_snapshots_snapshot_id_get`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `api_datasets_dataset_id_snapshots_snapshot_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['dataset_id'] = params['dataset_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshot_id'] = params['snapshot_id']  # noqa: E501

        query_params = []
        if 'geo_query' in params:
            query_params.append(('geo_query', params['geo_query']))  # noqa: E501
        if 'highlight' in params:
            query_params.append(('highlight', params['highlight']))  # noqa: E501
        if 'include_serialids' in params:
            query_params.append(('include_serialids', params['include_serialids']))  # noqa: E501
        if 'phrase_distance' in params:
            query_params.append(('phrase_distance', params['phrase_distance']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'query_mode' in params:
            query_params.append(('query_mode', params['query_mode']))  # noqa: E501
        if 'row_limit' in params:
            query_params.append(('row_limit', params['row_limit']))  # noqa: E501
        if 'row_offset' in params:
            query_params.append(('row_offset', params['row_offset']))  # noqa: E501
        if 'row_sort' in params:
            query_params.append(('row_sort', params['row_sort']))  # noqa: E501
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/datasets/{dataset_id}/snapshots/{snapshot_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Snapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datasets_dataset_id_snapshots_snapshot_id_put(self, dataset_id, snapshot_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_snapshots_snapshot_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_snapshots_snapshot_id_put(dataset_id, snapshot_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param str snapshot_id: (required)
        :param Body4 body:
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_datasets_dataset_id_snapshots_snapshot_id_put_with_http_info(dataset_id, snapshot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_datasets_dataset_id_snapshots_snapshot_id_put_with_http_info(dataset_id, snapshot_id, **kwargs)  # noqa: E501
            return data

    def api_datasets_dataset_id_snapshots_snapshot_id_put_with_http_info(self, dataset_id, snapshot_id, **kwargs):  # noqa: E501
        """api_datasets_dataset_id_snapshots_snapshot_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_dataset_id_snapshots_snapshot_id_put_with_http_info(dataset_id, snapshot_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str dataset_id: (required)
        :param str snapshot_id: (required)
        :param Body4 body:
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'snapshot_id', 'body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datasets_dataset_id_snapshots_snapshot_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `api_datasets_dataset_id_snapshots_snapshot_id_put`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `api_datasets_dataset_id_snapshots_snapshot_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['dataset_id'] = params['dataset_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshot_id'] = params['snapshot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/datasets/{dataset_id}/snapshots/{snapshot_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Snapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datasets_get(self, **kwargs):  # noqa: E501
        """api_datasets_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_get(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param list[str] filter:
        :param list[str] has_tag:
        :param str in_collection_id:
        :param bool include_serialids:
        :param bool match_metadata:
        :param bool match_rows:
        :param int max_row_count:
        :param int min_row_count:
        :param str mode:
        :param list[str] parent_collection_id:
        :param int phrase_distance:
        :param str query:
        :param str range:
        :param int row_limit:
        :param int row_offset:
        :param str row_sort:
        :param list[str] sort:
        :return: list[Dataset]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_datasets_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_datasets_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_datasets_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_datasets_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_get_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param list[str] filter:
        :param list[str] has_tag:
        :param str in_collection_id:
        :param bool include_serialids:
        :param bool match_metadata:
        :param bool match_rows:
        :param int max_row_count:
        :param int min_row_count:
        :param str mode:
        :param list[str] parent_collection_id:
        :param int phrase_distance:
        :param str query:
        :param str range:
        :param int row_limit:
        :param int row_offset:
        :param str row_sort:
        :param list[str] sort:
        :return: list[Dataset]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'has_tag', 'in_collection_id', 'include_serialids', 'match_metadata', 'match_rows', 'max_row_count', 'min_row_count', 'mode', 'parent_collection_id', 'phrase_distance', 'query', 'range', 'row_limit', 'row_offset', 'row_sort', 'sort']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datasets_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
            collection_formats['filter'] = 'multi'  # noqa: E501
        if 'has_tag' in params:
            query_params.append(('has_tag', params['has_tag']))  # noqa: E501
            collection_formats['has_tag'] = 'multi'  # noqa: E501
        if 'in_collection_id' in params:
            query_params.append(('in_collection_id', params['in_collection_id']))  # noqa: E501
        if 'include_serialids' in params:
            query_params.append(('include_serialids', params['include_serialids']))  # noqa: E501
        if 'match_metadata' in params:
            query_params.append(('match_metadata', params['match_metadata']))  # noqa: E501
        if 'match_rows' in params:
            query_params.append(('match_rows', params['match_rows']))  # noqa: E501
        if 'max_row_count' in params:
            query_params.append(('max_row_count', params['max_row_count']))  # noqa: E501
        if 'min_row_count' in params:
            query_params.append(('min_row_count', params['min_row_count']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'parent_collection_id' in params:
            query_params.append(('parent_collection_id', params['parent_collection_id']))  # noqa: E501
            collection_formats['parent_collection_id'] = 'multi'  # noqa: E501
        if 'phrase_distance' in params:
            query_params.append(('phrase_distance', params['phrase_distance']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'row_limit' in params:
            query_params.append(('row_limit', params['row_limit']))  # noqa: E501
        if 'row_offset' in params:
            query_params.append(('row_offset', params['row_offset']))  # noqa: E501
        if 'row_sort' in params:
            query_params.append(('row_sort', params['row_sort']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/datasets/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Dataset]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_datasets_post(self, **kwargs):  # noqa: E501
        """api_datasets_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_post(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param Body2 body:
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_datasets_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_datasets_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_datasets_post_with_http_info(self, **kwargs):  # noqa: E501
        """api_datasets_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_datasets_post_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param Body2 body:
        :return: Dataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_datasets_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/datasets/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dataset',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
