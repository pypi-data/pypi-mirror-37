# coding: utf-8

"""
    Abstract API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from enigma.swagger_client.api_client import ApiClient


class PersonalCollectionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_personal_collections_get(self, **kwargs):  # noqa: E501
        """api_personal_collections_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_personal_collections_get(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str range:
        :return: list[PersonalCollection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_personal_collections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_personal_collections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_personal_collections_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_personal_collections_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_personal_collections_get_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str range:
        :return: list[PersonalCollection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['range']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personal_collections_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'range' in params:
            header_params['range'] = params['range']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/personal-collections/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PersonalCollection]',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_personal_collections_personal_collection_id_delete(self, personal_collection_id, **kwargs):  # noqa: E501
        """api_personal_collections_personal_collection_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_personal_collections_personal_collection_id_delete(personal_collection_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str personal_collection_id: (required)
        :return: PersonalCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_personal_collections_personal_collection_id_delete_with_http_info(personal_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_personal_collections_personal_collection_id_delete_with_http_info(personal_collection_id, **kwargs)  # noqa: E501
            return data

    def api_personal_collections_personal_collection_id_delete_with_http_info(self, personal_collection_id, **kwargs):  # noqa: E501
        """api_personal_collections_personal_collection_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_personal_collections_personal_collection_id_delete_with_http_info(personal_collection_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str personal_collection_id: (required)
        :return: PersonalCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['personal_collection_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personal_collections_personal_collection_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'personal_collection_id' is set
        if ('personal_collection_id' not in params or
                params['personal_collection_id'] is None):
            raise ValueError("Missing the required parameter `personal_collection_id` when calling `api_personal_collections_personal_collection_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'personal_collection_id' in params:
            path_params['personal_collection_id'] = params['personal_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/personal-collections/{personal_collection_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_personal_collections_personal_collection_id_get(self, personal_collection_id, **kwargs):  # noqa: E501
        """api_personal_collections_personal_collection_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_personal_collections_personal_collection_id_get(personal_collection_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str personal_collection_id: (required)
        :return: PersonalCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_personal_collections_personal_collection_id_get_with_http_info(personal_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_personal_collections_personal_collection_id_get_with_http_info(personal_collection_id, **kwargs)  # noqa: E501
            return data

    def api_personal_collections_personal_collection_id_get_with_http_info(self, personal_collection_id, **kwargs):  # noqa: E501
        """api_personal_collections_personal_collection_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_personal_collections_personal_collection_id_get_with_http_info(personal_collection_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str personal_collection_id: (required)
        :return: PersonalCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['personal_collection_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personal_collections_personal_collection_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'personal_collection_id' is set
        if ('personal_collection_id' not in params or
                params['personal_collection_id'] is None):
            raise ValueError("Missing the required parameter `personal_collection_id` when calling `api_personal_collections_personal_collection_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'personal_collection_id' in params:
            path_params['personal_collection_id'] = params['personal_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/personal-collections/{personal_collection_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_personal_collections_personal_collection_id_put(self, personal_collection_id, **kwargs):  # noqa: E501
        """api_personal_collections_personal_collection_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_personal_collections_personal_collection_id_put(personal_collection_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str personal_collection_id: (required)
        :param Body6 body:
        :return: PersonalCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_personal_collections_personal_collection_id_put_with_http_info(personal_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_personal_collections_personal_collection_id_put_with_http_info(personal_collection_id, **kwargs)  # noqa: E501
            return data

    def api_personal_collections_personal_collection_id_put_with_http_info(self, personal_collection_id, **kwargs):  # noqa: E501
        """api_personal_collections_personal_collection_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_personal_collections_personal_collection_id_put_with_http_info(personal_collection_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str personal_collection_id: (required)
        :param Body6 body:
        :return: PersonalCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['personal_collection_id', 'body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personal_collections_personal_collection_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'personal_collection_id' is set
        if ('personal_collection_id' not in params or
                params['personal_collection_id'] is None):
            raise ValueError("Missing the required parameter `personal_collection_id` when calling `api_personal_collections_personal_collection_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'personal_collection_id' in params:
            path_params['personal_collection_id'] = params['personal_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/personal-collections/{personal_collection_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_personal_collections_post(self, **kwargs):  # noqa: E501
        """api_personal_collections_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_personal_collections_post(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param Body5 body:
        :return: PersonalCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.api_personal_collections_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_personal_collections_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_personal_collections_post_with_http_info(self, **kwargs):  # noqa: E501
        """api_personal_collections_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.api_personal_collections_post_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param Body5 body:
        :return: PersonalCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_personal_collections_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/personal-collections/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
