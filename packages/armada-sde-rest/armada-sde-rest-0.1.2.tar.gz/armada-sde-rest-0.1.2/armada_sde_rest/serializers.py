

# Generated by  v0.1.2 for sde v0.3.0
from rest_framework import serializers
from armada_sde import models


class AgtAgentListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.AgtAgent
        fields = ('agent_id', )


class AgtAgentDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.AgtAgent
        fields = '__all__'


class AgtAgentTypeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.AgtAgentType
        fields = ('agent_type_id', )


class AgtAgentTypeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.AgtAgentType
        fields = '__all__'


class AgtResearchAgentListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.AgtResearchAgent
        fields = ('agent_id', )


class AgtResearchAgentDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.AgtResearchAgent
        fields = '__all__'


class CertCertListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CertCert
        fields = ('cert_id', )


class CertCertDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CertCert
        fields = '__all__'


class CertMasteryListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CertMastery
        fields = ('id', )


class CertMasteryDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CertMastery
        fields = '__all__'


class CertSkillListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CertSkill
        fields = ('id', )


class CertSkillDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CertSkill
        fields = '__all__'


class ChrAncestryListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.ChrAncestry
        fields = ('ancestry_id', 'ancestry_name')


class ChrAncestryDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.ChrAncestry
        fields = '__all__'


class ChrAttributeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.ChrAttribute
        fields = ('attribute_id', 'attribute_name')


class ChrAttributeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.ChrAttribute
        fields = '__all__'


class ChrBloodlineListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.ChrBloodline
        fields = ('bloodline_id', 'bloodline_name')


class ChrBloodlineDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.ChrBloodline
        fields = '__all__'


class ChrFactionListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.ChrFaction
        fields = ('faction_id', 'faction_name')


class ChrFactionDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.ChrFaction
        fields = '__all__'


class ChrRaceListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.ChrRace
        fields = ('race_id', 'race_name')


class ChrRaceDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.ChrRace
        fields = '__all__'


class CrpActivityListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpActivity
        fields = ('activity_id', 'activity_name')


class CrpActivityDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpActivity
        fields = '__all__'


class CrpNPCCorporationListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpNPCCorporation
        fields = ('corporation_id', )


class CrpNPCCorporationDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpNPCCorporation
        fields = '__all__'


class CrpNPCCorporationDivisionListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpNPCCorporationDivision
        fields = ('corporation_id', )


class CrpNPCCorporationDivisionDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpNPCCorporationDivision
        fields = '__all__'


class CrpNPCCorporationResearchFieldListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpNPCCorporationResearchField
        fields = ('skill_id', )


class CrpNPCCorporationResearchFieldDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpNPCCorporationResearchField
        fields = '__all__'


class CrpNPCCorporationTradeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpNPCCorporationTrade
        fields = ('corporation_id', )


class CrpNPCCorporationTradeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpNPCCorporationTrade
        fields = '__all__'


class CrpNPCDivisionListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpNPCDivision
        fields = ('division_id', )


class CrpNPCDivisionDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.CrpNPCDivision
        fields = '__all__'


class DgmAttributeCategoryListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmAttributeCategory
        fields = ('category_id', )


class DgmAttributeCategoryDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmAttributeCategory
        fields = '__all__'


class DgmAttributeTypeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmAttributeType
        fields = ('attribute_id', )


class DgmAttributeTypeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmAttributeType
        fields = '__all__'


class DgmEffectListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmEffect
        fields = ('effect_id', 'effect_name')


class DgmEffectDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmEffect
        fields = '__all__'


class DgmExpressionListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmExpression
        fields = ('expression_id', 'expression_name')


class DgmExpressionDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmExpression
        fields = '__all__'


class DgmTypeAttributeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmTypeAttribute
        fields = ('type_id', )


class DgmTypeAttributeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmTypeAttribute
        fields = '__all__'


class DgmTypeEffectListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmTypeEffect
        fields = ('type_id', )


class DgmTypeEffectDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.DgmTypeEffect
        fields = '__all__'


class EveGraphicListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.EveGraphic
        fields = ('graphic_id', )


class EveGraphicDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.EveGraphic
        fields = '__all__'


class EveIconListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.EveIcon
        fields = ('icon_id', )


class EveIconDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.EveIcon
        fields = '__all__'


class EveUnitListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.EveUnit
        fields = ('unit_id', 'unit_name')


class EveUnitDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.EveUnit
        fields = '__all__'


class IndustryActivityListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivity
        fields = ('type_id', )


class IndustryActivityDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivity
        fields = '__all__'


class IndustryActivityMaterialListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivityMaterial
        fields = ('id', )


class IndustryActivityMaterialDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivityMaterial
        fields = '__all__'


class IndustryActivityProbabilityListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivityProbability
        fields = ('id', )


class IndustryActivityProbabilityDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivityProbability
        fields = '__all__'


class IndustryActivityProductListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivityProduct
        fields = ('id', )


class IndustryActivityProductDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivityProduct
        fields = '__all__'


class IndustryActivityRaceListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivityRace
        fields = ('id', )


class IndustryActivityRaceDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivityRace
        fields = '__all__'


class IndustryActivitySkillListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivitySkill
        fields = ('id', )


class IndustryActivitySkillDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryActivitySkill
        fields = '__all__'


class IndustryBlueprintListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryBlueprint
        fields = ('type_id', )


class IndustryBlueprintDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.IndustryBlueprint
        fields = '__all__'


class InvCategoryListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvCategory
        fields = ('category_id', 'category_name')


class InvCategoryDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvCategory
        fields = '__all__'


class InvContrabandTypeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvContrabandType
        fields = ('faction_id', )


class InvContrabandTypeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvContrabandType
        fields = '__all__'


class InvControlTowerResourceListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvControlTowerResource
        fields = ('control_tower_type_id', )


class InvControlTowerResourceDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvControlTowerResource
        fields = '__all__'


class InvControlTowerResourcePurposeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvControlTowerResourcePurpose
        fields = ('purpose', )


class InvControlTowerResourcePurposeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvControlTowerResourcePurpose
        fields = '__all__'


class InvFlagListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvFlag
        fields = ('flag_id', 'flag_name')


class InvFlagDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvFlag
        fields = '__all__'


class InvGroupListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvGroup
        fields = ('group_id', 'group_name')


class InvGroupDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvGroup
        fields = '__all__'


class InvItemListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvItem
        fields = ('item_id', )


class InvItemDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvItem
        fields = '__all__'


class InvMarketGroupListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvMarketGroup
        fields = ('market_group_id', 'market_group_name')


class InvMarketGroupDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvMarketGroup
        fields = '__all__'


class InvMetaGroupListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvMetaGroup
        fields = ('meta_group_id', 'meta_group_name')


class InvMetaGroupDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvMetaGroup
        fields = '__all__'


class InvMetaTypeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvMetaType
        fields = ('type_id', )


class InvMetaTypeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvMetaType
        fields = '__all__'


class InvNameListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvName
        fields = ('item_id', )


class InvNameDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvName
        fields = '__all__'


class InvPositionListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvPosition
        fields = ('item_id', )


class InvPositionDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvPosition
        fields = '__all__'


class InvTraitListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvTrait
        fields = ('trait_id', )


class InvTraitDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvTrait
        fields = '__all__'


class InvTypeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvType
        fields = ('type_id', 'type_name')


class InvTypeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvType
        fields = '__all__'


class InvTypeMaterialListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvTypeMaterial
        fields = ('type_id', )


class InvTypeMaterialDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvTypeMaterial
        fields = '__all__'


class InvTypeReactionListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvTypeReaction
        fields = ('reaction_type_id', )


class InvTypeReactionDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvTypeReaction
        fields = '__all__'


class InvUniqueNameListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvUniqueName
        fields = ('item_id', )


class InvUniqueNameDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvUniqueName
        fields = '__all__'


class InvVolumeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvVolume
        fields = ('type_id', )


class InvVolumeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.InvVolume
        fields = '__all__'


class MapCelestialStatisticListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapCelestialStatistic
        fields = ('celestial_id', )


class MapCelestialStatisticDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapCelestialStatistic
        fields = '__all__'


class MapConstellationListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapConstellation
        fields = ('constellation_id', 'constellation_name')


class MapConstellationDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapConstellation
        fields = '__all__'


class MapConstellationJumpListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapConstellationJump
        fields = ('from_constellation_id', )


class MapConstellationJumpDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapConstellationJump
        fields = '__all__'


class MapDenormalizeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapDenormalize
        fields = ('item_id', )


class MapDenormalizeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapDenormalize
        fields = '__all__'


class MapJumpListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapJump
        fields = ('stargate_id', )


class MapJumpDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapJump
        fields = '__all__'


class MapLandmarkListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapLandmark
        fields = ('landmark_id', 'landmark_name')


class MapLandmarkDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapLandmark
        fields = '__all__'


class MapLocationSceneListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapLocationScene
        fields = ('location_id', )


class MapLocationSceneDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapLocationScene
        fields = '__all__'


class MapLocationWormholeClassListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapLocationWormholeClass
        fields = ('location_id', )


class MapLocationWormholeClassDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapLocationWormholeClass
        fields = '__all__'


class MapRegionListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapRegion
        fields = ('region_id', 'region_name')


class MapRegionDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapRegion
        fields = '__all__'


class MapRegionJumpListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapRegionJump
        fields = ('from_region_id', )


class MapRegionJumpDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapRegionJump
        fields = '__all__'


class MapSolarSystemListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapSolarSystem
        fields = ('solar_system_id', 'solar_system_name')


class MapSolarSystemDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapSolarSystem
        fields = '__all__'


class MapSolarSystemJumpListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapSolarSystemJump
        fields = ('from_solar_system_id', )


class MapSolarSystemJumpDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapSolarSystemJump
        fields = '__all__'


class MapUniverseListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapUniverse
        fields = ('universe_id', 'universe_name')


class MapUniverseDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.MapUniverse
        fields = '__all__'


class PlanetSchematicListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.PlanetSchematic
        fields = ('schematic_id', )


class PlanetSchematicDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.PlanetSchematic
        fields = '__all__'


class PlanetSchematicsPinMapListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.PlanetSchematicsPinMap
        fields = ('schematic_id', )


class PlanetSchematicsPinMapDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.PlanetSchematicsPinMap
        fields = '__all__'


class PlanetSchematicsTypeMapListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.PlanetSchematicsTypeMap
        fields = ('schematic_id', )


class PlanetSchematicsTypeMapDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.PlanetSchematicsTypeMap
        fields = '__all__'


class RamActivityListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamActivity
        fields = ('activity_id', 'activity_name')


class RamActivityDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamActivity
        fields = '__all__'


class RamAssemblyLineStationListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamAssemblyLineStation
        fields = ('station_id', )


class RamAssemblyLineStationDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamAssemblyLineStation
        fields = '__all__'


class RamAssemblyLineTypeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamAssemblyLineType
        fields = ('assembly_line_type_id', 'assembly_line_type_name')


class RamAssemblyLineTypeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamAssemblyLineType
        fields = '__all__'


class RamAssemblyLineTypeDetailPerCategoryListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamAssemblyLineTypeDetailPerCategory
        fields = ('assembly_line_type_id', )


class RamAssemblyLineTypeDetailPerCategoryDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamAssemblyLineTypeDetailPerCategory
        fields = '__all__'


class RamAssemblyLineTypeDetailPerGroupListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamAssemblyLineTypeDetailPerGroup
        fields = ('assembly_line_type_id', )


class RamAssemblyLineTypeDetailPerGroupDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamAssemblyLineTypeDetailPerGroup
        fields = '__all__'


class RamInstallationTypeContentListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamInstallationTypeContent
        fields = ('installation_type_id', )


class RamInstallationTypeContentDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.RamInstallationTypeContent
        fields = '__all__'


class SkinListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.Skin
        fields = ('skin_id', )


class SkinDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.Skin
        fields = '__all__'


class SkinLicenseListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.SkinLicense
        fields = ('license_type_id', )


class SkinLicenseDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.SkinLicense
        fields = '__all__'


class SkinMaterialListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.SkinMaterial
        fields = ('skin_material_id', )


class SkinMaterialDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.SkinMaterial
        fields = '__all__'


class SkinShipListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.SkinShip
        fields = ('id', )


class SkinShipDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.SkinShip
        fields = '__all__'


class StaOperationListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.StaOperation
        fields = ('operation_id', 'operation_name')


class StaOperationDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.StaOperation
        fields = '__all__'


class StaOperationServiceListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.StaOperationService
        fields = ('operation_id', )


class StaOperationServiceDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.StaOperationService
        fields = '__all__'


class StaServiceListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.StaService
        fields = ('service_id', 'service_name')


class StaServiceDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.StaService
        fields = '__all__'


class StaStationListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.StaStation
        fields = ('station_id', 'station_name')


class StaStationDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.StaStation
        fields = '__all__'


class StaStationTypeListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.StaStationType
        fields = ('station_type_id', )


class StaStationTypeDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.StaStationType
        fields = '__all__'


class TranslationTableListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.TranslationTable
        fields = ('source_table', )


class TranslationTableDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.TranslationTable
        fields = '__all__'


class TrnTranslationListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.TrnTranslation
        fields = ('tc_id', )


class TrnTranslationDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.TrnTranslation
        fields = '__all__'


class TrnTranslationColumnListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.TrnTranslationColumn
        fields = ('tc_id', )


class TrnTranslationColumnDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.TrnTranslationColumn
        fields = '__all__'


class TrnTranslationLanguageListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.TrnTranslationLanguage
        fields = ('numeric_language_id', )


class TrnTranslationLanguageDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.TrnTranslationLanguage
        fields = '__all__'


class WarCombatZoneListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.WarCombatZone
        fields = ('combat_zone_id', 'combat_zone_name')


class WarCombatZoneDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.WarCombatZone
        fields = '__all__'


class WarCombatZoneSystemListSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.WarCombatZoneSystem
        fields = ('solar_system_id', )


class WarCombatZoneSystemDetailsSerializer(serializers.ModelSerializer):
    class Meta(object):
        model = models.WarCombatZoneSystem
        fields = '__all__'

