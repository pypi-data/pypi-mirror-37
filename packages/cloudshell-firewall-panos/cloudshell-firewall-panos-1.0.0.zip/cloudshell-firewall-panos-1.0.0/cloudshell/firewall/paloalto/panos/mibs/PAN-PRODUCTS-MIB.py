#
# PySNMP MIB module PAN-PRODUCTS-MIB (http://pysnmp.sf.net)
# ASN.1 source http://mibs.snmplabs.com:80/asn1/PAN-PRODUCTS-MIB
# Produced by pysmi-0.2.2 at Fri Sep 28 12:29:20 2018
# On host ? platform ? version ? by user ?
# Using Python version 2.7.14 (v2.7.14:84471935ed, Sep 16 2017, 20:19:30) [MSC v.1500 32 bit (Intel)]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
panProductsMibs, panModules = mibBuilder.importSymbols("PAN-GLOBAL-REG", "panProductsMibs", "panModules")
TcChassisType, = mibBuilder.importSymbols("PAN-GLOBAL-TC", "TcChassisType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Bits", "Counter32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
panProductsMibsModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 25461, 1, 1, 4))
panProductsMibsModule.setRevisions(('2013-04-15 16:50', '2011-02-09 16:10',))
if mibBuilder.loadTexts: panProductsMibsModule.setLastUpdated('201304151650Z')
if mibBuilder.loadTexts: panProductsMibsModule.setOrganization('Palo Alto Networks')
panPA_4050 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 1)).setLabel("panPA-4050")
if mibBuilder.loadTexts: panPA_4050.setStatus('current')
panPA_4020 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 2)).setLabel("panPA-4020")
if mibBuilder.loadTexts: panPA_4020.setStatus('current')
panPA_2050 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 3)).setLabel("panPA-2050")
if mibBuilder.loadTexts: panPA_2050.setStatus('current')
panPA_2020 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 4)).setLabel("panPA-2020")
if mibBuilder.loadTexts: panPA_2020.setStatus('current')
panPA_4060 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 5)).setLabel("panPA-4060")
if mibBuilder.loadTexts: panPA_4060.setStatus('current')
panPA_500 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 6)).setLabel("panPA-500")
if mibBuilder.loadTexts: panPA_500.setStatus('current')
panPanorama = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 7))
if mibBuilder.loadTexts: panPanorama.setStatus('current')
panPA_5060 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 8)).setLabel("panPA-5060")
if mibBuilder.loadTexts: panPA_5060.setStatus('current')
panPA_5050 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 9)).setLabel("panPA-5050")
if mibBuilder.loadTexts: panPA_5050.setStatus('current')
panPA_5020 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 11)).setLabel("panPA-5020")
if mibBuilder.loadTexts: panPA_5020.setStatus('current')
panPA_200 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 12)).setLabel("panPA-200")
if mibBuilder.loadTexts: panPA_200.setStatus('current')
panPA_3050 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 17)).setLabel("panPA-3050")
if mibBuilder.loadTexts: panPA_3050.setStatus('current')
panPA_3020 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 18)).setLabel("panPA-3020")
if mibBuilder.loadTexts: panPA_3020.setStatus('current')
panPA_3060 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 19)).setLabel("panPA-3060")
if mibBuilder.loadTexts: panPA_3060.setStatus('current')
panPA_VM = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 29)).setLabel("panPA-VM")
if mibBuilder.loadTexts: panPA_VM.setStatus('current')
panM_100 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 30)).setLabel("panM-100")
if mibBuilder.loadTexts: panM_100.setStatus('current')
panPA_7050 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 31)).setLabel("panPA-7050")
if mibBuilder.loadTexts: panPA_7050.setStatus('current')
panGP_100 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 32)).setLabel("panGP-100")
if mibBuilder.loadTexts: panGP_100.setStatus('current')
panWF_500 = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 33)).setLabel("panWF-500")
if mibBuilder.loadTexts: panWF_500.setStatus('current')
panProcessingCards = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 100))
if mibBuilder.loadTexts: panProcessingCards.setStatus('current')
panFans = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 101))
if mibBuilder.loadTexts: panFans.setStatus('current')
panPowerSupplies = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 102))
if mibBuilder.loadTexts: panPowerSupplies.setStatus('current')
panPA_7000_SMC = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 100, 1)).setLabel("panPA-7000-SMC")
if mibBuilder.loadTexts: panPA_7000_SMC.setStatus('current')
panPA_7000_LPC = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 100, 2)).setLabel("panPA-7000-LPC")
if mibBuilder.loadTexts: panPA_7000_LPC.setStatus('current')
panPA_7000_20G_NPC = ObjectIdentity((1, 3, 6, 1, 4, 1, 25461, 2, 3, 100, 3)).setLabel("panPA-7000-20G-NPC")
if mibBuilder.loadTexts: panPA_7000_20G_NPC.setStatus('current')
mibBuilder.exportSymbols("PAN-PRODUCTS-MIB", panPA_2020=panPA_2020, panPA_3060=panPA_3060, panPA_3020=panPA_3020, PYSNMP_MODULE_ID=panProductsMibsModule, panPA_5050=panPA_5050, panPA_5060=panPA_5060, panPA_4020=panPA_4020, panM_100=panM_100, panPA_VM=panPA_VM, panPA_5020=panPA_5020, panPA_4050=panPA_4050, panFans=panFans, panPA_7000_20G_NPC=panPA_7000_20G_NPC, panGP_100=panGP_100, panPanorama=panPanorama, panPA_7000_SMC=panPA_7000_SMC, panPA_7000_LPC=panPA_7000_LPC, panPA_3050=panPA_3050, panPA_500=panPA_500, panPA_2050=panPA_2050, panPowerSupplies=panPowerSupplies, panPA_4060=panPA_4060, panPA_200=panPA_200, panProcessingCards=panProcessingCards, panProductsMibsModule=panProductsMibsModule, panPA_7050=panPA_7050, panWF_500=panWF_500)
