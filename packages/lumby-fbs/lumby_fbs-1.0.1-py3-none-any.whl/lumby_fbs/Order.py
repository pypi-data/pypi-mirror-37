# automatically generated by the FlatBuffers compiler, do not modify

# namespace: lumby_fbs

import flatbuffers

# /// The content of an order in an exchange. A positive amount
# /// indicates a `Bid` order whereas a negative amount indicates a `Ask` order.
class Order(object):
    __slots__ = ['_tab']

    # Order
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// The ID of the base currency.
    # Order
    def BaseId(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
# /// The ID of the quote currency.
    # Order
    def QuoteId(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
# /// The amount of the trade. Always positive.
    # Order
    def Amount(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
# /// The rate of the trade. Never zero.
    # Order
    def Rate(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
# /// The unique id of the order within the exchange.
    # Order
    def Id(self): return self._tab.Get(flatbuffers.number_types.Int64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))

def CreateOrder(builder, baseId, quoteId, amount, rate, id):
    builder.Prep(8, 32)
    builder.PrependInt64(id)
    builder.PrependFloat64(rate)
    builder.PrependFloat64(amount)
    builder.PrependUint32(quoteId)
    builder.PrependUint32(baseId)
    return builder.Offset()
