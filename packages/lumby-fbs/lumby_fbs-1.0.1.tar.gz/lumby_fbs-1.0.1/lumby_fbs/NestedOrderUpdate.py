# automatically generated by the FlatBuffers compiler, do not modify

# namespace: lumby_fbs

import flatbuffers

# /// Allows to manipulate a `OrderUpdate` without unpacking since this table has
# /// the same representation than the `OrderUpdate` table.
class NestedOrderUpdate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNestedOrderUpdate(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NestedOrderUpdate()
        x.Init(buf, n + offset)
        return x

    # NestedOrderUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NestedOrderUpdate
    def Buf(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # NestedOrderUpdate
    def BufAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # NestedOrderUpdate
    def BufLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def NestedOrderUpdateStart(builder): builder.StartObject(1)
def NestedOrderUpdateAddBuf(builder, buf): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buf), 0)
def NestedOrderUpdateStartBufVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def NestedOrderUpdateEnd(builder): return builder.EndObject()
