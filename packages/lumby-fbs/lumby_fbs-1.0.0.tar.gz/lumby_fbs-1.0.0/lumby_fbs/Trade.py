# automatically generated by the FlatBuffers compiler, do not modify

# namespace: lumby_fbs

import flatbuffers

# /// The content of an executed trade, when the
# /// exchange fullfills a bid and a matching ask order.
class Trade(object):
    __slots__ = ['_tab']

    # Trade
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// The ID of the base currency.
    # Trade
    def BaseId(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
# /// The ID of the quote currency.
    # Trade
    def QuoteId(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
# /// The amount of the trade. Always positive.
    # Trade
    def Amount(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
# /// The rate of the trade. Always positive.
    # Trade
    def Rate(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))

def CreateTrade(builder, baseId, quoteId, amount, rate):
    builder.Prep(8, 24)
    builder.PrependFloat64(rate)
    builder.PrependFloat64(amount)
    builder.PrependUint32(quoteId)
    builder.PrependUint32(baseId)
    return builder.Offset()
