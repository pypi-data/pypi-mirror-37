# automatically generated by the FlatBuffers compiler, do not modify

# namespace: lumby_fbs

import flatbuffers

# /// Allows to manipulate a `TradeUpdateVec` without unpacking it.
# /// If you want to serialize a large amount of `TradeUpdate` without acessing
# /// the underlying data, this is what you should use.
class NestedTradeUpdateVec(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNestedTradeUpdateVec(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NestedTradeUpdateVec()
        x.Init(buf, n + offset)
        return x

    # NestedTradeUpdateVec
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NestedTradeUpdateVec
    def Vec(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NestedTradeUpdate import NestedTradeUpdate
            obj = NestedTradeUpdate()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NestedTradeUpdateVec
    def VecLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def NestedTradeUpdateVecStart(builder): builder.StartObject(1)
def NestedTradeUpdateVecAddVec(builder, vec): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vec), 0)
def NestedTradeUpdateVecStartVecVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NestedTradeUpdateVecEnd(builder): return builder.EndObject()
