{
  "src/components/Alert.js": {
    "description": "",
    "displayName": "Alert",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Alert color, options: primary, secondary, success, info, warning, danger,\nlink. Default is secondary"
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether alert is open, default: true"
      },
      "fade": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Fade on close."
      }
    }
  },
  "src/components/Badge.js": {
    "description": "",
    "displayName": "Badge",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Badge color, options: primary, secondary, success, info, warning, danger,\nlink. Default is secondary"
      },
      "pill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Make badge \"pill\" shaped (rounded ends, like a pill), default: false"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Attach link to badge."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the Badge, default: span"
      }
    }
  },
  "src/components/Button.js": {
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether button is in active state"
      },
      "block": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Create block button."
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button color, options: primary, secondary, success, info, warning, danger,\nlink. Default is secondary"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable button (make unclickable)."
      },
      "size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button size, options: lg, md, sm."
      },
      "outline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set outline button style"
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "dashEvents": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'click'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/components/ButtonGroup.js": {
    "description": "",
    "displayName": "ButtonGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class for the button group"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Stack buttons vertically"
      },
      "size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Size of button group"
      }
    }
  },
  "src/components/Collapse.js": {
    "description": "",
    "displayName": "Collapse",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card body, default: div"
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether collapse is currently open."
      },
      "navbar": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enable for use in a navbar"
      }
    }
  },
  "src/components/Dropdown.js": {
    "description": "",
    "displayName": "Dropdown",
    "methods": [
      {
        "name": "toggle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for the toggle"
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'up'",
              "computed": false
            },
            {
              "value": "'down'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Direction in which to expand the dropdown."
      },
      "inNavbar": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "For Dropdown usage inside a Navbar (disables popper)"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the dropdown."
      },
      "nav": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "For Dropdown usage inside a Nav"
      },
      "caret": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Add caret to dropdown toggle",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/components/DropdownItem.js": {
    "description": "",
    "displayName": "DropdownItem",
    "methods": [
      {
        "name": "incrementClicks",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set active CSS style"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set disabled CSS style"
      },
      "divider": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Create menu divider"
      },
      "header": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Create menu header"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Link for the menu item"
      },
      "external_link": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the browser will treat this as an external link,\nforcing a page refresh at the new location. If false,\nthis just changes the location without triggering a page\nrefresh. Use this if you are observing dcc.Location, for\ninstance. Defaults to true for absolute URLs and false\notherwise."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      }
    }
  },
  "src/components/Fade.js": {
    "description": "",
    "displayName": "Fade",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration of the transition, in milliseconds.\n\nYou may specify a single timeout for all transitions like: `timeout=500`\nor individually like: timeout={'enter': 300, 'exit': 500}"
      },
      "appear": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Make component appear when page loads."
      },
      "enter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enable or disable enter transitions."
      },
      "exit": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enable or disable exit transitions."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the fade component, default div."
      },
      "baseClass": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "baseClassActive": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/components/Jumbotron.js": {
    "description": "",
    "displayName": "Jumbotron",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Alert color, options: primary, secondary, success, info, warning, danger,\nlink. Default is secondary"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Whether alert is open, default: true"
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the Jumbotron, default: div"
      }
    }
  },
  "src/components/Popover.js": {
    "description": "",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "'auto-start'",
              "computed": false
            },
            {
              "value": "'auto-end'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'top-start'",
              "computed": false
            },
            {
              "value": "'top-end'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'right-start'",
              "computed": false
            },
            {
              "value": "'right-end'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'bottom-start'",
              "computed": false
            },
            {
              "value": "'bottom-end'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'left-start'",
              "computed": false
            },
            {
              "value": "'left-end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify popover placement."
      },
      "target": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ID of the component to attach the popover to."
      },
      "container": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Where to inject the popper DOM node, default body"
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the Popover is open or not."
      },
      "hideArrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hide popover arrow"
      },
      "innerClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class to apply to the popover"
      },
      "delay": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "show": {
                  "name": "number",
                  "required": false
                },
                "hide": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Optionally override show/hide delays - defualt {show: 0, hide: 250}"
      },
      "offset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Popover offset"
      }
    }
  },
  "src/components/PopoverBody.js": {
    "description": "",
    "displayName": "PopoverBody",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the PopoverBody, default: div"
      }
    }
  },
  "src/components/PopoverHeader.js": {
    "description": "",
    "displayName": "PopoverHeader",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the PopoverHeader, default: h3"
      }
    }
  },
  "src/components/Progress.js": {
    "description": "",
    "displayName": "Progress",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the progress bar, default: div"
      },
      "bar": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply progress-bar class, for use inside a multi progress bar."
      },
      "multi": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Create container for multiple progress bars"
      },
      "max": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Upper limit for value, default: 100"
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Specify progress, value from 0 to max inclusive."
      },
      "animated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Animate the bar, must have striped set to True to work."
      },
      "striped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use striped progress bar"
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set color of the progress bar, options: primary, secondary, success,\nwarning, danger, info."
      },
      "barClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS classes to apply to the bar."
      }
    }
  },
  "src/components/Table.js": {
    "description": "",
    "displayName": "Table",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "HTML tag to use for the table, default: table"
      },
      "size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Specify table size, options: sm, md, lg"
      },
      "bordered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set bordered style"
      },
      "borderless": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set borderless style"
      },
      "striped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply striped style"
      },
      "dark": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "set 'dark' style"
      },
      "hover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Add hover animation"
      },
      "responsive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow horizontal scrolling if parent is too small to contain table."
      }
    }
  },
  "src/components/Tooltip.js": {
    "description": "",
    "displayName": "Tooltip",
    "methods": [
      {
        "name": "toggle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "target": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the element to attach the tooltip to"
      },
      "boundariesElement": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "boundaries for popper, can be scrollParent, window, viewport, or any DOM element"
      },
      "hideArrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hide arrow on tooltip"
      },
      "container": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Where to inject the popper DOM node, default body"
      },
      "delay": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "shape",
              "value": {
                "show": {
                  "name": "number",
                  "required": false
                },
                "hide": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "optionally override show/hide delays - default { show: 0, hide: 250 }"
      },
      "innerClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS classes to apply to the inner-tooltip"
      },
      "arrowClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS classes to apply to the arrow-tooltip ('arrow' by default)"
      },
      "autohide": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Optionally hide tooltip when hovering over tooltip content - default true"
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "'auto-start'",
              "computed": false
            },
            {
              "value": "'auto-end'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'top-start'",
              "computed": false
            },
            {
              "value": "'top-end'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'right-start'",
              "computed": false
            },
            {
              "value": "'right-end'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'bottom-start'",
              "computed": false
            },
            {
              "value": "'bottom-end'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'left-start'",
              "computed": false
            },
            {
              "value": "'left-end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "How to place the tooltip."
      },
      "offset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Tooltip offset"
      }
    }
  },
  "src/components/card/Card.js": {
    "description": "",
    "displayName": "Card",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Card color, options: primary, secondary, success, info, warning, danger,\nlink. Default is secondary"
      },
      "body": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Wrap all children in a CardBody element (basically add some padding)"
      },
      "outline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use outline style."
      },
      "inverse": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Invert text colours for use with a dark color background."
      }
    }
  },
  "src/components/card/CardBody.js": {
    "description": "",
    "displayName": "CardBody",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card body, default: div"
      }
    }
  },
  "src/components/card/CardColumns.js": {
    "description": "",
    "displayName": "CardColumns",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card columns container, default: div"
      }
    }
  },
  "src/components/card/CardDeck.js": {
    "description": "",
    "displayName": "CardDeck",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card deck, default: div"
      }
    }
  },
  "src/components/card/CardFooter.js": {
    "description": "",
    "displayName": "CardFooter",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card footer, default: div"
      }
    }
  },
  "src/components/card/CardGroup.js": {
    "description": "",
    "displayName": "CardGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card group, default: div"
      }
    }
  },
  "src/components/card/CardHeader.js": {
    "description": "",
    "displayName": "CardHeader",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card header, default: div"
      }
    }
  },
  "src/components/card/CardImg.js": {
    "description": "",
    "displayName": "CardImg",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card body, default: div"
      },
      "top": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Place image at top of card (round corners etc.)"
      },
      "bottom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Place image at bottom of card (round corners etc.)"
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URI of the embeddable content."
      },
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Alternative text in case an image can't be displayed."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be displayed as a tooltip when hovering"
      }
    }
  },
  "src/components/card/CardImgOverlay.js": {
    "description": "",
    "displayName": "CardImgOverlay",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card image overlay, default: div"
      }
    }
  },
  "src/components/card/CardLink.js": {
    "description": "",
    "displayName": "CardLink",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "URL of the resource to link to"
      },
      "external_link": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the browser will treat this as an external link,\nforcing a page refresh at the new location. If false,\nthis just changes the location without triggering a page\nrefresh. Use this if you are observing dcc.Location, for\ninstance. Defaults to true for absolute URLs and false\notherwise."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on."
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently."
      }
    }
  },
  "src/components/card/CardSubtitle.js": {
    "description": "",
    "displayName": "CardSubtitle",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card subtitle, default: h6"
      }
    }
  },
  "src/components/card/CardText.js": {
    "description": "",
    "displayName": "CardText",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card text, default: p"
      }
    }
  },
  "src/components/card/CardTitle.js": {
    "description": "",
    "displayName": "CardTitle",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the card body, default: h5"
      }
    }
  },
  "src/components/layout/Col.js": {
    "description": "",
    "displayName": "Col",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "xs": {
        "type": {
          "name": "custom",
          "raw": "columnProps"
        },
        "required": false,
        "description": "Specify column behaviour on an extra small screen"
      },
      "sm": {
        "type": {
          "name": "custom",
          "raw": "columnProps"
        },
        "required": false,
        "description": "Specify column behaviour on a small screen"
      },
      "md": {
        "type": {
          "name": "custom",
          "raw": "columnProps"
        },
        "required": false,
        "description": "Specify column behaviour on a medium screen"
      },
      "lg": {
        "type": {
          "name": "custom",
          "raw": "columnProps"
        },
        "required": false,
        "description": "Specify column behaviour on a large screen"
      },
      "xl": {
        "type": {
          "name": "custom",
          "raw": "columnProps"
        },
        "required": false,
        "description": "Specify column behaviour on an extra large screen"
      },
      "width": {
        "type": {
          "name": "custom",
          "raw": "columnProps"
        },
        "required": false,
        "description": "Specify the width of the column. Is overriden if xs is specified"
      },
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set vertical alignment of this column in row"
      }
    }
  },
  "src/components/layout/Container.js": {
    "description": "",
    "displayName": "Container",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should container be fluid or not"
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to apply the container class to, default: div"
      }
    }
  },
  "src/components/layout/Row.js": {
    "description": "",
    "displayName": "Row",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "noGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Remove the \"gutters\" between columns in this row.\nsee https://getbootstrap.com/docs/4.0/layout/grid/#no-gutters"
      },
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set vertical alignment of columns"
      },
      "justify": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            },
            {
              "value": "'around'",
              "computed": false
            },
            {
              "value": "'between'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set horizontal spacing of columns."
      }
    }
  },
  "src/components/listgroup/ListGroup.js": {
    "description": "",
    "displayName": "ListGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the list, default: ul"
      },
      "flush": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply \"flush\" styling to list"
      }
    }
  },
  "src/components/listgroup/ListGroupItem.js": {
    "description": "",
    "displayName": "ListGroupItem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the listgroupitem, default: li"
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply active style to item"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply disabled style to item"
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Item color, options: primary, secondary, success, info, warning,\ndanger, default: secondary"
      },
      "action": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply list-group-item-action class for hover animation etc."
      }
    }
  },
  "src/components/listgroup/ListGroupItemHeading.js": {
    "description": "",
    "displayName": "ListGroupItemHeading",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the heading, default: h5"
      }
    }
  },
  "src/components/listgroup/ListGroupItemText.js": {
    "description": "",
    "displayName": "ListGroupItemText",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tag": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the text, default: p"
      }
    }
  },
  "src/components/nav/Nav.js": {
    "description": "",
    "displayName": "Nav",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "tabs": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply Tab styling to nav items"
      },
      "pills": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply Pill styling to nav items"
      },
      "card": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply Card styling to nav items"
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Expand the nav items to fill the entire space available"
      },
      "justified": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Expand the nav items to fill the entire space available, making sure\nevery nav item has the same width."
      },
      "vertical": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Arrange NavItems vertically"
      },
      "horizontal": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Arrange NavItems horizontally"
      },
      "navbar": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true if using Nav in Navbar component."
      }
    }
  },
  "src/components/nav/NavItem.js": {
    "description": "",
    "displayName": "NavItem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply active style to item."
      }
    }
  },
  "src/components/nav/NavLink.js": {
    "description": "",
    "displayName": "NavLink",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL of the linked resource."
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply 'active' style to this component",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the link",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "dashEvents": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'click'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/components/nav/Navbar.js": {
    "description": "",
    "displayName": "Navbar",
    "methods": [
      {
        "name": "toggle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "brand": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Branding text, to go top left of the navbar"
      },
      "brand_href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Link to attach to brand"
      },
      "brand_style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Style options for Brand"
      },
      "brand_external_link": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the browser will treat the brand link as external,\nforcing a page refresh at the new location. If false,\nthis just changes the location without triggering a page\nrefresh. Use this if you are observing dcc.Location, for\ninstance. Defaults to true for absolute URLs and false\notherwise."
      },
      "fluid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow menu items to expand to fill width of page",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "light": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply light styling to the navbar",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "dark": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply dark styling to the navbar"
      },
      "fixed": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Fix the navbar's position at the top or bottom of the page, options: top, bottom"
      },
      "sticky": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Stick the navbar to the top or the bottom of the viewport, options: top, bottom\n\nWith `sticky`, the navbar remains in the viewport when you scroll. By\ncontrast, with `fixed`, the navbar will remain at the top or bottom of\nthe page."
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Sets the color of the Navbar, options: primary, secondary, success, warning, danger, info, light.",
        "defaultValue": {
          "value": "\"light\"",
          "computed": false
        }
      },
      "expand": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Specify screen size at which to expand the menu bar, e.g. sm, md, lg etc.",
        "defaultValue": {
          "value": "\"md\"",
          "computed": false
        }
      }
    }
  },
  "src/components/nav/NavbarBrand.js": {
    "description": "",
    "displayName": "NavbarBrand",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "external_link": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the browser will treat this as an external link,\nforcing a page refresh at the new location. If false,\nthis just changes the location without triggering a page\nrefresh. Use this if you are observing dcc.Location, for\ninstance. Defaults to true for absolute URLs and false\notherwise."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "URL of the linked resource"
      }
    }
  },
  "src/components/nav/NavbarToggler.js": {
    "description": "",
    "displayName": "NavbarToggler",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Toggle type, default: button."
      }
    }
  },
  "src/components/tabs/Tab.js": {
    "description": "",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The tab's label"
      },
      "tabId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional identifier for tab used for determining which tab is visible\nif not specified, and Tab is being used inside Tabs component, the tabId\nwill be set to \"tab-i\" where i is (zero indexed) position of tab in list\ntabs pased to Tabs component."
      }
    }
  },
  "src/components/tabs/Tabs.js": {
    "description": "",
    "displayName": "Tabs",
    "methods": [
      {
        "name": "parseChildrenToArray",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "toggle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "tab",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "activeTab": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Determine which tab is currently showing. Will be the id of the tab or\n'tab-i' where i is the index of the tab (indexed from zero)"
      }
    }
  }
}