# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Alarm(pulumi.CustomResource):
    """
    This resource provides a alarm rule resource and it can be used to monitor several cloud services according different metrics.
    Details for [alarm rule](https://www.alibabacloud.com/help/doc-detail/28608.htm).
    """
    def __init__(__self__, __name__, __opts__=None, contact_groups=None, dimensions=None, enabled=None, end_time=None, metric=None, name=None, notify_type=None, operator=None, period=None, project=None, silence_time=None, start_time=None, statistics=None, threshold=None, triggered_count=None):
        """Create a Alarm resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not contact_groups:
            raise TypeError('Missing required property contact_groups')
        elif not isinstance(contact_groups, list):
            raise TypeError('Expected property contact_groups to be a list')
        __self__.contact_groups = contact_groups
        """
        List contact groups of the alarm rule, which must have been created on the console.
        """
        __props__['contactGroups'] = contact_groups

        if not dimensions:
            raise TypeError('Missing required property dimensions')
        elif not isinstance(dimensions, dict):
            raise TypeError('Expected property dimensions to be a dict')
        __self__.dimensions = dimensions
        """
        Map of the resources associated with the alarm rule, such as "instanceId", "device" and "port". Each key's value is a string and it uses comma to split multiple items. For more information, see [Metrics Reference](https://www.alibabacloud.com/help/doc-detail/28619.htm).
        """
        __props__['dimensions'] = dimensions

        if enabled and not isinstance(enabled, bool):
            raise TypeError('Expected property enabled to be a bool')
        __self__.enabled = enabled
        """
        Whether to enable alarm rule. Default to true.
        """
        __props__['enabled'] = enabled

        if end_time and not isinstance(end_time, int):
            raise TypeError('Expected property end_time to be a int')
        __self__.end_time = end_time
        """
        End time of the alarm effective period. Default value 24 and it indicates the time 24:00. Valid value range: [0, 24].
        """
        __props__['endTime'] = end_time

        if not metric:
            raise TypeError('Missing required property metric')
        elif not isinstance(metric, basestring):
            raise TypeError('Expected property metric to be a basestring')
        __self__.metric = metric
        """
        Name of the monitoring metrics corresponding to a project, such as "CPUUtilization" and "networkin_rate". For more information, see [Metrics Reference](https://www.alibabacloud.com/help/doc-detail/28619.htm).
        """
        __props__['metric'] = metric

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The alarm rule name.
        """
        __props__['name'] = name

        if notify_type and not isinstance(notify_type, int):
            raise TypeError('Expected property notify_type to be a int')
        __self__.notify_type = notify_type
        """
        Notification type. Valid value [0, 1]. The value 0 indicates TradeManager+email, and the value 1 indicates that TradeManager+email+SMS
        """
        __props__['notifyType'] = notify_type

        if operator and not isinstance(operator, basestring):
            raise TypeError('Expected property operator to be a basestring')
        __self__.operator = operator
        """
        Alarm comparison operator. Valid values: ["<=", "<", ">", ">=", "==", "!="]. Default to "==".
        """
        __props__['operator'] = operator

        if period and not isinstance(period, int):
            raise TypeError('Expected property period to be a int')
        __self__.period = period
        """
        Index query cycle, which must be consistent with that defined for metrics. Default to 300, in seconds.
        """
        __props__['period'] = period

        if not project:
            raise TypeError('Missing required property project')
        elif not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        """
        Monitor project name, such as "acs_ecs_dashboard" and "acs_rds_dashboard". For more information, see [Metrics Reference](https://www.alibabacloud.com/help/doc-detail/28619.htm).
        """
        __props__['project'] = project

        if silence_time and not isinstance(silence_time, int):
            raise TypeError('Expected property silence_time to be a int')
        __self__.silence_time = silence_time
        """
        Notification silence period in the alarm state, in seconds. Valid value range: [300, 86400]. Default to 86400
        """
        __props__['silenceTime'] = silence_time

        if start_time and not isinstance(start_time, int):
            raise TypeError('Expected property start_time to be a int')
        __self__.start_time = start_time
        """
        Start time of the alarm effective period. Default to 0 and it indicates the time 00:00. Valid value range: [0, 24].
        """
        __props__['startTime'] = start_time

        if statistics and not isinstance(statistics, basestring):
            raise TypeError('Expected property statistics to be a basestring')
        __self__.statistics = statistics
        """
        Statistical method. It must be consistent with that defined for metrics. Valid values: ["Average", "Minimum", "Maximum"]. Default to "Average".
        """
        __props__['statistics'] = statistics

        if not threshold:
            raise TypeError('Missing required property threshold')
        elif not isinstance(threshold, basestring):
            raise TypeError('Expected property threshold to be a basestring')
        __self__.threshold = threshold
        """
        Alarm threshold value, which must be a numeric value currently.
        """
        __props__['threshold'] = threshold

        if triggered_count and not isinstance(triggered_count, int):
            raise TypeError('Expected property triggered_count to be a int')
        __self__.triggered_count = triggered_count
        """
        Number of consecutive times it has been detected that the values exceed the threshold. Default to 3.
        """
        __props__['triggeredCount'] = triggered_count

        __self__.status = pulumi.runtime.UNKNOWN
        """
        The current alarm rule status.
        """

        super(Alarm, __self__).__init__(
            'alicloud:cms/alarm:Alarm',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'contactGroups' in outs:
            self.contact_groups = outs['contactGroups']
        if 'dimensions' in outs:
            self.dimensions = outs['dimensions']
        if 'enabled' in outs:
            self.enabled = outs['enabled']
        if 'endTime' in outs:
            self.end_time = outs['endTime']
        if 'metric' in outs:
            self.metric = outs['metric']
        if 'name' in outs:
            self.name = outs['name']
        if 'notifyType' in outs:
            self.notify_type = outs['notifyType']
        if 'operator' in outs:
            self.operator = outs['operator']
        if 'period' in outs:
            self.period = outs['period']
        if 'project' in outs:
            self.project = outs['project']
        if 'silenceTime' in outs:
            self.silence_time = outs['silenceTime']
        if 'startTime' in outs:
            self.start_time = outs['startTime']
        if 'statistics' in outs:
            self.statistics = outs['statistics']
        if 'status' in outs:
            self.status = outs['status']
        if 'threshold' in outs:
            self.threshold = outs['threshold']
        if 'triggeredCount' in outs:
            self.triggered_count = outs['triggeredCount']
