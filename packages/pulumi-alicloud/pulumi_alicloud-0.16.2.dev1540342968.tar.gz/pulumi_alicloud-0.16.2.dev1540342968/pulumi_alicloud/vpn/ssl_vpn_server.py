# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class SslVpnServer(pulumi.CustomResource):
    """
    Provides a SSL VPN server resource. [Refer to details](https://www.alibabacloud.com/help/doc-detail/64960.htm)
    
    ~> **NOTE:** Terraform will auto build ssl vpn server while it uses `alicloud_ssl_vpn_server` to build a ssl vpn server resource.
    """
    def __init__(__self__, __name__, __opts__=None, cipher=None, client_ip_pool=None, compress=None, local_subnet=None, name=None, port=None, protocol=None, vpn_gateway_id=None):
        """Create a SslVpnServer resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if cipher and not isinstance(cipher, basestring):
            raise TypeError('Expected property cipher to be a basestring')
        __self__.cipher = cipher
        """
        The encryption algorithm used by the SSL-VPN server. Valid value: AES-128-CBC (default)| AES-192-CBC | AES-256-CBC | none
        """
        __props__['cipher'] = cipher

        if not client_ip_pool:
            raise TypeError('Missing required property client_ip_pool')
        elif not isinstance(client_ip_pool, basestring):
            raise TypeError('Expected property client_ip_pool to be a basestring')
        __self__.client_ip_pool = client_ip_pool
        """
        The CIDR block from which access addresses are allocated to the virtual network interface card of the client.
        """
        __props__['clientIpPool'] = client_ip_pool

        if compress and not isinstance(compress, bool):
            raise TypeError('Expected property compress to be a bool')
        __self__.compress = compress
        """
        Specify whether to compress the communication. Valid value: true (default) | false
        """
        __props__['compress'] = compress

        if not local_subnet:
            raise TypeError('Missing required property local_subnet')
        elif not isinstance(local_subnet, basestring):
            raise TypeError('Expected property local_subnet to be a basestring')
        __self__.local_subnet = local_subnet
        """
        The CIDR block to be accessed by the client through the SSL-VPN connection.
        """
        __props__['localSubnet'] = local_subnet

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the SSL-VPN server.
        """
        __props__['name'] = name

        if port and not isinstance(port, int):
            raise TypeError('Expected property port to be a int')
        __self__.port = port
        """
        The port used by the SSL-VPN server. The default value is 1194.The following ports cannot be used: [22, 2222, 22222, 9000, 9001, 9002, 7505, 80, 443, 53, 68, 123, 4510, 4560, 500, 4500].
        """
        __props__['port'] = port

        if protocol and not isinstance(protocol, basestring):
            raise TypeError('Expected property protocol to be a basestring')
        __self__.protocol = protocol
        """
        The protocol used by the SSL-VPN server. Valid value: UDP(default) |TCP
        """
        __props__['protocol'] = protocol

        if not vpn_gateway_id:
            raise TypeError('Missing required property vpn_gateway_id')
        elif not isinstance(vpn_gateway_id, basestring):
            raise TypeError('Expected property vpn_gateway_id to be a basestring')
        __self__.vpn_gateway_id = vpn_gateway_id
        """
        The ID of the VPN gateway.
        """
        __props__['vpnGatewayId'] = vpn_gateway_id

        __self__.connections = pulumi.runtime.UNKNOWN
        """
        The number of current connections.
        """
        __self__.internet_ip = pulumi.runtime.UNKNOWN
        """
        The internet IP of the SSL-VPN server.
        """
        __self__.max_connections = pulumi.runtime.UNKNOWN
        """
        The maximum number of connections.
        """

        super(SslVpnServer, __self__).__init__(
            'alicloud:vpn/sslVpnServer:SslVpnServer',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'cipher' in outs:
            self.cipher = outs['cipher']
        if 'clientIpPool' in outs:
            self.client_ip_pool = outs['clientIpPool']
        if 'compress' in outs:
            self.compress = outs['compress']
        if 'connections' in outs:
            self.connections = outs['connections']
        if 'internetIp' in outs:
            self.internet_ip = outs['internetIp']
        if 'localSubnet' in outs:
            self.local_subnet = outs['localSubnet']
        if 'maxConnections' in outs:
            self.max_connections = outs['maxConnections']
        if 'name' in outs:
            self.name = outs['name']
        if 'port' in outs:
            self.port = outs['port']
        if 'protocol' in outs:
            self.protocol = outs['protocol']
        if 'vpnGatewayId' in outs:
            self.vpn_gateway_id = outs['vpnGatewayId']
