# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class MachineGroup(pulumi.CustomResource):
    """
    Log Service manages all the ECS instances whose logs need to be collected by using the Logtail client in the form of machine groups.
     [Refer to details](https://www.alibabacloud.com/help/doc-detail/28966.htm)
    """
    def __init__(__self__, __name__, __opts__=None, identify_lists=None, identify_type=None, name=None, project=None, topic=None):
        """Create a MachineGroup resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not identify_lists:
            raise TypeError('Missing required property identify_lists')
        elif not isinstance(identify_lists, list):
            raise TypeError('Expected property identify_lists to be a list')
        __self__.identify_lists = identify_lists
        """
        The machine identification.
        """
        __props__['identifyLists'] = identify_lists

        if identify_type and not isinstance(identify_type, basestring):
            raise TypeError('Expected property identify_type to be a basestring')
        __self__.identify_type = identify_type
        """
        The machine identification type, including IP and user-defined identity. Valid values are "ip" and "userdefined". Default to "ip".
        * `identify_list`-  The specific machine identification, which can be an IP address or user-defined identity.
        """
        __props__['identifyType'] = identify_type

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The machine group name, which is unique in the same project.
        """
        __props__['name'] = name

        if not project:
            raise TypeError('Missing required property project')
        elif not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        """
        The project name to the machine group belongs.
        """
        __props__['project'] = project

        if topic and not isinstance(topic, basestring):
            raise TypeError('Expected property topic to be a basestring')
        __self__.topic = topic
        """
        The topic of a machine group.
        """
        __props__['topic'] = topic

        super(MachineGroup, __self__).__init__(
            'alicloud:log/machineGroup:MachineGroup',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'identifyLists' in outs:
            self.identify_lists = outs['identifyLists']
        if 'identifyType' in outs:
            self.identify_type = outs['identifyType']
        if 'name' in outs:
            self.name = outs['name']
        if 'project' in outs:
            self.project = outs['project']
        if 'topic' in outs:
            self.topic = outs['topic']
