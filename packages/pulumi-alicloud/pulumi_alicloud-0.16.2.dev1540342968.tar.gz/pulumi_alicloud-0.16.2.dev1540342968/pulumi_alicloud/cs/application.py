# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Application(pulumi.CustomResource):
    """
    This resource use an orchestration template to define and deploy a multi-container application. An application is created by using an orchestration template.
    Each application can contain one or more services.
    
    -> **NOTE:** Application orchestration template must be a valid Docker Compose YAML template.
    
    -> **NOTE:** At present, this resource only support swarm cluster.
    """
    def __init__(__self__, __name__, __opts__=None, blue_green=None, blue_green_confirm=None, cluster_name=None, description=None, environment=None, latest_image=None, name=None, template=None, version=None):
        """Create a Application resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if blue_green and not isinstance(blue_green, bool):
            raise TypeError('Expected property blue_green to be a bool')
        __self__.blue_green = blue_green
        """
        Wherther to use "Blue Green" method when release a new version. Default to false.
        """
        __props__['blueGreen'] = blue_green

        if blue_green_confirm and not isinstance(blue_green_confirm, bool):
            raise TypeError('Expected property blue_green_confirm to be a bool')
        __self__.blue_green_confirm = blue_green_confirm
        """
        Whether to confirm a "Blue Green" application. Default to false. It will be ignored when `blue_green` is false.
        """
        __props__['blueGreenConfirm'] = blue_green_confirm

        if not cluster_name:
            raise TypeError('Missing required property cluster_name')
        elif not isinstance(cluster_name, basestring):
            raise TypeError('Expected property cluster_name to be a basestring')
        __self__.cluster_name = cluster_name
        """
        The swarm cluster's name.
        """
        __props__['clusterName'] = cluster_name

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        The description of application.
        """
        __props__['description'] = description

        if environment and not isinstance(environment, dict):
            raise TypeError('Expected property environment to be a dict')
        __self__.environment = environment
        """
        A key/value map used to replace the variable parameter in the Compose template.
        """
        __props__['environment'] = environment

        if latest_image and not isinstance(latest_image, bool):
            raise TypeError('Expected property latest_image to be a bool')
        __self__.latest_image = latest_image
        """
        Whether to use latest docker image while each updating application. Default to false.
        """
        __props__['latestImage'] = latest_image

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The application name. It should be 1-64 characters long, and can contain numbers, English letters and hyphens, but cannot start with hyphens.
        """
        __props__['name'] = name

        if not template:
            raise TypeError('Missing required property template')
        elif not isinstance(template, basestring):
            raise TypeError('Expected property template to be a basestring')
        __self__.template = template
        """
        The application deployment template and it must be [Docker Compose format](https://docs.docker.com/compose/).
        """
        __props__['template'] = template

        if version and not isinstance(version, basestring):
            raise TypeError('Expected property version to be a basestring')
        __self__.version = version
        """
        The application deploying version. Each updating, it must be different with current. Default to "1.0"
        """
        __props__['version'] = version

        __self__.default_domain = pulumi.runtime.UNKNOWN
        """
        The application default domain and it can be used to configure routing service.
        """
        __self__.services = pulumi.runtime.UNKNOWN
        """
        List of services in the application. It contains several attributes to `Block Nodes`.
        """

        super(Application, __self__).__init__(
            'alicloud:cs/application:Application',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'blueGreen' in outs:
            self.blue_green = outs['blueGreen']
        if 'blueGreenConfirm' in outs:
            self.blue_green_confirm = outs['blueGreenConfirm']
        if 'clusterName' in outs:
            self.cluster_name = outs['clusterName']
        if 'defaultDomain' in outs:
            self.default_domain = outs['defaultDomain']
        if 'description' in outs:
            self.description = outs['description']
        if 'environment' in outs:
            self.environment = outs['environment']
        if 'latestImage' in outs:
            self.latest_image = outs['latestImage']
        if 'name' in outs:
            self.name = outs['name']
        if 'services' in outs:
            self.services = outs['services']
        if 'template' in outs:
            self.template = outs['template']
        if 'version' in outs:
            self.version = outs['version']
