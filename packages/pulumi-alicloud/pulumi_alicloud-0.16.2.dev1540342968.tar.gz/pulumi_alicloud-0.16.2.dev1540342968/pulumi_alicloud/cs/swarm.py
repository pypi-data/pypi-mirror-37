# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Swarm(pulumi.CustomResource):
    """
    This resource will help you to manager a Swarm Cluster.
    
    -> **NOTE:** Swarm cluster only supports VPC network and you can specify a VPC network by filed `vswitch_id`.
    """
    def __init__(__self__, __name__, __opts__=None, cidr_block=None, disk_category=None, disk_size=None, image_id=None, instance_type=None, is_outdated=None, name=None, name_prefix=None, need_slb=None, node_number=None, password=None, release_eip=None, size=None, vswitch_id=None):
        """Create a Swarm resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not cidr_block:
            raise TypeError('Missing required property cidr_block')
        elif not isinstance(cidr_block, basestring):
            raise TypeError('Expected property cidr_block to be a basestring')
        __self__.cidr_block = cidr_block
        """
        The CIDR block for the Container. It can not be same as the CIDR used by the VPC.
        Valid value:
        - 192.168.0.0/16
        - 172.19-30.0.0/16
        - 10.0.0.0/16
        """
        __props__['cidrBlock'] = cidr_block

        if disk_category and not isinstance(disk_category, basestring):
            raise TypeError('Expected property disk_category to be a basestring')
        __self__.disk_category = disk_category
        """
        The data disk category of ECS instance node. Its valid value are `cloud_ssd` and `cloud_efficiency`. Default to `cloud_efficiency`.
        """
        __props__['diskCategory'] = disk_category

        if disk_size and not isinstance(disk_size, int):
            raise TypeError('Expected property disk_size to be a int')
        __self__.disk_size = disk_size
        """
        The data disk size of ECS instance node. Its valid value is 20~32768 GB. Default to 20.
        """
        __props__['diskSize'] = disk_size

        if image_id and not isinstance(image_id, basestring):
            raise TypeError('Expected property image_id to be a basestring')
        __self__.image_id = image_id
        """
        The image ID of ECS instance node used. Default to System automate allocated.
        """
        __props__['imageId'] = image_id

        if not instance_type:
            raise TypeError('Missing required property instance_type')
        elif not isinstance(instance_type, basestring):
            raise TypeError('Expected property instance_type to be a basestring')
        __self__.instance_type = instance_type
        """
        The type of ECS instance node.
        """
        __props__['instanceType'] = instance_type

        if is_outdated and not isinstance(is_outdated, bool):
            raise TypeError('Expected property is_outdated to be a bool')
        __self__.is_outdated = is_outdated
        """
        Whether to use outdated instance type. Default to false.
        """
        __props__['isOutdated'] = is_outdated

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The container cluster's name. It is the only in one Alicloud account.
        """
        __props__['name'] = name

        if name_prefix and not isinstance(name_prefix, basestring):
            raise TypeError('Expected property name_prefix to be a basestring')
        __self__.name_prefix = name_prefix
        """
        The container cluster name's prefix. It is conflict with `name`. If it is specified, terraform will using it to build the only cluster name. Default to 'Terraform-Creation'.
        """
        __props__['namePrefix'] = name_prefix

        if need_slb and not isinstance(need_slb, bool):
            raise TypeError('Expected property need_slb to be a bool')
        __self__.need_slb = need_slb
        __props__['needSlb'] = need_slb

        if node_number and not isinstance(node_number, int):
            raise TypeError('Expected property node_number to be a int')
        __self__.node_number = node_number
        """
        The ECS node number of the container cluster. Its value choices are 1~50, and default to 1.
        """
        __props__['nodeNumber'] = node_number

        if not password:
            raise TypeError('Missing required property password')
        elif not isinstance(password, basestring):
            raise TypeError('Expected property password to be a basestring')
        __self__.password = password
        """
        The password of ECS instance node.
        """
        __props__['password'] = password

        if release_eip and not isinstance(release_eip, bool):
            raise TypeError('Expected property release_eip to be a bool')
        __self__.release_eip = release_eip
        """
        Whether to release EIP after creating swarm cluster successfully. Default to false.
        * `need_slb`- Whether to create the default simple routing Server Load Balancer instance for the cluster. The default value is true.
        """
        __props__['releaseEip'] = release_eip

        if size and not isinstance(size, int):
            raise TypeError('Expected property size to be a int')
        __self__.size = size
        """
        Field 'size' has been deprecated from provider version 1.9.1. New field 'node_number' replaces it.
        """
        __props__['size'] = size

        if not vswitch_id:
            raise TypeError('Missing required property vswitch_id')
        elif not isinstance(vswitch_id, basestring):
            raise TypeError('Expected property vswitch_id to be a basestring')
        __self__.vswitch_id = vswitch_id
        """
        The password of ECS instance node. If it is not specified, the container cluster's network mode will be `Classic`.
        """
        __props__['vswitchId'] = vswitch_id

        __self__.agent_version = pulumi.runtime.UNKNOWN
        """
        The nodes agent version.
        """
        __self__.nodes = pulumi.runtime.UNKNOWN
        """
        List of cluster nodes. It contains several attributes to `Block Nodes`.
        """
        __self__.security_group_id = pulumi.runtime.UNKNOWN
        """
        The ID of security group where the current cluster worker node is located.
        """
        __self__.slb_id = pulumi.runtime.UNKNOWN
        """
        The ID of load balancer where the current cluster worker node is located.
        """
        __self__.vpc_id = pulumi.runtime.UNKNOWN
        """
        The ID of VPC where the current cluster is located.
        """

        super(Swarm, __self__).__init__(
            'alicloud:cs/swarm:Swarm',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'agentVersion' in outs:
            self.agent_version = outs['agentVersion']
        if 'cidrBlock' in outs:
            self.cidr_block = outs['cidrBlock']
        if 'diskCategory' in outs:
            self.disk_category = outs['diskCategory']
        if 'diskSize' in outs:
            self.disk_size = outs['diskSize']
        if 'imageId' in outs:
            self.image_id = outs['imageId']
        if 'instanceType' in outs:
            self.instance_type = outs['instanceType']
        if 'isOutdated' in outs:
            self.is_outdated = outs['isOutdated']
        if 'name' in outs:
            self.name = outs['name']
        if 'namePrefix' in outs:
            self.name_prefix = outs['namePrefix']
        if 'needSlb' in outs:
            self.need_slb = outs['needSlb']
        if 'nodeNumber' in outs:
            self.node_number = outs['nodeNumber']
        if 'nodes' in outs:
            self.nodes = outs['nodes']
        if 'password' in outs:
            self.password = outs['password']
        if 'releaseEip' in outs:
            self.release_eip = outs['releaseEip']
        if 'securityGroupId' in outs:
            self.security_group_id = outs['securityGroupId']
        if 'size' in outs:
            self.size = outs['size']
        if 'slbId' in outs:
            self.slb_id = outs['slbId']
        if 'vpcId' in outs:
            self.vpc_id = outs['vpcId']
        if 'vswitchId' in outs:
            self.vswitch_id = outs['vswitchId']
