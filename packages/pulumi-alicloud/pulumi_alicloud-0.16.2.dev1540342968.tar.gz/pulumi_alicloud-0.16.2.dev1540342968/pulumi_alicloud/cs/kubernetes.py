# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Kubernetes(pulumi.CustomResource):
    """
    This resource will help you to manager a Kubernetes Cluster. The cluster is same as container service created by web console.
    
    -> **NOTE:** Kubernetes cluster only supports VPC network and it can access internet while creating kubernetes cluster.
    A Nat Gateway and configuring a SNAT for it can ensure one VPC network access internet. If there is no nat gateway in the
    VPC, you can set `new_nat_gateway` to "true" to create one automatically.
    
    -> **NOTE:** If there is no specified `vswitch_ids`, the resource will create a new VPC and VSwitch while creating kubernetes cluster.
    
    -> **NOTE:** Each kubernetes cluster contains 3 master nodes and those number cannot be changed at now.
    
    -> **NOTE:** Creating kubernetes cluster need to install several packages and it will cost about 15 minutes. Please be patient.
    
    -> **NOTE:** From version 1.9.4, the provider supports to download kube config, client certificate, client key and cluster ca certificate
    after creating cluster successfully, and you can put them into the specified location, like '~/.kube/config'.
    
    -> **NOTE:** From version 1.16.0, the provider supports Multiple Availability Zones Kubernetes Cluster. To create a cluster of this kind,
    you must specify three items in `vswitch_ids`, `master_instance_types` and `worker_instance_types`.
    
    -> **NOTE:** From version 1.20.0, the provider supports disabling internet load balancer for API Server by setting `false` to `slb_internet_enabled`.
    """
    def __init__(__self__, __name__, __opts__=None, availability_zone=None, client_cert=None, client_key=None, cluster_ca_cert=None, cluster_network_type=None, enable_ssh=None, install_cloud_monitor=None, is_outdated=None, key_name=None, kube_config=None, log_config=None, master_disk_category=None, master_disk_size=None, master_instance_type=None, master_instance_types=None, name=None, name_prefix=None, new_nat_gateway=None, node_cidr_mask=None, nodes=None, password=None, pod_cidr=None, service_cidr=None, slb_internet_enabled=None, version=None, vswitch_id=None, vswitch_ids=None, worker_data_disk_category=None, worker_data_disk_size=None, worker_disk_category=None, worker_disk_size=None, worker_instance_type=None, worker_instance_types=None, worker_number=None, worker_numbers=None):
        """Create a Kubernetes resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if availability_zone and not isinstance(availability_zone, basestring):
            raise TypeError('Expected property availability_zone to be a basestring')
        __self__.availability_zone = availability_zone
        """
        The Zone where new kubernetes cluster will be located. If it is not be specified, the value will be vswitch's zone.
        """
        __props__['availabilityZone'] = availability_zone

        if client_cert and not isinstance(client_cert, basestring):
            raise TypeError('Expected property client_cert to be a basestring')
        __self__.client_cert = client_cert
        """
        The path of client certificate, like `~/.kube/client-cert.pem`.
        """
        __props__['clientCert'] = client_cert

        if client_key and not isinstance(client_key, basestring):
            raise TypeError('Expected property client_key to be a basestring')
        __self__.client_key = client_key
        """
        The path of client key, like `~/.kube/client-key.pem`.
        """
        __props__['clientKey'] = client_key

        if cluster_ca_cert and not isinstance(cluster_ca_cert, basestring):
            raise TypeError('Expected property cluster_ca_cert to be a basestring')
        __self__.cluster_ca_cert = cluster_ca_cert
        """
        The path of cluster ca certificate, like `~/.kube/cluster-ca-cert.pem`
        """
        __props__['clusterCaCert'] = cluster_ca_cert

        if cluster_network_type and not isinstance(cluster_network_type, basestring):
            raise TypeError('Expected property cluster_network_type to be a basestring')
        __self__.cluster_network_type = cluster_network_type
        """
        The network that cluster uses, use `flannel` or `terway`.
        """
        __props__['clusterNetworkType'] = cluster_network_type

        if enable_ssh and not isinstance(enable_ssh, bool):
            raise TypeError('Expected property enable_ssh to be a bool')
        __self__.enable_ssh = enable_ssh
        """
        Whether to allow to SSH login kubernetes. Default to false.
        """
        __props__['enableSsh'] = enable_ssh

        if install_cloud_monitor and not isinstance(install_cloud_monitor, bool):
            raise TypeError('Expected property install_cloud_monitor to be a bool')
        __self__.install_cloud_monitor = install_cloud_monitor
        """
        Whether to install cloud monitor for the kubernetes' node.
        """
        __props__['installCloudMonitor'] = install_cloud_monitor

        if is_outdated and not isinstance(is_outdated, bool):
            raise TypeError('Expected property is_outdated to be a bool')
        __self__.is_outdated = is_outdated
        """
        Whether to use outdated instance type. Default to false.
        """
        __props__['isOutdated'] = is_outdated

        if key_name and not isinstance(key_name, basestring):
            raise TypeError('Expected property key_name to be a basestring')
        __self__.key_name = key_name
        """
        The keypair of ssh login cluster node, you have to create it first.
        """
        __props__['keyName'] = key_name

        if kube_config and not isinstance(kube_config, basestring):
            raise TypeError('Expected property kube_config to be a basestring')
        __self__.kube_config = kube_config
        """
        The path of kube config, like `~/.kube/config`.
        """
        __props__['kubeConfig'] = kube_config

        if log_config and not isinstance(log_config, dict):
            raise TypeError('Expected property log_config to be a dict')
        __self__.log_config = log_config
        """
        A list of one element containing information about the associated log store. It contains the following attributes:
        """
        __props__['logConfig'] = log_config

        if master_disk_category and not isinstance(master_disk_category, basestring):
            raise TypeError('Expected property master_disk_category to be a basestring')
        __self__.master_disk_category = master_disk_category
        """
        The system disk category of master node. Its valid value are `cloud_ssd` and `cloud_efficiency`. Default to `cloud_efficiency`.
        """
        __props__['masterDiskCategory'] = master_disk_category

        if master_disk_size and not isinstance(master_disk_size, int):
            raise TypeError('Expected property master_disk_size to be a int')
        __self__.master_disk_size = master_disk_size
        """
        The system disk size of master node. Its valid value range [20~32768] in GB. Default to 20.
        """
        __props__['masterDiskSize'] = master_disk_size

        if master_instance_type and not isinstance(master_instance_type, basestring):
            raise TypeError('Expected property master_instance_type to be a basestring')
        __self__.master_instance_type = master_instance_type
        """
        (Required, Force new resource) The instance type of master node.
        """
        __props__['masterInstanceType'] = master_instance_type

        if not master_instance_types:
            raise TypeError('Missing required property master_instance_types')
        elif not isinstance(master_instance_types, list):
            raise TypeError('Expected property master_instance_types to be a list')
        __self__.master_instance_types = master_instance_types
        """
        The instance type of master node. Specify one type for single AZ Cluster, three types for MultiAZ Cluster.
        """
        __props__['masterInstanceTypes'] = master_instance_types

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The kubernetes cluster's name. It is the only in one Alicloud account.
        """
        __props__['name'] = name

        if name_prefix and not isinstance(name_prefix, basestring):
            raise TypeError('Expected property name_prefix to be a basestring')
        __self__.name_prefix = name_prefix
        """
        The kubernetes cluster name's prefix. It is conflict with `name`. If it is specified, terraform will using it to build the only cluster name. Default to "Terraform-Creation".
        """
        __props__['namePrefix'] = name_prefix

        if new_nat_gateway and not isinstance(new_nat_gateway, bool):
            raise TypeError('Expected property new_nat_gateway to be a bool')
        __self__.new_nat_gateway = new_nat_gateway
        """
        Whether to create a new nat gateway while creating kubernetes cluster. Default to true.
        """
        __props__['newNatGateway'] = new_nat_gateway

        if node_cidr_mask and not isinstance(node_cidr_mask, int):
            raise TypeError('Expected property node_cidr_mask to be a int')
        __self__.node_cidr_mask = node_cidr_mask
        """
        The network mask used on pods for each node, ranging from `24` to `28`.
        Larger this number is, less pods can be allocated on each node. Default value is `24`, means you can allocate 256 pods on each node.
        """
        __props__['nodeCidrMask'] = node_cidr_mask

        if nodes and not isinstance(nodes, list):
            raise TypeError('Expected property nodes to be a list')
        __self__.nodes = nodes
        """
        (Deprecated from version 1.9.4) It has been deprecated from provider version 1.9.4. New field `master_nodes` and `worker_nodes` replace it.
        """
        __props__['nodes'] = nodes

        if password and not isinstance(password, basestring):
            raise TypeError('Expected property password to be a basestring')
        __self__.password = password
        """
        The password of ssh login cluster node. You have to specify one of `password` and `key_name` fields.
        """
        __props__['password'] = password

        if pod_cidr and not isinstance(pod_cidr, basestring):
            raise TypeError('Expected property pod_cidr to be a basestring')
        __self__.pod_cidr = pod_cidr
        """
        The CIDR block for the pod network. It will be allocated automatically when `vswitch_ids` is not specified.
        It cannot be duplicated with the VPC CIDR and CIDR used by Kubernetes cluster in VPC, cannot be modified after creation.
        Maximum number of hosts allowed in the cluster: 256. Refer to [Plan Kubernetes CIDR blocks under VPC](https://www.alibabacloud.com/help/doc-detail/64530.htm).
        """
        __props__['podCidr'] = pod_cidr

        if service_cidr and not isinstance(service_cidr, basestring):
            raise TypeError('Expected property service_cidr to be a basestring')
        __self__.service_cidr = service_cidr
        """
        The CIDR block for the service network.  It will be allocated automatically when `vswitch_id` is not specified.
        It cannot be duplicated with the VPC CIDR and CIDR used by Kubernetes cluster in VPC, cannot be modified after creation.
        """
        __props__['serviceCidr'] = service_cidr

        if slb_internet_enabled and not isinstance(slb_internet_enabled, bool):
            raise TypeError('Expected property slb_internet_enabled to be a bool')
        __self__.slb_internet_enabled = slb_internet_enabled
        """
        Whether to create internet load balancer for API Server. Default to true.
        """
        __props__['slbInternetEnabled'] = slb_internet_enabled

        if version and not isinstance(version, basestring):
            raise TypeError('Expected property version to be a basestring')
        __self__.version = version
        __props__['version'] = version

        if vswitch_id and not isinstance(vswitch_id, basestring):
            raise TypeError('Expected property vswitch_id to be a basestring')
        __self__.vswitch_id = vswitch_id
        """
        (Force new resource) The vswitch where new kubernetes cluster will be located. If it is not specified, a new VPC and VSwicth will be built. It must be in the zone which `availability_zone` specified.
        """
        __props__['vswitchId'] = vswitch_id

        if vswitch_ids and not isinstance(vswitch_ids, list):
            raise TypeError('Expected property vswitch_ids to be a list')
        __self__.vswitch_ids = vswitch_ids
        """
        The vswitch where new kubernetes cluster will be located. For SingleAZ Cluster, if it is not specified, a new VPC and VSwicth will be built. It must be in the zone which `availability_zone` specified. For MultiAZ Cluster, you must create three vswitches firstly, specify them here.
        """
        __props__['vswitchIds'] = vswitch_ids

        if worker_data_disk_category and not isinstance(worker_data_disk_category, basestring):
            raise TypeError('Expected property worker_data_disk_category to be a basestring')
        __self__.worker_data_disk_category = worker_data_disk_category
        """
        The data disk category of worker node. Its valid value are `cloud_ssd` and `cloud_efficiency`, if not set, data disk will not be created.
        """
        __props__['workerDataDiskCategory'] = worker_data_disk_category

        if worker_data_disk_size and not isinstance(worker_data_disk_size, int):
            raise TypeError('Expected property worker_data_disk_size to be a int')
        __self__.worker_data_disk_size = worker_data_disk_size
        """
        The data disk size of worker node. Its valid value range [20~32768] in GB. When `worker_data_disk_category` is presented, it defaults to 40.
        """
        __props__['workerDataDiskSize'] = worker_data_disk_size

        if worker_disk_category and not isinstance(worker_disk_category, basestring):
            raise TypeError('Expected property worker_disk_category to be a basestring')
        __self__.worker_disk_category = worker_disk_category
        """
        The system disk category of worker node. Its valid value are `cloud_ssd` and `cloud_efficiency`. Default to `cloud_efficiency`.
        """
        __props__['workerDiskCategory'] = worker_disk_category

        if worker_disk_size and not isinstance(worker_disk_size, int):
            raise TypeError('Expected property worker_disk_size to be a int')
        __self__.worker_disk_size = worker_disk_size
        """
        The system disk size of worker node. Its valid value range [20~32768] in GB. Default to 20.
        """
        __props__['workerDiskSize'] = worker_disk_size

        if worker_instance_type and not isinstance(worker_instance_type, basestring):
            raise TypeError('Expected property worker_instance_type to be a basestring')
        __self__.worker_instance_type = worker_instance_type
        """
        (Required, Force new resource) The instance type of worker node.
        """
        __props__['workerInstanceType'] = worker_instance_type

        if not worker_instance_types:
            raise TypeError('Missing required property worker_instance_types')
        elif not isinstance(worker_instance_types, list):
            raise TypeError('Expected property worker_instance_types to be a list')
        __self__.worker_instance_types = worker_instance_types
        """
        The instance type of worker node. Specify one type for single AZ Cluster, three types for MultiAZ Cluster.
        """
        __props__['workerInstanceTypes'] = worker_instance_types

        if worker_number and not isinstance(worker_number, int):
            raise TypeError('Expected property worker_number to be a int')
        __self__.worker_number = worker_number
        """
        The worker node number of the kubernetes cluster. Default to 3. It is limited up to 50 and if you want to enlarge it, please apply white list or contact with us.
        """
        __props__['workerNumber'] = worker_number

        if worker_numbers and not isinstance(worker_numbers, list):
            raise TypeError('Expected property worker_numbers to be a list')
        __self__.worker_numbers = worker_numbers
        """
        The ECS instance node number in the current container cluster.
        """
        __props__['workerNumbers'] = worker_numbers

        __self__.connections = pulumi.runtime.UNKNOWN
        """
        Map of kubernetes cluster connection information. It contains several attributes to `Block Connections`.
        """
        __self__.image_id = pulumi.runtime.UNKNOWN
        """
        The ID of node image.
        """
        __self__.master_nodes = pulumi.runtime.UNKNOWN
        """
        List of cluster master nodes. It contains several attributes to `Block Nodes`.
        """
        __self__.nat_gateway_id = pulumi.runtime.UNKNOWN
        """
        The ID of nat gateway used to launch kubernetes cluster.
        """
        __self__.security_group_id = pulumi.runtime.UNKNOWN
        """
        The ID of security group where the current cluster worker node is located.
        """
        __self__.slb_id = pulumi.runtime.UNKNOWN
        """
        (Deprecated from version 1.9.2).
        """
        __self__.slb_internet = pulumi.runtime.UNKNOWN
        """
        The ID of public load balancer where the current cluster master node is located.
        """
        __self__.slb_intranet = pulumi.runtime.UNKNOWN
        """
        The ID of private load balancer where the current cluster master node is located.
        """
        __self__.vpc_id = pulumi.runtime.UNKNOWN
        """
        The ID of VPC where the current cluster is located.
        """
        __self__.worker_nodes = pulumi.runtime.UNKNOWN
        """
        List of cluster worker nodes. It contains several attributes to `Block Nodes`.
        """

        super(Kubernetes, __self__).__init__(
            'alicloud:cs/kubernetes:Kubernetes',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'availabilityZone' in outs:
            self.availability_zone = outs['availabilityZone']
        if 'clientCert' in outs:
            self.client_cert = outs['clientCert']
        if 'clientKey' in outs:
            self.client_key = outs['clientKey']
        if 'clusterCaCert' in outs:
            self.cluster_ca_cert = outs['clusterCaCert']
        if 'clusterNetworkType' in outs:
            self.cluster_network_type = outs['clusterNetworkType']
        if 'connections' in outs:
            self.connections = outs['connections']
        if 'enableSsh' in outs:
            self.enable_ssh = outs['enableSsh']
        if 'imageId' in outs:
            self.image_id = outs['imageId']
        if 'installCloudMonitor' in outs:
            self.install_cloud_monitor = outs['installCloudMonitor']
        if 'isOutdated' in outs:
            self.is_outdated = outs['isOutdated']
        if 'keyName' in outs:
            self.key_name = outs['keyName']
        if 'kubeConfig' in outs:
            self.kube_config = outs['kubeConfig']
        if 'logConfig' in outs:
            self.log_config = outs['logConfig']
        if 'masterDiskCategory' in outs:
            self.master_disk_category = outs['masterDiskCategory']
        if 'masterDiskSize' in outs:
            self.master_disk_size = outs['masterDiskSize']
        if 'masterInstanceType' in outs:
            self.master_instance_type = outs['masterInstanceType']
        if 'masterInstanceTypes' in outs:
            self.master_instance_types = outs['masterInstanceTypes']
        if 'masterNodes' in outs:
            self.master_nodes = outs['masterNodes']
        if 'name' in outs:
            self.name = outs['name']
        if 'namePrefix' in outs:
            self.name_prefix = outs['namePrefix']
        if 'natGatewayId' in outs:
            self.nat_gateway_id = outs['natGatewayId']
        if 'newNatGateway' in outs:
            self.new_nat_gateway = outs['newNatGateway']
        if 'nodeCidrMask' in outs:
            self.node_cidr_mask = outs['nodeCidrMask']
        if 'nodes' in outs:
            self.nodes = outs['nodes']
        if 'password' in outs:
            self.password = outs['password']
        if 'podCidr' in outs:
            self.pod_cidr = outs['podCidr']
        if 'securityGroupId' in outs:
            self.security_group_id = outs['securityGroupId']
        if 'serviceCidr' in outs:
            self.service_cidr = outs['serviceCidr']
        if 'slbId' in outs:
            self.slb_id = outs['slbId']
        if 'slbInternet' in outs:
            self.slb_internet = outs['slbInternet']
        if 'slbInternetEnabled' in outs:
            self.slb_internet_enabled = outs['slbInternetEnabled']
        if 'slbIntranet' in outs:
            self.slb_intranet = outs['slbIntranet']
        if 'version' in outs:
            self.version = outs['version']
        if 'vpcId' in outs:
            self.vpc_id = outs['vpcId']
        if 'vswitchId' in outs:
            self.vswitch_id = outs['vswitchId']
        if 'vswitchIds' in outs:
            self.vswitch_ids = outs['vswitchIds']
        if 'workerDataDiskCategory' in outs:
            self.worker_data_disk_category = outs['workerDataDiskCategory']
        if 'workerDataDiskSize' in outs:
            self.worker_data_disk_size = outs['workerDataDiskSize']
        if 'workerDiskCategory' in outs:
            self.worker_disk_category = outs['workerDiskCategory']
        if 'workerDiskSize' in outs:
            self.worker_disk_size = outs['workerDiskSize']
        if 'workerInstanceType' in outs:
            self.worker_instance_type = outs['workerInstanceType']
        if 'workerInstanceTypes' in outs:
            self.worker_instance_types = outs['workerInstanceTypes']
        if 'workerNodes' in outs:
            self.worker_nodes = outs['workerNodes']
        if 'workerNumber' in outs:
            self.worker_number = outs['workerNumber']
        if 'workerNumbers' in outs:
            self.worker_numbers = outs['workerNumbers']
