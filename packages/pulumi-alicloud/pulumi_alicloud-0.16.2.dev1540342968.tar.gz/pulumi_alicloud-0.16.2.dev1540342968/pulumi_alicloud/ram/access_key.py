# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class AccessKey(pulumi.CustomResource):
    """
    Provides a RAM User access key resource.
    
    ~> **NOTE:**  You should set the `secret_file` if you want to get the access key.  
    """
    def __init__(__self__, __name__, __opts__=None, secret_file=None, status=None, user_name=None):
        """Create a AccessKey resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if secret_file and not isinstance(secret_file, basestring):
            raise TypeError('Expected property secret_file to be a basestring')
        __self__.secret_file = secret_file
        """
        The name of file that can save access key id and access key secret. Strongly suggest you to specified it when you creating access key, otherwise, you wouldn't get its secret ever.
        """
        __props__['secretFile'] = secret_file

        if status and not isinstance(status, basestring):
            raise TypeError('Expected property status to be a basestring')
        __self__.status = status
        """
        Status of access key. It must be `Active` or `Inactive`. Default value is `Active`.
        """
        __props__['status'] = status

        if user_name and not isinstance(user_name, basestring):
            raise TypeError('Expected property user_name to be a basestring')
        __self__.user_name = user_name
        """
        Name of the RAM user. This name can have a string of 1 to 64 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin with a hyphen.
        """
        __props__['userName'] = user_name

        super(AccessKey, __self__).__init__(
            'alicloud:ram/accessKey:AccessKey',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'secretFile' in outs:
            self.secret_file = outs['secretFile']
        if 'status' in outs:
            self.status = outs['status']
        if 'userName' in outs:
            self.user_name = outs['userName']
