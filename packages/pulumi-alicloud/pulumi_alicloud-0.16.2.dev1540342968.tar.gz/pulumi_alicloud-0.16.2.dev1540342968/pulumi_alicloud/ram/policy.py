# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Policy(pulumi.CustomResource):
    """
    Provides a RAM Policy resource. 
    
    ~> **NOTE:** When you want to destroy this resource forcefully(means remove all the relationships associated with it automatically and then destroy it) without set `force`  with `true` at beginning, you need add `force = true` to configuration file and run `terraform plan`, then you can delete resource forcefully.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, document=None, force=None, name=None, statements=None, version=None):
        """Create a Policy resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        Description of the RAM policy. This name can have a string of 1 to 1024 characters.
        """
        __props__['description'] = description

        if document and not isinstance(document, basestring):
            raise TypeError('Expected property document to be a basestring')
        __self__.document = document
        """
        Document of the RAM policy. It is required when the `statement` is not specified.
        """
        __props__['document'] = document

        if force and not isinstance(force, bool):
            raise TypeError('Expected property force to be a bool')
        __self__.force = force
        """
        This parameter is used for resource destroy. Default value is `false`.
        """
        __props__['force'] = force

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Name of the RAM policy. This name can have a string of 1 to 128 characters, must contain only alphanumeric characters or hyphen "-", and must not begin with a hyphen.
        """
        __props__['name'] = name

        if statements and not isinstance(statements, list):
            raise TypeError('Expected property statements to be a list')
        __self__.statements = statements
        """
        Statements of the RAM policy document. It is required when the `document` is not specified.
        """
        __props__['statements'] = statements

        if version and not isinstance(version, basestring):
            raise TypeError('Expected property version to be a basestring')
        __self__.version = version
        """
        Version of the RAM policy document. Valid value is `1`. Default value is `1`.
        """
        __props__['version'] = version

        __self__.attachment_count = pulumi.runtime.UNKNOWN
        """
        The policy attachment count.
        """
        __self__.type = pulumi.runtime.UNKNOWN
        """
        The policy type.
        """

        super(Policy, __self__).__init__(
            'alicloud:ram/policy:Policy',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'attachmentCount' in outs:
            self.attachment_count = outs['attachmentCount']
        if 'description' in outs:
            self.description = outs['description']
        if 'document' in outs:
            self.document = outs['document']
        if 'force' in outs:
            self.force = outs['force']
        if 'name' in outs:
            self.name = outs['name']
        if 'statements' in outs:
            self.statements = outs['statements']
        if 'type' in outs:
            self.type = outs['type']
        if 'version' in outs:
            self.version = outs['version']
