# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class LifecycleHook(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, default_result=None, heartbeat_timeout=None, lifecycle_transition=None, name=None, notification_arn=None, notification_metadata=None, scaling_group_id=None):
        """Create a LifecycleHook resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if default_result and not isinstance(default_result, basestring):
            raise TypeError('Expected property default_result to be a basestring')
        __self__.default_result = default_result
        __props__['defaultResult'] = default_result

        if heartbeat_timeout and not isinstance(heartbeat_timeout, int):
            raise TypeError('Expected property heartbeat_timeout to be a int')
        __self__.heartbeat_timeout = heartbeat_timeout
        __props__['heartbeatTimeout'] = heartbeat_timeout

        if not lifecycle_transition:
            raise TypeError('Missing required property lifecycle_transition')
        elif not isinstance(lifecycle_transition, basestring):
            raise TypeError('Expected property lifecycle_transition to be a basestring')
        __self__.lifecycle_transition = lifecycle_transition
        __props__['lifecycleTransition'] = lifecycle_transition

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if notification_arn and not isinstance(notification_arn, basestring):
            raise TypeError('Expected property notification_arn to be a basestring')
        __self__.notification_arn = notification_arn
        __props__['notificationArn'] = notification_arn

        if notification_metadata and not isinstance(notification_metadata, basestring):
            raise TypeError('Expected property notification_metadata to be a basestring')
        __self__.notification_metadata = notification_metadata
        __props__['notificationMetadata'] = notification_metadata

        if not scaling_group_id:
            raise TypeError('Missing required property scaling_group_id')
        elif not isinstance(scaling_group_id, basestring):
            raise TypeError('Expected property scaling_group_id to be a basestring')
        __self__.scaling_group_id = scaling_group_id
        __props__['scalingGroupId'] = scaling_group_id

        super(LifecycleHook, __self__).__init__(
            'alicloud:ess/lifecycleHook:LifecycleHook',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'defaultResult' in outs:
            self.default_result = outs['defaultResult']
        if 'heartbeatTimeout' in outs:
            self.heartbeat_timeout = outs['heartbeatTimeout']
        if 'lifecycleTransition' in outs:
            self.lifecycle_transition = outs['lifecycleTransition']
        if 'name' in outs:
            self.name = outs['name']
        if 'notificationArn' in outs:
            self.notification_arn = outs['notificationArn']
        if 'notificationMetadata' in outs:
            self.notification_metadata = outs['notificationMetadata']
        if 'scalingGroupId' in outs:
            self.scaling_group_id = outs['scalingGroupId']
