# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Schedule(pulumi.CustomResource):
    """
    Provides a ESS schedule resource.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, launch_expiration_time=None, launch_time=None, recurrence_end_time=None, recurrence_type=None, recurrence_value=None, scheduled_action=None, scheduled_task_name=None, task_enabled=None):
        """Create a Schedule resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        Description of the scheduled task, which is 2-200 characters (English or Chinese) long.
        """
        __props__['description'] = description

        if launch_expiration_time and not isinstance(launch_expiration_time, int):
            raise TypeError('Expected property launch_expiration_time to be a int')
        __self__.launch_expiration_time = launch_expiration_time
        """
        Time period within which the failed scheduled task is retried. The default value is 600s. Value range: [0, 21600]
        """
        __props__['launchExpirationTime'] = launch_expiration_time

        if not launch_time:
            raise TypeError('Missing required property launch_time')
        elif not isinstance(launch_time, basestring):
            raise TypeError('Expected property launch_time to be a basestring')
        __self__.launch_time = launch_time
        """
        Operations performed when the scheduled task is triggered. Fill in the unique identifier of the scaling rule.
        """
        __props__['launchTime'] = launch_time

        if recurrence_end_time and not isinstance(recurrence_end_time, basestring):
            raise TypeError('Expected property recurrence_end_time to be a basestring')
        __self__.recurrence_end_time = recurrence_end_time
        """
        End time of the scheduled task to be repeated. The date format follows the ISO8601 standard and uses UTC time. It is in the format of YYYY-MM-DDThh:mmZ. A time point 90 days after creation or modification cannot be entered. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified.                                  
        """
        __props__['recurrenceEndTime'] = recurrence_end_time

        if recurrence_type and not isinstance(recurrence_type, basestring):
            raise TypeError('Expected property recurrence_type to be a basestring')
        __self__.recurrence_type = recurrence_type
        """
        Type of the scheduled task to be repeated. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified. Optional values:
        - Daily: Recurrence interval by day for a scheduled task.
        - Weekly: Recurrence interval by week for a scheduled task.
        - Monthly: Recurrence interval by month for a scheduled task.
        """
        __props__['recurrenceType'] = recurrence_type

        if recurrence_value and not isinstance(recurrence_value, basestring):
            raise TypeError('Expected property recurrence_value to be a basestring')
        __self__.recurrence_value = recurrence_value
        """
        Value of the scheduled task to be repeated. RecurrenceType, RecurrenceValue and RecurrenceEndTime must be specified.
        - Daily: Only one value in the range [1,31] can be filled.
        - Weekly: Multiple values can be filled. The values of Sunday to Saturday are 0 to 6 in sequence. Multiple values shall be separated by a comma “,”.
        - Monthly: In the format of A-B. The value range of A and B is 1 to 31, and the B value must be greater than the A value.
        """
        __props__['recurrenceValue'] = recurrence_value

        if not scheduled_action:
            raise TypeError('Missing required property scheduled_action')
        elif not isinstance(scheduled_action, basestring):
            raise TypeError('Expected property scheduled_action to be a basestring')
        __self__.scheduled_action = scheduled_action
        """
        Operations performed when the scheduled task is triggered. Fill in the unique identifier of the scaling rule.
        """
        __props__['scheduledAction'] = scheduled_action

        if scheduled_task_name and not isinstance(scheduled_task_name, basestring):
            raise TypeError('Expected property scheduled_task_name to be a basestring')
        __self__.scheduled_task_name = scheduled_task_name
        """
        Display name of the scheduled task, which must be 2-40 characters (English or Chinese) long.
        """
        __props__['scheduledTaskName'] = scheduled_task_name

        if task_enabled and not isinstance(task_enabled, bool):
            raise TypeError('Expected property task_enabled to be a bool')
        __self__.task_enabled = task_enabled
        """
        Whether to enable the scheduled task. The default value is true.
        """
        __props__['taskEnabled'] = task_enabled

        super(Schedule, __self__).__init__(
            'alicloud:ess/schedule:Schedule',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'description' in outs:
            self.description = outs['description']
        if 'launchExpirationTime' in outs:
            self.launch_expiration_time = outs['launchExpirationTime']
        if 'launchTime' in outs:
            self.launch_time = outs['launchTime']
        if 'recurrenceEndTime' in outs:
            self.recurrence_end_time = outs['recurrenceEndTime']
        if 'recurrenceType' in outs:
            self.recurrence_type = outs['recurrenceType']
        if 'recurrenceValue' in outs:
            self.recurrence_value = outs['recurrenceValue']
        if 'scheduledAction' in outs:
            self.scheduled_action = outs['scheduledAction']
        if 'scheduledTaskName' in outs:
            self.scheduled_task_name = outs['scheduledTaskName']
        if 'taskEnabled' in outs:
            self.task_enabled = outs['taskEnabled']
