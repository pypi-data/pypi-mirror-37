# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Alarm(pulumi.CustomResource):
    """
    Provides a ESS alarm task resource.
    """
    def __init__(__self__, __name__, __opts__=None, alarm_actions=None, cloud_monitor_group_id=None, comparison_operator=None, description=None, dimensions=None, evaluation_count=None, metric_name=None, metric_type=None, name=None, period=None, scaling_group_id=None, statistics=None, threshold=None):
        """Create a Alarm resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not alarm_actions:
            raise TypeError('Missing required property alarm_actions')
        elif not isinstance(alarm_actions, list):
            raise TypeError('Expected property alarm_actions to be a list')
        __self__.alarm_actions = alarm_actions
        """
        The list of actions to execute when this alarm transition into an ALARM state. Each action is specified as ess scaling rule ari.
        """
        __props__['alarmActions'] = alarm_actions

        if cloud_monitor_group_id and not isinstance(cloud_monitor_group_id, int):
            raise TypeError('Expected property cloud_monitor_group_id to be a int')
        __self__.cloud_monitor_group_id = cloud_monitor_group_id
        """
        Defines the application group id defined by CMS which is assigned when you upload custom metric to CMS, only available for custom metirc.
        """
        __props__['cloudMonitorGroupId'] = cloud_monitor_group_id

        if comparison_operator and not isinstance(comparison_operator, basestring):
            raise TypeError('Expected property comparison_operator to be a basestring')
        __self__.comparison_operator = comparison_operator
        """
        The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Supported value: >=, <=, >, <. Defaults to >=.
        """
        __props__['comparisonOperator'] = comparison_operator

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        The description for the alarm.
        """
        __props__['description'] = description

        if dimensions and not isinstance(dimensions, dict):
            raise TypeError('Expected property dimensions to be a dict')
        __self__.dimensions = dimensions
        """
        The dimension map for the alarm's associated metric (documented below). For all metrics, you can not set the dimension key as "scaling_group" or "userId", which is set by default, the second dimension for metric, such as "device" for "PackagesNetIn", need to be set by users.
        """
        __props__['dimensions'] = dimensions

        if evaluation_count and not isinstance(evaluation_count, int):
            raise TypeError('Expected property evaluation_count to be a int')
        __self__.evaluation_count = evaluation_count
        """
        The number of times that needs to satisfies comparison condition before transition into ALARM state. Defaults to 3.
        """
        __props__['evaluationCount'] = evaluation_count

        if not metric_name:
            raise TypeError('Missing required property metric_name')
        elif not isinstance(metric_name, basestring):
            raise TypeError('Expected property metric_name to be a basestring')
        __self__.metric_name = metric_name
        """
        The name for the alarm's associated metric.
        """
        __props__['metricName'] = metric_name

        if metric_type and not isinstance(metric_type, basestring):
            raise TypeError('Expected property metric_type to be a basestring')
        __self__.metric_type = metric_type
        """
        The type for the alarm's associated metric. Supported value: system, custom. "system" means the metric data is collected by Aliyun Cloud Monitor Service(CMS), "custom" means the metric data is upload to CMS by users. Defaults to system. 
        """
        __props__['metricType'] = metric_type

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name for ess alarm.
        """
        __props__['name'] = name

        if period and not isinstance(period, int):
            raise TypeError('Expected property period to be a int')
        __self__.period = period
        """
        The period in seconds over which the specified statistic is applied. Supported value: 60, 120, 300, 900. Defaults to 300.
        """
        __props__['period'] = period

        if not scaling_group_id:
            raise TypeError('Missing required property scaling_group_id')
        elif not isinstance(scaling_group_id, basestring):
            raise TypeError('Expected property scaling_group_id to be a basestring')
        __self__.scaling_group_id = scaling_group_id
        """
        The scaling group associated with this alarm.
        """
        __props__['scalingGroupId'] = scaling_group_id

        if statistics and not isinstance(statistics, basestring):
            raise TypeError('Expected property statistics to be a basestring')
        __self__.statistics = statistics
        """
        The statistic to apply to the alarm's associated metric. Supported value: Average, Minimum, Maximum. Defaults to Average.
        """
        __props__['statistics'] = statistics

        if not threshold:
            raise TypeError('Missing required property threshold')
        elif not isinstance(threshold, basestring):
            raise TypeError('Expected property threshold to be a basestring')
        __self__.threshold = threshold
        """
        The value against which the specified statistics is compared.
        """
        __props__['threshold'] = threshold

        __self__.state = pulumi.runtime.UNKNOWN
        """
        The state of specified alarm.  
        """

        super(Alarm, __self__).__init__(
            'alicloud:ess/alarm:Alarm',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'alarmActions' in outs:
            self.alarm_actions = outs['alarmActions']
        if 'cloudMonitorGroupId' in outs:
            self.cloud_monitor_group_id = outs['cloudMonitorGroupId']
        if 'comparisonOperator' in outs:
            self.comparison_operator = outs['comparisonOperator']
        if 'description' in outs:
            self.description = outs['description']
        if 'dimensions' in outs:
            self.dimensions = outs['dimensions']
        if 'evaluationCount' in outs:
            self.evaluation_count = outs['evaluationCount']
        if 'metricName' in outs:
            self.metric_name = outs['metricName']
        if 'metricType' in outs:
            self.metric_type = outs['metricType']
        if 'name' in outs:
            self.name = outs['name']
        if 'period' in outs:
            self.period = outs['period']
        if 'scalingGroupId' in outs:
            self.scaling_group_id = outs['scalingGroupId']
        if 'state' in outs:
            self.state = outs['state']
        if 'statistics' in outs:
            self.statistics = outs['statistics']
        if 'threshold' in outs:
            self.threshold = outs['threshold']
