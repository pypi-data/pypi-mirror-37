# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class ScalingConfiguration(pulumi.CustomResource):
    """
    Provides a ESS scaling configuration resource.
    
    ~> **NOTE:** Several instance types have outdated in some regions and availability zones, such as `ecs.t1.*`, `ecs.s2.*`, `ecs.n1.*` and so on. If you want to keep them, you should set `is_outdated` to true. For more about the upgraded instance type, refer to `alicloud_instance_types` datasource.
    """
    def __init__(__self__, __name__, __opts__=None, active=None, data_disks=None, enable=None, force_delete=None, image_id=None, instance_ids=None, instance_name=None, instance_type=None, internet_charge_type=None, internet_max_bandwidth_in=None, internet_max_bandwidth_out=None, io_optimized=None, is_outdated=None, key_name=None, role_name=None, scaling_configuration_name=None, scaling_group_id=None, security_group_id=None, substitute=None, system_disk_category=None, tags=None, user_data=None):
        """Create a ScalingConfiguration resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if active and not isinstance(active, bool):
            raise TypeError('Expected property active to be a bool')
        __self__.active = active
        """
        Whether active current scaling configuration in the specified scaling group. Default to `false`.
        """
        __props__['active'] = active

        if data_disks and not isinstance(data_disks, list):
            raise TypeError('Expected property data_disks to be a list')
        __self__.data_disks = data_disks
        """
        DataDisk mappings to attach to ecs instance. See Block datadisk below for details.
        """
        __props__['dataDisks'] = data_disks

        if enable and not isinstance(enable, bool):
            raise TypeError('Expected property enable to be a bool')
        __self__.enable = enable
        """
        Whether enable the specified scaling group(make it active) to which the current scaling configuration belongs.
        """
        __props__['enable'] = enable

        if force_delete and not isinstance(force_delete, bool):
            raise TypeError('Expected property force_delete to be a bool')
        __self__.force_delete = force_delete
        """
        The last scaling configuration will be deleted forcibly with deleting its scaling group. Default to false.
        """
        __props__['forceDelete'] = force_delete

        if not image_id:
            raise TypeError('Missing required property image_id')
        elif not isinstance(image_id, basestring):
            raise TypeError('Expected property image_id to be a basestring')
        __self__.image_id = image_id
        """
        ID of an image file, indicating the image resource selected when an instance is enabled.
        """
        __props__['imageId'] = image_id

        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError('Expected property instance_ids to be a list')
        __self__.instance_ids = instance_ids
        """
        It has been deprecated from version 1.6.0. New resource `alicloud_ess_attachment` replaces it.
        """
        __props__['instanceIds'] = instance_ids

        if instance_name and not isinstance(instance_name, basestring):
            raise TypeError('Expected property instance_name to be a basestring')
        __self__.instance_name = instance_name
        """
        Name of an ECS instance. Default to "ESS-Instance". It is valid from version 1.7.1.
        """
        __props__['instanceName'] = instance_name

        if not instance_type:
            raise TypeError('Missing required property instance_type')
        elif not isinstance(instance_type, basestring):
            raise TypeError('Expected property instance_type to be a basestring')
        __self__.instance_type = instance_type
        """
        Resource type of an ECS instance.
        """
        __props__['instanceType'] = instance_type

        if internet_charge_type and not isinstance(internet_charge_type, basestring):
            raise TypeError('Expected property internet_charge_type to be a basestring')
        __self__.internet_charge_type = internet_charge_type
        """
        Network billing type, Values: PayByBandwidth or PayByTraffic. Default to `PayByBandwidth`.
        """
        __props__['internetChargeType'] = internet_charge_type

        if internet_max_bandwidth_in and not isinstance(internet_max_bandwidth_in, int):
            raise TypeError('Expected property internet_max_bandwidth_in to be a int')
        __self__.internet_max_bandwidth_in = internet_max_bandwidth_in
        """
        Maximum incoming bandwidth from the public network, measured in Mbps (Mega bit per second). The value range is [1,200].
        """
        __props__['internetMaxBandwidthIn'] = internet_max_bandwidth_in

        if internet_max_bandwidth_out and not isinstance(internet_max_bandwidth_out, int):
            raise TypeError('Expected property internet_max_bandwidth_out to be a int')
        __self__.internet_max_bandwidth_out = internet_max_bandwidth_out
        """
        Maximum outgoing bandwidth from the public network, measured in Mbps (Mega bit per second). The value range for PayByBandwidth is [0,100].
        """
        __props__['internetMaxBandwidthOut'] = internet_max_bandwidth_out

        if io_optimized and not isinstance(io_optimized, basestring):
            raise TypeError('Expected property io_optimized to be a basestring')
        __self__.io_optimized = io_optimized
        """
        It has been deprecated on instance resource. All the launched alicloud instances will be I/O optimized.
        """
        __props__['ioOptimized'] = io_optimized

        if is_outdated and not isinstance(is_outdated, bool):
            raise TypeError('Expected property is_outdated to be a bool')
        __self__.is_outdated = is_outdated
        """
        Whether to use outdated instance type. Default to false.
        """
        __props__['isOutdated'] = is_outdated

        if key_name and not isinstance(key_name, basestring):
            raise TypeError('Expected property key_name to be a basestring')
        __self__.key_name = key_name
        """
        The name of key pair that can login ECS instance successfully without password. If it is specified, the password would be invalid.
        """
        __props__['keyName'] = key_name

        if role_name and not isinstance(role_name, basestring):
            raise TypeError('Expected property role_name to be a basestring')
        __self__.role_name = role_name
        """
        Instance RAM role name. The name is provided and maintained by RAM. You can use `alicloud_ram_role` to create a new one.
        """
        __props__['roleName'] = role_name

        if scaling_configuration_name and not isinstance(scaling_configuration_name, basestring):
            raise TypeError('Expected property scaling_configuration_name to be a basestring')
        __self__.scaling_configuration_name = scaling_configuration_name
        """
        Name shown for the scheduled task. If this parameter value is not specified, the default value is ScalingConfigurationId.
        """
        __props__['scalingConfigurationName'] = scaling_configuration_name

        if not scaling_group_id:
            raise TypeError('Missing required property scaling_group_id')
        elif not isinstance(scaling_group_id, basestring):
            raise TypeError('Expected property scaling_group_id to be a basestring')
        __self__.scaling_group_id = scaling_group_id
        """
        ID of the scaling group of a scaling configuration.
        """
        __props__['scalingGroupId'] = scaling_group_id

        if not security_group_id:
            raise TypeError('Missing required property security_group_id')
        elif not isinstance(security_group_id, basestring):
            raise TypeError('Expected property security_group_id to be a basestring')
        __self__.security_group_id = security_group_id
        """
        ID of the security group to which a newly created instance belongs.
        """
        __props__['securityGroupId'] = security_group_id

        if substitute and not isinstance(substitute, basestring):
            raise TypeError('Expected property substitute to be a basestring')
        __self__.substitute = substitute
        """
        The another scaling configuration which will be active automatically and replace current configuration when setting `active` to 'false'. It is invalid when `active` is 'true'
        """
        __props__['substitute'] = substitute

        if system_disk_category and not isinstance(system_disk_category, basestring):
            raise TypeError('Expected property system_disk_category to be a basestring')
        __self__.system_disk_category = system_disk_category
        """
        Category of the system disk. The parameter value options are `cloud_efficiency`, `cloud_ssd` and `cloud`. `cloud` only is used to some no I/O optimized instance. Default to `cloud_efficiency`.
        """
        __props__['systemDiskCategory'] = system_disk_category

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource. It will be applied for ECS instances finally.
        """
        __props__['tags'] = tags

        if user_data and not isinstance(user_data, basestring):
            raise TypeError('Expected property user_data to be a basestring')
        __self__.user_data = user_data
        """
        User-defined data to customize the startup behaviors of the ECS instance and to pass data into the ECS instance.
        """
        __props__['userData'] = user_data

        super(ScalingConfiguration, __self__).__init__(
            'alicloud:ess/scalingConfiguration:ScalingConfiguration',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'active' in outs:
            self.active = outs['active']
        if 'dataDisks' in outs:
            self.data_disks = outs['dataDisks']
        if 'enable' in outs:
            self.enable = outs['enable']
        if 'forceDelete' in outs:
            self.force_delete = outs['forceDelete']
        if 'imageId' in outs:
            self.image_id = outs['imageId']
        if 'instanceIds' in outs:
            self.instance_ids = outs['instanceIds']
        if 'instanceName' in outs:
            self.instance_name = outs['instanceName']
        if 'instanceType' in outs:
            self.instance_type = outs['instanceType']
        if 'internetChargeType' in outs:
            self.internet_charge_type = outs['internetChargeType']
        if 'internetMaxBandwidthIn' in outs:
            self.internet_max_bandwidth_in = outs['internetMaxBandwidthIn']
        if 'internetMaxBandwidthOut' in outs:
            self.internet_max_bandwidth_out = outs['internetMaxBandwidthOut']
        if 'ioOptimized' in outs:
            self.io_optimized = outs['ioOptimized']
        if 'isOutdated' in outs:
            self.is_outdated = outs['isOutdated']
        if 'keyName' in outs:
            self.key_name = outs['keyName']
        if 'roleName' in outs:
            self.role_name = outs['roleName']
        if 'scalingConfigurationName' in outs:
            self.scaling_configuration_name = outs['scalingConfigurationName']
        if 'scalingGroupId' in outs:
            self.scaling_group_id = outs['scalingGroupId']
        if 'securityGroupId' in outs:
            self.security_group_id = outs['securityGroupId']
        if 'substitute' in outs:
            self.substitute = outs['substitute']
        if 'systemDiskCategory' in outs:
            self.system_disk_category = outs['systemDiskCategory']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'userData' in outs:
            self.user_data = outs['userData']
