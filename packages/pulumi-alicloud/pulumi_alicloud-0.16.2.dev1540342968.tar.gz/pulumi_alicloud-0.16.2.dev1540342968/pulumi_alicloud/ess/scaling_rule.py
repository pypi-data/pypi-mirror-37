# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class ScalingRule(pulumi.CustomResource):
    """
    Provides a ESS scaling rule resource.
    """
    def __init__(__self__, __name__, __opts__=None, adjustment_type=None, adjustment_value=None, cooldown=None, scaling_group_id=None, scaling_rule_name=None):
        """Create a ScalingRule resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not adjustment_type:
            raise TypeError('Missing required property adjustment_type')
        elif not isinstance(adjustment_type, basestring):
            raise TypeError('Expected property adjustment_type to be a basestring')
        __self__.adjustment_type = adjustment_type
        """
        Adjustment mode of a scaling rule. Optional values:
        - QuantityChangeInCapacity: It is used to increase or decrease a specified number of ECS instances.
        - PercentChangeInCapacity: It is used to increase or decrease a specified proportion of ECS instances.
        - TotalCapacity: It is used to adjust the quantity of ECS instances in the current scaling group to a specified value.
        """
        __props__['adjustmentType'] = adjustment_type

        if not adjustment_value:
            raise TypeError('Missing required property adjustment_value')
        elif not isinstance(adjustment_value, int):
            raise TypeError('Expected property adjustment_value to be a int')
        __self__.adjustment_value = adjustment_value
        """
        Adjusted value of a scaling rule. Value range:
        - QuantityChangeInCapacity：(0, 100] U (-100, 0]
        - PercentChangeInCapacity：[0, 10000] U [-10000, 0]
        - TotalCapacity：[0, 100]
        """
        __props__['adjustmentValue'] = adjustment_value

        if cooldown and not isinstance(cooldown, int):
            raise TypeError('Expected property cooldown to be a int')
        __self__.cooldown = cooldown
        """
        Cool-down time of a scaling rule. Value range: [0, 86,400], in seconds. The default value is empty.
        """
        __props__['cooldown'] = cooldown

        if not scaling_group_id:
            raise TypeError('Missing required property scaling_group_id')
        elif not isinstance(scaling_group_id, basestring):
            raise TypeError('Expected property scaling_group_id to be a basestring')
        __self__.scaling_group_id = scaling_group_id
        """
        ID of the scaling group of a scaling rule.
        """
        __props__['scalingGroupId'] = scaling_group_id

        if scaling_rule_name and not isinstance(scaling_rule_name, basestring):
            raise TypeError('Expected property scaling_rule_name to be a basestring')
        __self__.scaling_rule_name = scaling_rule_name
        """
        Name shown for the scaling rule, which is a string containing 2 to 40 English or Chinese characters.
        """
        __props__['scalingRuleName'] = scaling_rule_name

        __self__.ari = pulumi.runtime.UNKNOWN
        """
        Unique identifier of a scaling rule.
        """

        super(ScalingRule, __self__).__init__(
            'alicloud:ess/scalingRule:ScalingRule',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'adjustmentType' in outs:
            self.adjustment_type = outs['adjustmentType']
        if 'adjustmentValue' in outs:
            self.adjustment_value = outs['adjustmentValue']
        if 'ari' in outs:
            self.ari = outs['ari']
        if 'cooldown' in outs:
            self.cooldown = outs['cooldown']
        if 'scalingGroupId' in outs:
            self.scaling_group_id = outs['scalingGroupId']
        if 'scalingRuleName' in outs:
            self.scaling_rule_name = outs['scalingRuleName']
