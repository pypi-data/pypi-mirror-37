# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class RouterInterfaceConnection(pulumi.CustomResource):
    """
    Provides a VPC router interface connection resource to connect two router interfaces which are in two different VPCs.
    After that, all of the two router interfaces will be active.
    
    -> **NOTE:** At present, Router interface does not support changing opposite router interface, the connection delete action is only deactivating it to inactive, not modifying the connection to empty.
    
    -> **NOTE:** If you want to changing opposite router interface, you can delete router interface and re-build them.
    
    -> **NOTE:** A integrated router interface connection tunnel requires both InitiatingSide and AcceptingSide configuring opposite router interface.
    
    -> **NOTE:** Please remember to add a `depends_on` clause in the router interface connection from the InitiatingSide to the AcceptingSide, because the connection from the AcceptingSide to the InitiatingSide must be done first.
    """
    def __init__(__self__, __name__, __opts__=None, interface_id=None, opposite_interface_id=None, opposite_interface_owner_id=None, opposite_router_id=None, opposite_router_type=None):
        """Create a RouterInterfaceConnection resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not interface_id:
            raise TypeError('Missing required property interface_id')
        elif not isinstance(interface_id, basestring):
            raise TypeError('Expected property interface_id to be a basestring')
        __self__.interface_id = interface_id
        """
        One side router interface ID.
        """
        __props__['interfaceId'] = interface_id

        if not opposite_interface_id:
            raise TypeError('Missing required property opposite_interface_id')
        elif not isinstance(opposite_interface_id, basestring):
            raise TypeError('Expected property opposite_interface_id to be a basestring')
        __self__.opposite_interface_id = opposite_interface_id
        """
        Another side router interface ID. It must belong the specified "opposite_interface_owner_id" account.
        """
        __props__['oppositeInterfaceId'] = opposite_interface_id

        if opposite_interface_owner_id and not isinstance(opposite_interface_owner_id, basestring):
            raise TypeError('Expected property opposite_interface_owner_id to be a basestring')
        __self__.opposite_interface_owner_id = opposite_interface_owner_id
        """
        Another side router interface account ID. Log on to the Alibaba Cloud console, select User Info > Account Management to check the account ID. Default to [Provider account_id](https://www.terraform.io/docs/providers/alicloud/index.html#account_id).
        """
        __props__['oppositeInterfaceOwnerId'] = opposite_interface_owner_id

        if opposite_router_id and not isinstance(opposite_router_id, basestring):
            raise TypeError('Expected property opposite_router_id to be a basestring')
        __self__.opposite_router_id = opposite_router_id
        """
        Another side router ID. It must belong the specified "opposite_interface_owner_id" account. It is valid when field "opposite_interface_owner_id" is specified.
        """
        __props__['oppositeRouterId'] = opposite_router_id

        if opposite_router_type and not isinstance(opposite_router_type, basestring):
            raise TypeError('Expected property opposite_router_type to be a basestring')
        __self__.opposite_router_type = opposite_router_type
        """
        Another side router Type. Optional value: VRouter, VBR. It is valid when field "opposite_interface_owner_id" is specified.
        """
        __props__['oppositeRouterType'] = opposite_router_type

        super(RouterInterfaceConnection, __self__).__init__(
            'alicloud:vpc/routerInterfaceConnection:RouterInterfaceConnection',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'interfaceId' in outs:
            self.interface_id = outs['interfaceId']
        if 'oppositeInterfaceId' in outs:
            self.opposite_interface_id = outs['oppositeInterfaceId']
        if 'oppositeInterfaceOwnerId' in outs:
            self.opposite_interface_owner_id = outs['oppositeInterfaceOwnerId']
        if 'oppositeRouterId' in outs:
            self.opposite_router_id = outs['oppositeRouterId']
        if 'oppositeRouterType' in outs:
            self.opposite_router_type = outs['oppositeRouterType']
