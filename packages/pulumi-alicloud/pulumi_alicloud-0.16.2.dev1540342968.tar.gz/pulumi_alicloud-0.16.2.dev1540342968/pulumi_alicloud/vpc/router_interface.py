# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class RouterInterface(pulumi.CustomResource):
    """
    Provides a VPC router interface resource aim to build a connection between two VPCs.
    
    -> **NOTE:** Only one pair of connected router interfaces can exist between two routers. Up to 5 router interfaces can be created for each router and each account.
    
    -> **NOTE:** The router interface is not connected when it is created. It can be connected by means of resource [alicloud_router_interface_connection](https://www.terraform.io/docs/providers/alicloud/r/router_interface_connection.html).
    
    """
    def __init__(__self__, __name__, __opts__=None, description=None, health_check_source_ip=None, health_check_target_ip=None, instance_charge_type=None, name=None, opposite_access_point_id=None, opposite_region=None, period=None, role=None, router_id=None, router_type=None, specification=None):
        """Create a RouterInterface resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        Description of the router interface. It can be 2-256 characters long or left blank. It cannot start with http:// and https://.
        """
        __props__['description'] = description

        if health_check_source_ip and not isinstance(health_check_source_ip, basestring):
            raise TypeError('Expected property health_check_source_ip to be a basestring')
        __self__.health_check_source_ip = health_check_source_ip
        """
        Used as the Packet Source IP of health check for disaster recovery or ECMP. It is only valid when `router_type` is `VBR`. The IP must be an unused IP in the local VPC. It and `health_check_target_ip` must be specified at the same time.
        """
        __props__['healthCheckSourceIp'] = health_check_source_ip

        if health_check_target_ip and not isinstance(health_check_target_ip, basestring):
            raise TypeError('Expected property health_check_target_ip to be a basestring')
        __self__.health_check_target_ip = health_check_target_ip
        """
        Used as the Packet Target IP of health check for disaster recovery or ECMP. It is only valid when `router_type` is `VBR`. The IP must be an unused IP in the local VPC. It and `health_check_source_ip` must be specified at the same time.
        """
        __props__['healthCheckTargetIp'] = health_check_target_ip

        if instance_charge_type and not isinstance(instance_charge_type, basestring):
            raise TypeError('Expected property instance_charge_type to be a basestring')
        __self__.instance_charge_type = instance_charge_type
        """
        The billing method of the router interface. Valid values are "PrePaid" and "PostPaid". Default to "PostPaid".
        """
        __props__['instanceChargeType'] = instance_charge_type

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Name of the router interface. Length must be 2-80 characters long. Only Chinese characters, English letters, numbers, period (.), underline (_), or dash (-) are permitted.
        If it is not specified, the default value is interface ID. The name cannot start with http:// and https://.
        """
        __props__['name'] = name

        if opposite_access_point_id and not isinstance(opposite_access_point_id, basestring):
            raise TypeError('Expected property opposite_access_point_id to be a basestring')
        __self__.opposite_access_point_id = opposite_access_point_id
        """
        It has been deprecated from version 1.11.0.
        """
        __props__['oppositeAccessPointId'] = opposite_access_point_id

        if not opposite_region:
            raise TypeError('Missing required property opposite_region')
        elif not isinstance(opposite_region, basestring):
            raise TypeError('Expected property opposite_region to be a basestring')
        __self__.opposite_region = opposite_region
        """
        The Region of peer side.
        """
        __props__['oppositeRegion'] = opposite_region

        if period and not isinstance(period, int):
            raise TypeError('Expected property period to be a int')
        __self__.period = period
        """
        The duration that you will buy the resource, in month. It is valid when `instance_charge_type` is `PrePaid`. Default to 1. Valid values: [1-9, 12, 24, 36]. At present, the provider does not support modify "period" and you can do that via web console.
        """
        __props__['period'] = period

        if not role:
            raise TypeError('Missing required property role')
        elif not isinstance(role, basestring):
            raise TypeError('Expected property role to be a basestring')
        __self__.role = role
        """
        The role the router interface plays. Optional value: `InitiatingSide`, `AcceptingSide`.
        """
        __props__['role'] = role

        if not router_id:
            raise TypeError('Missing required property router_id')
        elif not isinstance(router_id, basestring):
            raise TypeError('Expected property router_id to be a basestring')
        __self__.router_id = router_id
        """
        The Router ID.
        """
        __props__['routerId'] = router_id

        if not router_type:
            raise TypeError('Missing required property router_type')
        elif not isinstance(router_type, basestring):
            raise TypeError('Expected property router_type to be a basestring')
        __self__.router_type = router_type
        """
        Router Type. Optional value: VRouter, VBR. Accepting side router interface type only be VRouter.
        """
        __props__['routerType'] = router_type

        if specification and not isinstance(specification, basestring):
            raise TypeError('Expected property specification to be a basestring')
        __self__.specification = specification
        """
        Specification of router interfaces. It is valid when `role` is `InitiatingSide`. Accepting side's role is default to set as 'Negative'. For more about the specification, refer to [Router interface specification](https://www.alibabacloud.com/help/doc-detail/36037.htm).
        """
        __props__['specification'] = specification

        __self__.access_point_id = pulumi.runtime.UNKNOWN
        """
        It has been deprecated from version 1.11.0.
        """
        __self__.opposite_interface_id = pulumi.runtime.UNKNOWN
        """
        It has been deprecated from version 1.11.0. Use resource alicloud_router_interface_connection's 'opposite_router_id' instead.
        """
        __self__.opposite_interface_owner_id = pulumi.runtime.UNKNOWN
        """
        It has been deprecated from version 1.11.0. Use resource alicloud_router_interface_connection's 'opposite_interface_id' instead.
        """
        __self__.opposite_router_id = pulumi.runtime.UNKNOWN
        """
        It has been deprecated from version 1.11.0. Use resource alicloud_router_interface_connection's 'opposite_router_id' instead.
        """
        __self__.opposite_router_type = pulumi.runtime.UNKNOWN
        """
        It has been deprecated from version 1.11.0. resource alicloud_router_interface_connection's 'opposite_router_type' instead.
        """

        super(RouterInterface, __self__).__init__(
            'alicloud:vpc/routerInterface:RouterInterface',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'accessPointId' in outs:
            self.access_point_id = outs['accessPointId']
        if 'description' in outs:
            self.description = outs['description']
        if 'healthCheckSourceIp' in outs:
            self.health_check_source_ip = outs['healthCheckSourceIp']
        if 'healthCheckTargetIp' in outs:
            self.health_check_target_ip = outs['healthCheckTargetIp']
        if 'instanceChargeType' in outs:
            self.instance_charge_type = outs['instanceChargeType']
        if 'name' in outs:
            self.name = outs['name']
        if 'oppositeAccessPointId' in outs:
            self.opposite_access_point_id = outs['oppositeAccessPointId']
        if 'oppositeInterfaceId' in outs:
            self.opposite_interface_id = outs['oppositeInterfaceId']
        if 'oppositeInterfaceOwnerId' in outs:
            self.opposite_interface_owner_id = outs['oppositeInterfaceOwnerId']
        if 'oppositeRegion' in outs:
            self.opposite_region = outs['oppositeRegion']
        if 'oppositeRouterId' in outs:
            self.opposite_router_id = outs['oppositeRouterId']
        if 'oppositeRouterType' in outs:
            self.opposite_router_type = outs['oppositeRouterType']
        if 'period' in outs:
            self.period = outs['period']
        if 'role' in outs:
            self.role = outs['role']
        if 'routerId' in outs:
            self.router_id = outs['routerId']
        if 'routerType' in outs:
            self.router_type = outs['routerType']
        if 'specification' in outs:
            self.specification = outs['specification']
