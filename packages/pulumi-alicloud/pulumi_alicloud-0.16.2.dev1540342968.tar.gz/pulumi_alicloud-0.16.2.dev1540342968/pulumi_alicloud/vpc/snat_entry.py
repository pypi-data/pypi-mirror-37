# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class SnatEntry(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, snat_ip=None, snat_table_id=None, source_vswitch_id=None):
        """Create a SnatEntry resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not snat_ip:
            raise TypeError('Missing required property snat_ip')
        elif not isinstance(snat_ip, basestring):
            raise TypeError('Expected property snat_ip to be a basestring')
        __self__.snat_ip = snat_ip
        __props__['snatIp'] = snat_ip

        if not snat_table_id:
            raise TypeError('Missing required property snat_table_id')
        elif not isinstance(snat_table_id, basestring):
            raise TypeError('Expected property snat_table_id to be a basestring')
        __self__.snat_table_id = snat_table_id
        __props__['snatTableId'] = snat_table_id

        if not source_vswitch_id:
            raise TypeError('Missing required property source_vswitch_id')
        elif not isinstance(source_vswitch_id, basestring):
            raise TypeError('Expected property source_vswitch_id to be a basestring')
        __self__.source_vswitch_id = source_vswitch_id
        __props__['sourceVswitchId'] = source_vswitch_id

        super(SnatEntry, __self__).__init__(
            'alicloud:vpc/snatEntry:SnatEntry',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'snatIp' in outs:
            self.snat_ip = outs['snatIp']
        if 'snatTableId' in outs:
            self.snat_table_id = outs['snatTableId']
        if 'sourceVswitchId' in outs:
            self.source_vswitch_id = outs['sourceVswitchId']
