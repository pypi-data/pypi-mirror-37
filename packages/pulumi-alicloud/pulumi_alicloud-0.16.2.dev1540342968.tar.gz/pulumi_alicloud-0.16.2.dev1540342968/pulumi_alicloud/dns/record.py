# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Record(pulumi.CustomResource):
    """
    Provides a DNS Record resource.
    """
    def __init__(__self__, __name__, __opts__=None, host_record=None, name=None, priority=None, routing=None, ttl=None, type=None, value=None):
        """Create a Record resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not host_record:
            raise TypeError('Missing required property host_record')
        elif not isinstance(host_record, basestring):
            raise TypeError('Expected property host_record to be a basestring')
        __self__.host_record = host_record
        """
        Host record for the domain record. This host_record can have at most 253 characters, and each part split with "." can have at most 63 characters, and must contain only alphanumeric characters or hyphens, such as "-",".","*","@",  and must not begin or end with "-".
        """
        __props__['hostRecord'] = host_record

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Name of the domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
        """
        __props__['name'] = name

        if priority and not isinstance(priority, int):
            raise TypeError('Expected property priority to be a int')
        __self__.priority = priority
        """
        The priority of domain record. Valid values are `[1-10]`. When the `type` is `MX`, this parameter is required.
        """
        __props__['priority'] = priority

        if routing and not isinstance(routing, basestring):
            raise TypeError('Expected property routing to be a basestring')
        __self__.routing = routing
        """
        The parsing line of domain record. Valid values are `default`, `telecom`, `unicom`, `mobile`, `oversea` and `edu`. When the `type` is `FORWORD_URL`, this parameter must be `default`. Default value is `default`.
        """
        __props__['routing'] = routing

        if ttl and not isinstance(ttl, int):
            raise TypeError('Expected property ttl to be a int')
        __self__.ttl = ttl
        """
        The effective time of domain record. Its scope depends on the edition of the cloud resolution. Free is `[600, 86400]`, Basic is `[120, 86400]`, Standard is `[60, 86400]`, Ultimate is `[10, 86400]`, Exclusive is `[1, 86400]`. Default value is `600`.
        """
        __props__['ttl'] = ttl

        if not type:
            raise TypeError('Missing required property type')
        elif not isinstance(type, basestring):
            raise TypeError('Expected property type to be a basestring')
        __self__.type = type
        """
        The type of domain record. Valid values are `A`,`NS`,`MX`,`TXT`,`CNAME`,`SRV`,`AAAA`,`REDIRECT_URL` and `FORWORD_URL`.
        """
        __props__['type'] = type

        if not value:
            raise TypeError('Missing required property value')
        elif not isinstance(value, basestring):
            raise TypeError('Expected property value to be a basestring')
        __self__.value = value
        """
        The value of domain record.
        """
        __props__['value'] = value

        __self__.locked = pulumi.runtime.UNKNOWN
        __self__.status = pulumi.runtime.UNKNOWN
        """
        The record status. `Enable` or `Disable`.
        """

        super(Record, __self__).__init__(
            'alicloud:dns/record:Record',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'hostRecord' in outs:
            self.host_record = outs['hostRecord']
        if 'locked' in outs:
            self.locked = outs['locked']
        if 'name' in outs:
            self.name = outs['name']
        if 'priority' in outs:
            self.priority = outs['priority']
        if 'routing' in outs:
            self.routing = outs['routing']
        if 'status' in outs:
            self.status = outs['status']
        if 'ttl' in outs:
            self.ttl = outs['ttl']
        if 'type' in outs:
            self.type = outs['type']
        if 'value' in outs:
            self.value = outs['value']
