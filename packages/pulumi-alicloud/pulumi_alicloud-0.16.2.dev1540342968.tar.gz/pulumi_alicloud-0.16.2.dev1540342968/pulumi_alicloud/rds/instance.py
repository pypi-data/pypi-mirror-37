# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Instance(pulumi.CustomResource):
    """
    Provides an RDS instance resource. A DB instance is an isolated database
    environment in the cloud. A DB instance can contain multiple user-created
    databases.
    """
    def __init__(__self__, __name__, __opts__=None, allocate_public_connection=None, backup_retention_period=None, connections=None, db_instance_class=None, db_instance_net_type=None, db_instance_storage=None, db_mappings=None, engine=None, engine_version=None, instance_charge_type=None, instance_name=None, instance_network_type=None, instance_storage=None, instance_type=None, master_user_name=None, master_user_password=None, multi_az=None, period=None, preferred_backup_periods=None, preferred_backup_time=None, security_ips=None, vswitch_id=None, zone_id=None):
        """Create a Instance resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if allocate_public_connection and not isinstance(allocate_public_connection, bool):
            raise TypeError('Expected property allocate_public_connection to be a bool')
        __self__.allocate_public_connection = allocate_public_connection
        """
        It has been deprecated from version 1.5.0. If you want to allocate public connection string, please use new resource `alicloud_db_connection`.
        """
        __props__['allocatePublicConnection'] = allocate_public_connection

        if backup_retention_period and not isinstance(backup_retention_period, int):
            raise TypeError('Expected property backup_retention_period to be a int')
        __self__.backup_retention_period = backup_retention_period
        """
        It has been deprecated from version 1.5.0. New resource `alicloud_db_backup_policy` field 'retention_period' replaces it.
        """
        __props__['backupRetentionPeriod'] = backup_retention_period

        if connections and not isinstance(connections, list):
            raise TypeError('Expected property connections to be a list')
        __self__.connections = connections
        """
        (Deprecated from version 1.5.0).
        """
        __props__['connections'] = connections

        if db_instance_class and not isinstance(db_instance_class, basestring):
            raise TypeError('Expected property db_instance_class to be a basestring')
        __self__.db_instance_class = db_instance_class
        """
        It has been deprecated from version 1.5.0 and use 'instance_type' to replace.
        """
        __props__['dbInstanceClass'] = db_instance_class

        if db_instance_net_type and not isinstance(db_instance_net_type, basestring):
            raise TypeError('Expected property db_instance_net_type to be a basestring')
        __self__.db_instance_net_type = db_instance_net_type
        """
        It has been deprecated from version 1.5.0. If you want to set public connection, please use new resource `alicloud_db_connection`. Default to Intranet.
        """
        __props__['dbInstanceNetType'] = db_instance_net_type

        if db_instance_storage and not isinstance(db_instance_storage, int):
            raise TypeError('Expected property db_instance_storage to be a int')
        __self__.db_instance_storage = db_instance_storage
        """
        It has been deprecated from version 1.5.0 and use 'instance_storage' to replace.
        """
        __props__['dbInstanceStorage'] = db_instance_storage

        if db_mappings and not isinstance(db_mappings, list):
            raise TypeError('Expected property db_mappings to be a list')
        __self__.db_mappings = db_mappings
        """
        It has been deprecated from version 1.5.0. New resource `alicloud_db_database` replaces it.
        """
        __props__['dbMappings'] = db_mappings

        if not engine:
            raise TypeError('Missing required property engine')
        elif not isinstance(engine, basestring):
            raise TypeError('Expected property engine to be a basestring')
        __self__.engine = engine
        """
        Database type. Value options: MySQL, SQLServer, PostgreSQL, and PPAS.
        """
        __props__['engine'] = engine

        if not engine_version:
            raise TypeError('Missing required property engine_version')
        elif not isinstance(engine_version, basestring):
            raise TypeError('Expected property engine_version to be a basestring')
        __self__.engine_version = engine_version
        """
        Database version. Value options: 
        - 5.5/5.6/5.7 for MySQL
        - 2008r2/2012 for SQLServer
        - 9.4/10.0 for PostgreSQL
        - 9.3 for PPAS
        """
        __props__['engineVersion'] = engine_version

        if instance_charge_type and not isinstance(instance_charge_type, basestring):
            raise TypeError('Expected property instance_charge_type to be a basestring')
        __self__.instance_charge_type = instance_charge_type
        """
        Valid values are `Prepaid`, `Postpaid`, Default to `Postpaid`.
        """
        __props__['instanceChargeType'] = instance_charge_type

        if instance_name and not isinstance(instance_name, basestring):
            raise TypeError('Expected property instance_name to be a basestring')
        __self__.instance_name = instance_name
        """
        The name of DB instance. It a string of 2 to 256 characters.
        """
        __props__['instanceName'] = instance_name

        if instance_network_type and not isinstance(instance_network_type, basestring):
            raise TypeError('Expected property instance_network_type to be a basestring')
        __self__.instance_network_type = instance_network_type
        """
        It has been deprecated from version 1.5.0. If you want to create instances in VPC network, this parameter must be set.
        """
        __props__['instanceNetworkType'] = instance_network_type

        if not instance_storage:
            raise TypeError('Missing required property instance_storage')
        elif not isinstance(instance_storage, int):
            raise TypeError('Expected property instance_storage to be a int')
        __self__.instance_storage = instance_storage
        """
        User-defined DB instance storage space. Value range:
        - [5, 2000] for MySQL/PostgreSQL/PPAS HA dual node edition;
        - [20,1000] for MySQL 5.7 basic single node edition;
        - [10, 2000] for SQL Server 2008R2;
        - [20,2000] for SQL Server 2012 basic single node edition
        Increase progressively at a rate of 5 GB. For details, see [Instance type table](https://www.alibabacloud.com/help/doc-detail/26312.htm).
        """
        __props__['instanceStorage'] = instance_storage

        if not instance_type:
            raise TypeError('Missing required property instance_type')
        elif not isinstance(instance_type, basestring):
            raise TypeError('Expected property instance_type to be a basestring')
        __self__.instance_type = instance_type
        """
        DB Instance type. For details, see [Instance type table](https://www.alibabacloud.com/help/doc-detail/26312.htm).
        """
        __props__['instanceType'] = instance_type

        if master_user_name and not isinstance(master_user_name, basestring):
            raise TypeError('Expected property master_user_name to be a basestring')
        __self__.master_user_name = master_user_name
        """
        It has been deprecated from version 1.5.0. New resource `alicloud_db_account` field 'name' replaces it.
        """
        __props__['masterUserName'] = master_user_name

        if master_user_password and not isinstance(master_user_password, basestring):
            raise TypeError('Expected property master_user_password to be a basestring')
        __self__.master_user_password = master_user_password
        """
        It has been deprecated from version 1.5.0. New resource `alicloud_db_account` field 'password' replaces it.
        """
        __props__['masterUserPassword'] = master_user_password

        if multi_az and not isinstance(multi_az, bool):
            raise TypeError('Expected property multi_az to be a bool')
        __self__.multi_az = multi_az
        """
        It has been deprecated from version 1.8.1, and `zone_id` can support multiple zone.
        """
        __props__['multiAz'] = multi_az

        if period and not isinstance(period, int):
            raise TypeError('Expected property period to be a int')
        __self__.period = period
        """
        The duration that you will buy DB instance (in month). It is valid when instance_charge_type is `PrePaid`. Valid values: [1~9], 12, 24, 36. Default to 1.
        """
        __props__['period'] = period

        if preferred_backup_periods and not isinstance(preferred_backup_periods, list):
            raise TypeError('Expected property preferred_backup_periods to be a list')
        __self__.preferred_backup_periods = preferred_backup_periods
        """
        It has been deprecated from version 1.5.0. New resource `alicloud_db_backup_policy` field 'backup_period' replaces it.
        """
        __props__['preferredBackupPeriods'] = preferred_backup_periods

        if preferred_backup_time and not isinstance(preferred_backup_time, basestring):
            raise TypeError('Expected property preferred_backup_time to be a basestring')
        __self__.preferred_backup_time = preferred_backup_time
        """
        It has been deprecated from version 1.5.0. New resource `alicloud_db_backup_policy` field 'backup_time' replaces it.
        """
        __props__['preferredBackupTime'] = preferred_backup_time

        if security_ips and not isinstance(security_ips, list):
            raise TypeError('Expected property security_ips to be a list')
        __self__.security_ips = security_ips
        """
        List of IP addresses allowed to access all databases of an instance. The list contains up to 1,000 IP addresses, separated by commas. Supported formats include 0.0.0.0/0, 10.23.12.24 (IP), and 10.23.12.24/24 (Classless Inter-Domain Routing (CIDR) mode. /24 represents the length of the prefix in an IP address. The range of the prefix length is [1,32]).
        """
        __props__['securityIps'] = security_ips

        if vswitch_id and not isinstance(vswitch_id, basestring):
            raise TypeError('Expected property vswitch_id to be a basestring')
        __self__.vswitch_id = vswitch_id
        """
        The virtual switch ID to launch DB instances in one VPC.
        """
        __props__['vswitchId'] = vswitch_id

        if zone_id and not isinstance(zone_id, basestring):
            raise TypeError('Expected property zone_id to be a basestring')
        __self__.zone_id = zone_id
        """
        The Zone to launch the DB instance. From version 1.8.1, it supports multiple zone.
        If it is a multi-zone and `vswitch_id` is specified, the vswitch must in the one of them.
        The multiple zone ID can be retrieved by setting `multi` to "true" in the data source `alicloud_zones`.
        """
        __props__['zoneId'] = zone_id

        __self__.connection_string = pulumi.runtime.UNKNOWN
        """
        RDS database connection string.
        """
        __self__.port = pulumi.runtime.UNKNOWN
        """
        RDS database connection port.
        """

        super(Instance, __self__).__init__(
            'alicloud:rds/instance:Instance',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'allocatePublicConnection' in outs:
            self.allocate_public_connection = outs['allocatePublicConnection']
        if 'backupRetentionPeriod' in outs:
            self.backup_retention_period = outs['backupRetentionPeriod']
        if 'connectionString' in outs:
            self.connection_string = outs['connectionString']
        if 'connections' in outs:
            self.connections = outs['connections']
        if 'dbInstanceClass' in outs:
            self.db_instance_class = outs['dbInstanceClass']
        if 'dbInstanceNetType' in outs:
            self.db_instance_net_type = outs['dbInstanceNetType']
        if 'dbInstanceStorage' in outs:
            self.db_instance_storage = outs['dbInstanceStorage']
        if 'dbMappings' in outs:
            self.db_mappings = outs['dbMappings']
        if 'engine' in outs:
            self.engine = outs['engine']
        if 'engineVersion' in outs:
            self.engine_version = outs['engineVersion']
        if 'instanceChargeType' in outs:
            self.instance_charge_type = outs['instanceChargeType']
        if 'instanceName' in outs:
            self.instance_name = outs['instanceName']
        if 'instanceNetworkType' in outs:
            self.instance_network_type = outs['instanceNetworkType']
        if 'instanceStorage' in outs:
            self.instance_storage = outs['instanceStorage']
        if 'instanceType' in outs:
            self.instance_type = outs['instanceType']
        if 'masterUserName' in outs:
            self.master_user_name = outs['masterUserName']
        if 'masterUserPassword' in outs:
            self.master_user_password = outs['masterUserPassword']
        if 'multiAz' in outs:
            self.multi_az = outs['multiAz']
        if 'period' in outs:
            self.period = outs['period']
        if 'port' in outs:
            self.port = outs['port']
        if 'preferredBackupPeriods' in outs:
            self.preferred_backup_periods = outs['preferredBackupPeriods']
        if 'preferredBackupTime' in outs:
            self.preferred_backup_time = outs['preferredBackupTime']
        if 'securityIps' in outs:
            self.security_ips = outs['securityIps']
        if 'vswitchId' in outs:
            self.vswitch_id = outs['vswitchId']
        if 'zoneId' in outs:
            self.zone_id = outs['zoneId']
