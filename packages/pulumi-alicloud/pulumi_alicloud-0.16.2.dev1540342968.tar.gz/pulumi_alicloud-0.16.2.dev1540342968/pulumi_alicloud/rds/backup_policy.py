# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class BackupPolicy(pulumi.CustomResource):
    """
    Provides an RDS instance backup policy resource and used to configure instance backup policy.
    
    ~> **NOTE:** Each DB instance has a backup policy and it will be set default values when destroying the resource.
    """
    def __init__(__self__, __name__, __opts__=None, backup_periods=None, backup_time=None, instance_id=None, log_backup=None, log_retention_period=None, retention_period=None):
        """Create a BackupPolicy resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if backup_periods and not isinstance(backup_periods, list):
            raise TypeError('Expected property backup_periods to be a list')
        __self__.backup_periods = backup_periods
        """
        DB Instance backup period. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]. Default to ["Tuesday", "Thursday", "Saturday"].
        """
        __props__['backupPeriods'] = backup_periods

        if backup_time and not isinstance(backup_time, basestring):
            raise TypeError('Expected property backup_time to be a basestring')
        __self__.backup_time = backup_time
        """
        DB instance backup time, in the format of HH:mmZ- HH:mmZ. Time setting interval is one hour. Default to "02:00Z-03:00Z". China time is 8 hours behind it.
        """
        __props__['backupTime'] = backup_time

        if not instance_id:
            raise TypeError('Missing required property instance_id')
        elif not isinstance(instance_id, basestring):
            raise TypeError('Expected property instance_id to be a basestring')
        __self__.instance_id = instance_id
        """
        The Id of instance that can run database.
        """
        __props__['instanceId'] = instance_id

        if log_backup and not isinstance(log_backup, bool):
            raise TypeError('Expected property log_backup to be a bool')
        __self__.log_backup = log_backup
        """
        Whether to backup instance log. Default to true.
        """
        __props__['logBackup'] = log_backup

        if log_retention_period and not isinstance(log_retention_period, int):
            raise TypeError('Expected property log_retention_period to be a int')
        __self__.log_retention_period = log_retention_period
        """
        Instance log backup retention days. Valid values: [7-730]. Default to 7. It can be larger than 'retention_period'.
        """
        __props__['logRetentionPeriod'] = log_retention_period

        if retention_period and not isinstance(retention_period, int):
            raise TypeError('Expected property retention_period to be a int')
        __self__.retention_period = retention_period
        """
        Instance backup retention days. Valid values: [7-730]. Default to 7.
        """
        __props__['retentionPeriod'] = retention_period

        super(BackupPolicy, __self__).__init__(
            'alicloud:rds/backupPolicy:BackupPolicy',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'backupPeriods' in outs:
            self.backup_periods = outs['backupPeriods']
        if 'backupTime' in outs:
            self.backup_time = outs['backupTime']
        if 'instanceId' in outs:
            self.instance_id = outs['instanceId']
        if 'logBackup' in outs:
            self.log_backup = outs['logBackup']
        if 'logRetentionPeriod' in outs:
            self.log_retention_period = outs['logRetentionPeriod']
        if 'retentionPeriod' in outs:
            self.retention_period = outs['retentionPeriod']
