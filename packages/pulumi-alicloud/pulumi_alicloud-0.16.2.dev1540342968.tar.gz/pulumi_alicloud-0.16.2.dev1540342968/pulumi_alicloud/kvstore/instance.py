# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Instance(pulumi.CustomResource):
    """
    Provides an ApsaraDB Redis / Memcache instance resource. A DB instance is an isolated database environment in the cloud. It can be associated with IP whitelists and backup configuration which are separate resource providers.
    """
    def __init__(__self__, __name__, __opts__=None, availability_zone=None, backup_id=None, engine_version=None, instance_charge_type=None, instance_class=None, instance_name=None, instance_type=None, password=None, period=None, private_ip=None, security_ips=None, vswitch_id=None):
        """Create a Instance resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if availability_zone and not isinstance(availability_zone, basestring):
            raise TypeError('Expected property availability_zone to be a basestring')
        __self__.availability_zone = availability_zone
        """
        The Zone to launch the DB instance.
        """
        __props__['availabilityZone'] = availability_zone

        if backup_id and not isinstance(backup_id, basestring):
            raise TypeError('Expected property backup_id to be a basestring')
        __self__.backup_id = backup_id
        __props__['backupId'] = backup_id

        if engine_version and not isinstance(engine_version, basestring):
            raise TypeError('Expected property engine_version to be a basestring')
        __self__.engine_version = engine_version
        __props__['engineVersion'] = engine_version

        if instance_charge_type and not isinstance(instance_charge_type, basestring):
            raise TypeError('Expected property instance_charge_type to be a basestring')
        __self__.instance_charge_type = instance_charge_type
        """
        Valid values are `PrePaid`, `PostPaid`, Default to `PostPaid`.
        """
        __props__['instanceChargeType'] = instance_charge_type

        if not instance_class:
            raise TypeError('Missing required property instance_class')
        elif not isinstance(instance_class, basestring):
            raise TypeError('Expected property instance_class to be a basestring')
        __self__.instance_class = instance_class
        """
        Type of the applied ApsaraDB for Redis instance.
        For more information, see [Instance type table](https://www.alibabacloud.com/help/doc-detail/61135.htm).
        """
        __props__['instanceClass'] = instance_class

        if instance_name and not isinstance(instance_name, basestring):
            raise TypeError('Expected property instance_name to be a basestring')
        __self__.instance_name = instance_name
        """
        The name of DB instance. It a string of 2 to 256 characters.
        * `password`- (Required) The password of the DB instance. The password is a string of 8 to 30 characters and must contain uppercase letters, lowercase letters, and numbers.
        """
        __props__['instanceName'] = instance_name

        if instance_type and not isinstance(instance_type, basestring):
            raise TypeError('Expected property instance_type to be a basestring')
        __self__.instance_type = instance_type
        """
        The engine to use: `Redis` or `Memcache`. Defaults to `Redis`
        """
        __props__['instanceType'] = instance_type

        if not password:
            raise TypeError('Missing required property password')
        elif not isinstance(password, basestring):
            raise TypeError('Expected property password to be a basestring')
        __self__.password = password
        __props__['password'] = password

        if period and not isinstance(period, int):
            raise TypeError('Expected property period to be a int')
        __self__.period = period
        """
        The duration that you will buy DB instance (in month). It is valid when instance_charge_type is `PrePaid`. Valid values: [1~9], 12, 24, 36. Default to 1.
        """
        __props__['period'] = period

        if private_ip and not isinstance(private_ip, basestring):
            raise TypeError('Expected property private_ip to be a basestring')
        __self__.private_ip = private_ip
        __props__['privateIp'] = private_ip

        if security_ips and not isinstance(security_ips, list):
            raise TypeError('Expected property security_ips to be a list')
        __self__.security_ips = security_ips
        __props__['securityIps'] = security_ips

        if vswitch_id and not isinstance(vswitch_id, basestring):
            raise TypeError('Expected property vswitch_id to be a basestring')
        __self__.vswitch_id = vswitch_id
        """
        The ID of VSwitch.
        * `engine_version`- (Optional) Engine version. Supported values: 2.8 and 4.0. Default value: 2.8.
        * `security_ips`- (Optional) Set the instance's IP whitelist of the default security group.
        * `private_ip`- (Optional) Set the instance's private IP.
        * `backup_id`- (Optional) If an instance created based on a backup set generated by another instance is valid, this parameter indicates the ID of the generated backup set.
        """
        __props__['vswitchId'] = vswitch_id

        __self__.connection_domain = pulumi.runtime.UNKNOWN

        super(Instance, __self__).__init__(
            'alicloud:kvstore/instance:Instance',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'availabilityZone' in outs:
            self.availability_zone = outs['availabilityZone']
        if 'backupId' in outs:
            self.backup_id = outs['backupId']
        if 'connectionDomain' in outs:
            self.connection_domain = outs['connectionDomain']
        if 'engineVersion' in outs:
            self.engine_version = outs['engineVersion']
        if 'instanceChargeType' in outs:
            self.instance_charge_type = outs['instanceChargeType']
        if 'instanceClass' in outs:
            self.instance_class = outs['instanceClass']
        if 'instanceName' in outs:
            self.instance_name = outs['instanceName']
        if 'instanceType' in outs:
            self.instance_type = outs['instanceType']
        if 'password' in outs:
            self.password = outs['password']
        if 'period' in outs:
            self.period = outs['period']
        if 'privateIp' in outs:
            self.private_ip = outs['privateIp']
        if 'securityIps' in outs:
            self.security_ips = outs['securityIps']
        if 'vswitchId' in outs:
            self.vswitch_id = outs['vswitchId']
