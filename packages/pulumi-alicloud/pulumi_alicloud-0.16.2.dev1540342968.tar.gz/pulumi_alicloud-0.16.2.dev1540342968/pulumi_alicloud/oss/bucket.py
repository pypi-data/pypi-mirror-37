# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Bucket(pulumi.CustomResource):
    """
    Provides a resource to create a oss bucket and set its attribution.
    
    ~> **NOTE:** The bucket namespace is shared by all users of the OSS system. Please set bucket name as unique as possible.
    
    """
    def __init__(__self__, __name__, __opts__=None, acl=None, bucket=None, cors_rules=None, lifecycle_rules=None, logging=None, logging_isenable=None, referer_config=None, website=None):
        """Create a Bucket resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if acl and not isinstance(acl, basestring):
            raise TypeError('Expected property acl to be a basestring')
        __self__.acl = acl
        """
        The [canned ACL](https://www.alibabacloud.com/help/doc-detail/31898.htm) to apply. Defaults to "private".
        """
        __props__['acl'] = acl

        if bucket and not isinstance(bucket, basestring):
            raise TypeError('Expected property bucket to be a basestring')
        __self__.bucket = bucket
        """
        The name of the bucket. If omitted, Terraform will assign a random and unique name.
        """
        __props__['bucket'] = bucket

        if cors_rules and not isinstance(cors_rules, list):
            raise TypeError('Expected property cors_rules to be a list')
        __self__.cors_rules = cors_rules
        __props__['corsRules'] = cors_rules

        if lifecycle_rules and not isinstance(lifecycle_rules, list):
            raise TypeError('Expected property lifecycle_rules to be a list')
        __self__.lifecycle_rules = lifecycle_rules
        """
        A configuration of [object lifecycle management](https://www.alibabacloud.com/help/doc-detail/31904.htm) (documented below).
        """
        __props__['lifecycleRules'] = lifecycle_rules

        if logging and not isinstance(logging, dict):
            raise TypeError('Expected property logging to be a dict')
        __self__.logging = logging
        """
        A Settings of [bucket logging](https://www.alibabacloud.com/help/doc-detail/31900.htm) (documented below).
        """
        __props__['logging'] = logging

        if logging_isenable and not isinstance(logging_isenable, bool):
            raise TypeError('Expected property logging_isenable to be a bool')
        __self__.logging_isenable = logging_isenable
        """
        The flag of using logging enable container. Defaults true.
        """
        __props__['loggingIsenable'] = logging_isenable

        if referer_config and not isinstance(referer_config, dict):
            raise TypeError('Expected property referer_config to be a dict')
        __self__.referer_config = referer_config
        """
        The configuration of [referer](https://www.alibabacloud.com/help/doc-detail/31901.htm) (documented below).
        """
        __props__['refererConfig'] = referer_config

        if website and not isinstance(website, dict):
            raise TypeError('Expected property website to be a dict')
        __self__.website = website
        """
        A website object(documented below).
        """
        __props__['website'] = website

        __self__.creation_date = pulumi.runtime.UNKNOWN
        """
        The creation date of the bucket.
        """
        __self__.extranet_endpoint = pulumi.runtime.UNKNOWN
        """
        The extranet access endpoint of the bucket.
        """
        __self__.intranet_endpoint = pulumi.runtime.UNKNOWN
        """
        The intranet access endpoint of the bucket.
        """
        __self__.location = pulumi.runtime.UNKNOWN
        """
        The location of the bucket.
        """
        __self__.owner = pulumi.runtime.UNKNOWN
        """
        The bucket owner.
        """
        __self__.storage_class = pulumi.runtime.UNKNOWN
        """
        The bucket storage type.
        """

        super(Bucket, __self__).__init__(
            'alicloud:oss/bucket:Bucket',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'acl' in outs:
            self.acl = outs['acl']
        if 'bucket' in outs:
            self.bucket = outs['bucket']
        if 'corsRules' in outs:
            self.cors_rules = outs['corsRules']
        if 'creationDate' in outs:
            self.creation_date = outs['creationDate']
        if 'extranetEndpoint' in outs:
            self.extranet_endpoint = outs['extranetEndpoint']
        if 'intranetEndpoint' in outs:
            self.intranet_endpoint = outs['intranetEndpoint']
        if 'lifecycleRules' in outs:
            self.lifecycle_rules = outs['lifecycleRules']
        if 'location' in outs:
            self.location = outs['location']
        if 'logging' in outs:
            self.logging = outs['logging']
        if 'loggingIsenable' in outs:
            self.logging_isenable = outs['loggingIsenable']
        if 'owner' in outs:
            self.owner = outs['owner']
        if 'refererConfig' in outs:
            self.referer_config = outs['refererConfig']
        if 'storageClass' in outs:
            self.storage_class = outs['storageClass']
        if 'website' in outs:
            self.website = outs['website']
