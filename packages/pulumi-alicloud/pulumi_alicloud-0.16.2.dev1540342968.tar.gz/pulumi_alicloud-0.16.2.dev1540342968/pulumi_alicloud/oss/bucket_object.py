# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class BucketObject(pulumi.CustomResource):
    """
    Provides a resource to put a object(content or file) to a oss bucket.
    """
    def __init__(__self__, __name__, __opts__=None, acl=None, bucket=None, cache_control=None, content=None, content_disposition=None, content_encoding=None, content_md5=None, content_type=None, expires=None, key=None, server_side_encryption=None, source=None):
        """Create a BucketObject resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if acl and not isinstance(acl, basestring):
            raise TypeError('Expected property acl to be a basestring')
        __self__.acl = acl
        """
        The [canned ACL](https://www.alibabacloud.com/help/doc-detail/52284.htm) to apply. Defaults to "private".
        """
        __props__['acl'] = acl

        if not bucket:
            raise TypeError('Missing required property bucket')
        elif not isinstance(bucket, basestring):
            raise TypeError('Expected property bucket to be a basestring')
        __self__.bucket = bucket
        """
        The name of the bucket to put the file in.
        """
        __props__['bucket'] = bucket

        if cache_control and not isinstance(cache_control, basestring):
            raise TypeError('Expected property cache_control to be a basestring')
        __self__.cache_control = cache_control
        """
        Specifies caching behavior along the request/reply chain. Read [RFC2616 Cache-Control](https://www.ietf.org/rfc/rfc2616.txt) for further details.
        """
        __props__['cacheControl'] = cache_control

        if content and not isinstance(content, basestring):
            raise TypeError('Expected property content to be a basestring')
        __self__.content = content
        """
        The literal content being uploaded to the bucket.
        """
        __props__['content'] = content

        if content_disposition and not isinstance(content_disposition, basestring):
            raise TypeError('Expected property content_disposition to be a basestring')
        __self__.content_disposition = content_disposition
        """
        Specifies presentational information for the object. Read [RFC2616 Content-Disposition](https://www.ietf.org/rfc/rfc2616.txt) for further details.
        """
        __props__['contentDisposition'] = content_disposition

        if content_encoding and not isinstance(content_encoding, basestring):
            raise TypeError('Expected property content_encoding to be a basestring')
        __self__.content_encoding = content_encoding
        """
        Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [RFC2616 Content-Encoding](https://www.ietf.org/rfc/rfc2616.txt) for further details.
        """
        __props__['contentEncoding'] = content_encoding

        if content_md5 and not isinstance(content_md5, basestring):
            raise TypeError('Expected property content_md5 to be a basestring')
        __self__.content_md5 = content_md5
        """
        The MD5 value of the content. Read [MD5](https://www.alibabacloud.com/help/doc-detail/31978.htm) for computing method.
        """
        __props__['contentMd5'] = content_md5

        if content_type and not isinstance(content_type, basestring):
            raise TypeError('Expected property content_type to be a basestring')
        __self__.content_type = content_type
        """
        A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input.
        """
        __props__['contentType'] = content_type

        if expires and not isinstance(expires, basestring):
            raise TypeError('Expected property expires to be a basestring')
        __self__.expires = expires
        """
        Specifies expire date for the the request/response. Read [RFC2616 Expires](https://www.ietf.org/rfc/rfc2616.txt) for further details.
        """
        __props__['expires'] = expires

        if not key:
            raise TypeError('Missing required property key')
        elif not isinstance(key, basestring):
            raise TypeError('Expected property key to be a basestring')
        __self__.key = key
        """
        The name of the object once it is in the bucket.
        """
        __props__['key'] = key

        if server_side_encryption and not isinstance(server_side_encryption, basestring):
            raise TypeError('Expected property server_side_encryption to be a basestring')
        __self__.server_side_encryption = server_side_encryption
        """
        Specifies server-side encryption of the object in OSS. At present, it valid value is "`AES256`".
        """
        __props__['serverSideEncryption'] = server_side_encryption

        if source and not isinstance(source, basestring):
            raise TypeError('Expected property source to be a basestring')
        __self__.source = source
        """
        The path to the source file being uploaded to the bucket.
        """
        __props__['source'] = source

        __self__.content_length = pulumi.runtime.UNKNOWN
        """
        the content length of request.
        """
        __self__.etag = pulumi.runtime.UNKNOWN
        """
        the ETag generated for the object (an MD5 sum of the object content).
        """

        super(BucketObject, __self__).__init__(
            'alicloud:oss/bucketObject:BucketObject',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'acl' in outs:
            self.acl = outs['acl']
        if 'bucket' in outs:
            self.bucket = outs['bucket']
        if 'cacheControl' in outs:
            self.cache_control = outs['cacheControl']
        if 'content' in outs:
            self.content = outs['content']
        if 'contentDisposition' in outs:
            self.content_disposition = outs['contentDisposition']
        if 'contentEncoding' in outs:
            self.content_encoding = outs['contentEncoding']
        if 'contentLength' in outs:
            self.content_length = outs['contentLength']
        if 'contentMd5' in outs:
            self.content_md5 = outs['contentMd5']
        if 'contentType' in outs:
            self.content_type = outs['contentType']
        if 'etag' in outs:
            self.etag = outs['etag']
        if 'expires' in outs:
            self.expires = outs['expires']
        if 'key' in outs:
            self.key = outs['key']
        if 'serverSideEncryption' in outs:
            self.server_side_encryption = outs['serverSideEncryption']
        if 'source' in outs:
            self.source = outs['source']
