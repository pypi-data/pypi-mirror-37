# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class TopicSubscription(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, endpoint=None, filter_tag=None, name=None, notify_content_format=None, notify_strategy=None, topic_name=None):
        """Create a TopicSubscription resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not endpoint:
            raise TypeError('Missing required property endpoint')
        elif not isinstance(endpoint, basestring):
            raise TypeError('Expected property endpoint to be a basestring')
        __self__.endpoint = endpoint
        """
        The endpoint has three format. Available values format:
        - HTTP Format: http://xxx.com/xxx
        - Queue Format: acs:mns:{REGION}:{AccountID}:queues/{QueueName}
        - Email Format: mail:directmail:{MailAddress}
        """
        __props__['endpoint'] = endpoint

        if filter_tag and not isinstance(filter_tag, basestring):
            raise TypeError('Expected property filter_tag to be a basestring')
        __self__.filter_tag = filter_tag
        """
        The length should be shorter than 16.
        """
        __props__['filterTag'] = filter_tag

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Two topics subscription on a single account in the same topic cannot have the same name. A topic subscription name must start with an English letter or a digit, and can contain English letters, digits, and hyphens, with the length not exceeding 256 characters.
        """
        __props__['name'] = name

        if notify_content_format and not isinstance(notify_content_format, basestring):
            raise TypeError('Expected property notify_content_format to be a basestring')
        __self__.notify_content_format = notify_content_format
        """
        The NotifyContentFormat attribute of Subscription. This attribute specifies the content format of the messages pushed to users. the attribute has two value SIMPLIFIED or XML.Default value to SIMPLIFIED .
        """
        __props__['notifyContentFormat'] = notify_content_format

        if notify_strategy and not isinstance(notify_strategy, basestring):
            raise TypeError('Expected property notify_strategy to be a basestring')
        __self__.notify_strategy = notify_strategy
        """
        The NotifyStrategy attribute of Subscription. This attribute specifies the retry strategy when message sending fails. the attribute has two value EXPONENTIAL_DECAY_RETR or BACKOFF_RETRY. Default value to BACKOFF_RETRY .
        """
        __props__['notifyStrategy'] = notify_strategy

        if not topic_name:
            raise TypeError('Missing required property topic_name')
        elif not isinstance(topic_name, basestring):
            raise TypeError('Expected property topic_name to be a basestring')
        __self__.topic_name = topic_name
        __props__['topicName'] = topic_name

        super(TopicSubscription, __self__).__init__(
            'alicloud:mns/topicSubscription:TopicSubscription',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'endpoint' in outs:
            self.endpoint = outs['endpoint']
        if 'filterTag' in outs:
            self.filter_tag = outs['filterTag']
        if 'name' in outs:
            self.name = outs['name']
        if 'notifyContentFormat' in outs:
            self.notify_content_format = outs['notifyContentFormat']
        if 'notifyStrategy' in outs:
            self.notify_strategy = outs['notifyStrategy']
        if 'topicName' in outs:
            self.topic_name = outs['topicName']
