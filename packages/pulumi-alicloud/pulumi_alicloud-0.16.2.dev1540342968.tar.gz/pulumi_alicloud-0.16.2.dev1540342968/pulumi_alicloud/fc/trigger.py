# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Trigger(pulumi.CustomResource):
    """
    Provides a Alicloud Function Compute Trigger resource. Based on trigger, execute your code in response to events in Alibaba Cloud.
     For information about Service and how to use it, see [What is Function Compute](https://www.alibabacloud.com/help/doc-detail/52895.htm).
    
    -> **NOTE:** The resource requires a provider field 'account_id'. [See account_id](https://www.terraform.io/docs/providers/alicloud/index.html#account_id).
    """
    def __init__(__self__, __name__, __opts__=None, config=None, function=None, name=None, name_prefix=None, role=None, service=None, source_arn=None, type=None):
        """Create a Trigger resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not config:
            raise TypeError('Missing required property config')
        elif not isinstance(config, basestring):
            raise TypeError('Expected property config to be a basestring')
        __self__.config = config
        """
        The config of Function Compute trigger. See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
        """
        __props__['config'] = config

        if not function:
            raise TypeError('Missing required property function')
        elif not isinstance(function, basestring):
            raise TypeError('Expected property function to be a basestring')
        __self__.function = function
        """
        The Function Compute function name.
        """
        __props__['function'] = function

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The Function Compute trigger name. It is the only in one service and is conflict with "name_prefix".
        """
        __props__['name'] = name

        if name_prefix and not isinstance(name_prefix, basestring):
            raise TypeError('Expected property name_prefix to be a basestring')
        __self__.name_prefix = name_prefix
        """
        Setting a prefix to get a only trigger name. It is conflict with "name".
        """
        __props__['namePrefix'] = name_prefix

        if role and not isinstance(role, basestring):
            raise TypeError('Expected property role to be a basestring')
        __self__.role = role
        """
        RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
        """
        __props__['role'] = role

        if not service:
            raise TypeError('Missing required property service')
        elif not isinstance(service, basestring):
            raise TypeError('Expected property service to be a basestring')
        __self__.service = service
        """
        The Function Compute service name.
        """
        __props__['service'] = service

        if source_arn and not isinstance(source_arn, basestring):
            raise TypeError('Expected property source_arn to be a basestring')
        __self__.source_arn = source_arn
        """
        Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
        """
        __props__['sourceArn'] = source_arn

        if not type:
            raise TypeError('Missing required property type')
        elif not isinstance(type, basestring):
            raise TypeError('Expected property type to be a basestring')
        __self__.type = type
        """
        The Type of the trigger. Valid values: ["oss", "log", "timer", "http"].
        """
        __props__['type'] = type

        __self__.last_modified = pulumi.runtime.UNKNOWN
        """
        The date this resource was last modified.
        """

        super(Trigger, __self__).__init__(
            'alicloud:fc/trigger:Trigger',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'config' in outs:
            self.config = outs['config']
        if 'function' in outs:
            self.function = outs['function']
        if 'lastModified' in outs:
            self.last_modified = outs['lastModified']
        if 'name' in outs:
            self.name = outs['name']
        if 'namePrefix' in outs:
            self.name_prefix = outs['namePrefix']
        if 'role' in outs:
            self.role = outs['role']
        if 'service' in outs:
            self.service = outs['service']
        if 'sourceArn' in outs:
            self.source_arn = outs['sourceArn']
        if 'type' in outs:
            self.type = outs['type']
