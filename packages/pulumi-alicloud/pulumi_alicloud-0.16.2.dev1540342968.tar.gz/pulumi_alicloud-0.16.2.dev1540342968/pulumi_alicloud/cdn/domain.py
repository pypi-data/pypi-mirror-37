# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Domain(pulumi.CustomResource):
    """
    Provides a CDN Accelerated Domain resource.
    """
    def __init__(__self__, __name__, __opts__=None, auth_config=None, block_ips=None, cache_configs=None, cdn_type=None, domain_name=None, http_header_configs=None, optimize_enable=None, page404_config=None, page_compress_enable=None, parameter_filter_config=None, range_enable=None, refer_config=None, scope=None, source_port=None, source_type=None, sources=None, video_seek_enable=None):
        """Create a Domain resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if auth_config and not isinstance(auth_config, dict):
            raise TypeError('Expected property auth_config to be a dict')
        __self__.auth_config = auth_config
        """
        Auth config of the accelerated domain. It's a set and consist of at most 1 item.
        """
        __props__['authConfig'] = auth_config

        if block_ips and not isinstance(block_ips, list):
            raise TypeError('Expected property block_ips to be a list')
        __self__.block_ips = block_ips
        __props__['blockIps'] = block_ips

        if cache_configs and not isinstance(cache_configs, list):
            raise TypeError('Expected property cache_configs to be a list')
        __self__.cache_configs = cache_configs
        """
        Cache config of the accelerated domain. It's a set and each item's `cache_content` can not be repeated.
        """
        __props__['cacheConfigs'] = cache_configs

        if not cdn_type:
            raise TypeError('Missing required property cdn_type')
        elif not isinstance(cdn_type, basestring):
            raise TypeError('Expected property cdn_type to be a basestring')
        __self__.cdn_type = cdn_type
        """
        Cdn type of the accelerated domain. Valid values are `web`, `download`, `video`, `liveStream`.
        """
        __props__['cdnType'] = cdn_type

        if not domain_name:
            raise TypeError('Missing required property domain_name')
        elif not isinstance(domain_name, basestring):
            raise TypeError('Expected property domain_name to be a basestring')
        __self__.domain_name = domain_name
        """
        Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix `.sh` and `.tel` are not supported.
        """
        __props__['domainName'] = domain_name

        if http_header_configs and not isinstance(http_header_configs, list):
            raise TypeError('Expected property http_header_configs to be a list')
        __self__.http_header_configs = http_header_configs
        """
        Http header config of the accelerated domain. It's a set and consist of at most 8 items. The `header_key` for each item can not be repeated.
        """
        __props__['httpHeaderConfigs'] = http_header_configs

        if optimize_enable and not isinstance(optimize_enable, basestring):
            raise TypeError('Expected property optimize_enable to be a basestring')
        __self__.optimize_enable = optimize_enable
        """
        Page Optimize config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`. It can effectively remove the page redundant content, reduce the file size and improve the speed of distribution when this parameter value is `on`.
        """
        __props__['optimizeEnable'] = optimize_enable

        if page404_config and not isinstance(page404_config, dict):
            raise TypeError('Expected property page404_config to be a dict')
        __self__.page404_config = page404_config
        """
        Error Page config of the accelerated domain. It's a set and consists of at most one item.
        """
        __props__['page404Config'] = page404_config

        if page_compress_enable and not isinstance(page_compress_enable, basestring):
            raise TypeError('Expected property page_compress_enable to be a basestring')
        __self__.page_compress_enable = page_compress_enable
        """
        Page Compress config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
        """
        __props__['pageCompressEnable'] = page_compress_enable

        if parameter_filter_config and not isinstance(parameter_filter_config, dict):
            raise TypeError('Expected property parameter_filter_config to be a dict')
        __self__.parameter_filter_config = parameter_filter_config
        """
        Parameter filter config of the accelerated domain. It's a set and consists of at most one item.
        """
        __props__['parameterFilterConfig'] = parameter_filter_config

        if range_enable and not isinstance(range_enable, basestring):
            raise TypeError('Expected property range_enable to be a basestring')
        __self__.range_enable = range_enable
        """
        Range Source config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
        """
        __props__['rangeEnable'] = range_enable

        if refer_config and not isinstance(refer_config, dict):
            raise TypeError('Expected property refer_config to be a dict')
        __self__.refer_config = refer_config
        """
        Refer anti-theft chain config of the accelerated domain. It's a set and consists of at most 1 item. 
        """
        __props__['referConfig'] = refer_config

        if scope and not isinstance(scope, basestring):
            raise TypeError('Expected property scope to be a basestring')
        __self__.scope = scope
        """
        Scope of the accelerated domain. Valid values are `domestic`, `overseas`, `global`. Default value is `domestic`. This parameter's setting is valid Only for the international users and domestic L3 and above users .
        """
        __props__['scope'] = scope

        if source_port and not isinstance(source_port, int):
            raise TypeError('Expected property source_port to be a int')
        __self__.source_port = source_port
        """
        Source port of the accelerated domain. Valid values are `80` and `443`. Default value is `80`. You must use `80` when the `source_type` is `oss`.
        """
        __props__['sourcePort'] = source_port

        if source_type and not isinstance(source_type, basestring):
            raise TypeError('Expected property source_type to be a basestring')
        __self__.source_type = source_type
        """
        Source type of the accelerated domain. Valid values are `ipaddr`, `domain`, `oss`. You must set this parameter when `cdn_type` value is not `liveStream`.
        """
        __props__['sourceType'] = source_type

        if sources and not isinstance(sources, list):
            raise TypeError('Expected property sources to be a list')
        __self__.sources = sources
        """
        Sources of the accelerated domain. It's a list of domain names or IP address and consists of at most 20 items. You must set this parameter when `cdn_type` value is not `liveStream`.
        """
        __props__['sources'] = sources

        if video_seek_enable and not isinstance(video_seek_enable, basestring):
            raise TypeError('Expected property video_seek_enable to be a basestring')
        __self__.video_seek_enable = video_seek_enable
        """
        Video Seek config of the accelerated domain. Valid values are `on` and `off`. Default value is `off`.
        """
        __props__['videoSeekEnable'] = video_seek_enable

        super(Domain, __self__).__init__(
            'alicloud:cdn/domain:Domain',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'authConfig' in outs:
            self.auth_config = outs['authConfig']
        if 'blockIps' in outs:
            self.block_ips = outs['blockIps']
        if 'cacheConfigs' in outs:
            self.cache_configs = outs['cacheConfigs']
        if 'cdnType' in outs:
            self.cdn_type = outs['cdnType']
        if 'domainName' in outs:
            self.domain_name = outs['domainName']
        if 'httpHeaderConfigs' in outs:
            self.http_header_configs = outs['httpHeaderConfigs']
        if 'optimizeEnable' in outs:
            self.optimize_enable = outs['optimizeEnable']
        if 'page404Config' in outs:
            self.page404_config = outs['page404Config']
        if 'pageCompressEnable' in outs:
            self.page_compress_enable = outs['pageCompressEnable']
        if 'parameterFilterConfig' in outs:
            self.parameter_filter_config = outs['parameterFilterConfig']
        if 'rangeEnable' in outs:
            self.range_enable = outs['rangeEnable']
        if 'referConfig' in outs:
            self.refer_config = outs['referConfig']
        if 'scope' in outs:
            self.scope = outs['scope']
        if 'sourcePort' in outs:
            self.source_port = outs['sourcePort']
        if 'sourceType' in outs:
            self.source_type = outs['sourceType']
        if 'sources' in outs:
            self.sources = outs['sources']
        if 'videoSeekEnable' in outs:
            self.video_seek_enable = outs['videoSeekEnable']
