# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Instance(pulumi.CustomResource):
    """
    Provides a ECS instance resource.
    
    ~> **NOTE:** You can launch an ECS instance for a VPC network via specifying parameter `vswitch_id`. One instance can only belong to one VSwitch.
    
    ~> **NOTE:** If a VSwitchId is specified for creating an instance, SecurityGroupId and VSwitchId must belong to one VPC.
    
    ~> **NOTE:** Several instance types have outdated in some regions and availability zones, such as `ecs.t1.*`, `ecs.s2.*`, `ecs.n1.*` and so on. If you want to keep them, you should set `is_outdated` to true. For more about the upgraded instance type, refer to `alicloud_instance_types` datasource.
    
    ~> **NOTE:** At present, 'PrePaid' instance cannot be deleted and must wait it to be outdated and release it automatically.
    
    ~> **NOTE:** The resource supports modifying instance charge type from 'PrePaid' to 'PostPaid' from version 1.9.6.
     However, at present, this modification has some limitation about CPU core count in one month, so strongly recommand that `Don't modify instance charge type frequentlly in one month`.
    """
    def __init__(__self__, __name__, __opts__=None, allocate_public_ip=None, auto_renew_period=None, availability_zone=None, description=None, dry_run=None, force_delete=None, host_name=None, image_id=None, include_data_disks=None, instance_charge_type=None, instance_name=None, instance_type=None, internet_charge_type=None, internet_max_bandwidth_in=None, internet_max_bandwidth_out=None, io_optimized=None, is_outdated=None, key_name=None, password=None, period=None, period_unit=None, private_ip=None, renewal_status=None, role_name=None, security_groups=None, spot_price_limit=None, spot_strategy=None, subnet_id=None, system_disk_category=None, system_disk_size=None, tags=None, user_data=None, vswitch_id=None):
        """Create a Instance resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if allocate_public_ip and not isinstance(allocate_public_ip, bool):
            raise TypeError('Expected property allocate_public_ip to be a bool')
        __self__.allocate_public_ip = allocate_public_ip
        """
        It has been deprecated from version "1.7.0". Setting "internet_max_bandwidth_out" larger than 0 can allocate a public ip address for an instance.
        """
        __props__['allocatePublicIp'] = allocate_public_ip

        if auto_renew_period and not isinstance(auto_renew_period, int):
            raise TypeError('Expected property auto_renew_period to be a int')
        __self__.auto_renew_period = auto_renew_period
        """
        Auto renewal period of an instance, in the unit of month. It is valid when `instance_charge_type` is `PrePaid`. Default to 1. Valid value:
        - [1, 2, 3, 6, 12] when `period_unit` in "Month"
        - [1, 2, 3] when `period_unit` in "Week"
        """
        __props__['autoRenewPeriod'] = auto_renew_period

        if availability_zone and not isinstance(availability_zone, basestring):
            raise TypeError('Expected property availability_zone to be a basestring')
        __self__.availability_zone = availability_zone
        """
        The Zone to start the instance in. It is ignored and will be computed when set `vswitch_id`.
        """
        __props__['availabilityZone'] = availability_zone

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        Description of the instance, This description can have a string of 2 to 256 characters, It cannot begin with http:// or https://. Default value is null.
        """
        __props__['description'] = description

        if dry_run and not isinstance(dry_run, bool):
            raise TypeError('Expected property dry_run to be a bool')
        __self__.dry_run = dry_run
        """
        Whether to pre-detection. When it is true, only pre-detection and not actually modify the payment type operation. It is valid when `instance_charge_type` is 'PrePaid'. Default to false.
        """
        __props__['dryRun'] = dry_run

        if force_delete and not isinstance(force_delete, bool):
            raise TypeError('Expected property force_delete to be a bool')
        __self__.force_delete = force_delete
        """
        If it is true, the "PrePaid" instance will be change to "PostPaid" and then deleted forcibly.
        However, because of changing instance charge type has CPU core count quota limitation, so strongly recommand that "Don't modify instance charge type frequentlly in one month".
        """
        __props__['forceDelete'] = force_delete

        if host_name and not isinstance(host_name, basestring):
            raise TypeError('Expected property host_name to be a basestring')
        __self__.host_name = host_name
        """
        Host name of the ECS, which is a string of at least two characters. “hostname” cannot start or end with “.” or “-“. In addition, two or more consecutive “.” or “-“ symbols are not allowed. On Windows, the host name can contain a maximum of 15 characters, which can be a combination of uppercase/lowercase letters, numerals, and “-“. The host name cannot contain dots (“.”) or contain only numeric characters.
        On other OSs such as Linux, the host name can contain a maximum of 30 characters, which can be segments separated by dots (“.”), where each segment can contain uppercase/lowercase letters, numerals, or “_“. When it is changed, the instance will reboot to make the change take effect.
        """
        __props__['hostName'] = host_name

        if not image_id:
            raise TypeError('Missing required property image_id')
        elif not isinstance(image_id, basestring):
            raise TypeError('Expected property image_id to be a basestring')
        __self__.image_id = image_id
        """
        The Image to use for the instance. ECS instance's image can be replaced via changing 'image_id'. When it is changed, the instance will reboot to make the change take effect.
        """
        __props__['imageId'] = image_id

        if include_data_disks and not isinstance(include_data_disks, bool):
            raise TypeError('Expected property include_data_disks to be a bool')
        __self__.include_data_disks = include_data_disks
        """
        Whether to change instance disks charge type when changing instance charge type.
        """
        __props__['includeDataDisks'] = include_data_disks

        if instance_charge_type and not isinstance(instance_charge_type, basestring):
            raise TypeError('Expected property instance_charge_type to be a basestring')
        __self__.instance_charge_type = instance_charge_type
        """
        Valid values are `PrePaid`, `PostPaid`, The default is `PostPaid`.
        """
        __props__['instanceChargeType'] = instance_charge_type

        if instance_name and not isinstance(instance_name, basestring):
            raise TypeError('Expected property instance_name to be a basestring')
        __self__.instance_name = instance_name
        """
        The name of the ECS. This instance_name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin or end with a hyphen, and must not begin with http:// or https://. If not specified, 
        Terraform will autogenerate a default name is `ECS-Instance`.
        """
        __props__['instanceName'] = instance_name

        if not instance_type:
            raise TypeError('Missing required property instance_type')
        elif not isinstance(instance_type, basestring):
            raise TypeError('Expected property instance_type to be a basestring')
        __self__.instance_type = instance_type
        """
        The type of instance to start.
        """
        __props__['instanceType'] = instance_type

        if internet_charge_type and not isinstance(internet_charge_type, basestring):
            raise TypeError('Expected property internet_charge_type to be a basestring')
        __self__.internet_charge_type = internet_charge_type
        """
        Internet charge type of the instance, Valid values are `PayByBandwidth`, `PayByTraffic`. Default is `PayByTraffic`. At present, 'PrePaid' instance cannot change the value to "PayByBandwidth" from "PayByTraffic".
        """
        __props__['internetChargeType'] = internet_charge_type

        if internet_max_bandwidth_in and not isinstance(internet_max_bandwidth_in, int):
            raise TypeError('Expected property internet_max_bandwidth_in to be a int')
        __self__.internet_max_bandwidth_in = internet_max_bandwidth_in
        """
        Maximum incoming bandwidth from the public network, measured in Mbps (Mega bit per second). Value range: [1, 200]. If this value is not specified, then automatically sets it to 200 Mbps.
        """
        __props__['internetMaxBandwidthIn'] = internet_max_bandwidth_in

        if internet_max_bandwidth_out and not isinstance(internet_max_bandwidth_out, int):
            raise TypeError('Expected property internet_max_bandwidth_out to be a int')
        __self__.internet_max_bandwidth_out = internet_max_bandwidth_out
        """
        Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bit per second). Value range:  [0, 100]. Default to 0 Mbps.
        """
        __props__['internetMaxBandwidthOut'] = internet_max_bandwidth_out

        if io_optimized and not isinstance(io_optimized, basestring):
            raise TypeError('Expected property io_optimized to be a basestring')
        __self__.io_optimized = io_optimized
        """
        It has been deprecated on instance resource. All the launched alicloud instances will be I/O optimized.
        """
        __props__['ioOptimized'] = io_optimized

        if is_outdated and not isinstance(is_outdated, bool):
            raise TypeError('Expected property is_outdated to be a bool')
        __self__.is_outdated = is_outdated
        """
        Whether to use outdated instance type. Default to false.
        """
        __props__['isOutdated'] = is_outdated

        if key_name and not isinstance(key_name, basestring):
            raise TypeError('Expected property key_name to be a basestring')
        __self__.key_name = key_name
        """
        The name of key pair that can login ECS instance successfully without password. If it is specified, the password would be invalid.
        """
        __props__['keyName'] = key_name

        if password and not isinstance(password, basestring):
            raise TypeError('Expected property password to be a basestring')
        __self__.password = password
        """
        Password to an instance is a string of 8 to 30 characters. It must contain uppercase/lowercase letters and numerals, but cannot contain special symbols. When it is changed, the instance will reboot to make the change take effect.
        """
        __props__['password'] = password

        if period and not isinstance(period, int):
            raise TypeError('Expected property period to be a int')
        __self__.period = period
        """
        The duration that you will buy the resource, in month. It is valid when `instance_charge_type` is `PrePaid`. Default to 1. Valid values:
        - [1-9, 12, 24, 36, 48, 60] when `period_unit` in "Month"
        - [1-3] when `period_unit` in "Week"
        """
        __props__['period'] = period

        if period_unit and not isinstance(period_unit, basestring):
            raise TypeError('Expected property period_unit to be a basestring')
        __self__.period_unit = period_unit
        """
        The duration unit that you will buy the resource. It is valid when `instance_charge_type` is 'PrePaid'. Valid value: ["Week", "Month"]. Default to "Month".
        """
        __props__['periodUnit'] = period_unit

        if private_ip and not isinstance(private_ip, basestring):
            raise TypeError('Expected property private_ip to be a basestring')
        __self__.private_ip = private_ip
        """
        Instance private IP address can be specified when you creating new instance. It is valid when `vswitch_id` is specified.
        """
        __props__['privateIp'] = private_ip

        if renewal_status and not isinstance(renewal_status, basestring):
            raise TypeError('Expected property renewal_status to be a basestring')
        __self__.renewal_status = renewal_status
        """
        Whether to renew an ECS instance automatically or not. It is valid when `instance_charge_type` is `PrePaid`. Default to "Normal". Valid values:
        - `AutoRenewal`: Enable auto renewal.
        - `Normal`: Disable auto renewal.
        - `NotRenewal`: No renewal any longer. After you specify this value, Alibaba Cloud stop sending notification of instance expiry, and only gives a brief reminder on the third day before the instance expiry.
        """
        __props__['renewalStatus'] = renewal_status

        if role_name and not isinstance(role_name, basestring):
            raise TypeError('Expected property role_name to be a basestring')
        __self__.role_name = role_name
        """
        Instance RAM role name. The name is provided and maintained by RAM. You can use `alicloud_ram_role` to create a new one.
        """
        __props__['roleName'] = role_name

        if not security_groups:
            raise TypeError('Missing required property security_groups')
        elif not isinstance(security_groups, list):
            raise TypeError('Expected property security_groups to be a list')
        __self__.security_groups = security_groups
        """
        A list of security group ids to associate with.
        """
        __props__['securityGroups'] = security_groups

        if spot_price_limit and not isinstance(spot_price_limit, float):
            raise TypeError('Expected property spot_price_limit to be a float')
        __self__.spot_price_limit = spot_price_limit
        """
        The hourly price threshold of a instance, and it takes effect only when parameter 'spot_strategy' is 'SpotWithPriceLimit'. Three decimals is allowed at most.
        """
        __props__['spotPriceLimit'] = spot_price_limit

        if spot_strategy and not isinstance(spot_strategy, basestring):
            raise TypeError('Expected property spot_strategy to be a basestring')
        __self__.spot_strategy = spot_strategy
        """
        The spot strategy of a Pay-As-You-Go instance, and it takes effect only when parameter `instance_charge_type` is 'PostPaid'. Value range:
        - NoSpot: A regular Pay-As-You-Go instance.
        - SpotWithPriceLimit: A price threshold for a spot instance
        - SpotAsPriceGo: A price that is based on the highest Pay-As-You-Go instance
        """
        __props__['spotStrategy'] = spot_strategy

        if subnet_id and not isinstance(subnet_id, basestring):
            raise TypeError('Expected property subnet_id to be a basestring')
        __self__.subnet_id = subnet_id
        __props__['subnetId'] = subnet_id

        if system_disk_category and not isinstance(system_disk_category, basestring):
            raise TypeError('Expected property system_disk_category to be a basestring')
        __self__.system_disk_category = system_disk_category
        """
        Valid values are `cloud_efficiency`, `cloud_ssd` and `cloud`. `cloud` only is used to some none I/O optimized instance. Default to `cloud_efficiency`.
        """
        __props__['systemDiskCategory'] = system_disk_category

        if system_disk_size and not isinstance(system_disk_size, int):
            raise TypeError('Expected property system_disk_size to be a int')
        __self__.system_disk_size = system_disk_size
        """
        Size of the system disk, value range: 40GB ~ 500GB. Default is 40GB. ECS instance's system disk can be reset when replacing system disk.
        """
        __props__['systemDiskSize'] = system_disk_size

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        """
        A mapping of tags to assign to the resource.
        """
        __props__['tags'] = tags

        if user_data and not isinstance(user_data, basestring):
            raise TypeError('Expected property user_data to be a basestring')
        __self__.user_data = user_data
        """
        User-defined data to customize the startup behaviors of an ECS instance and to pass data into an ECS instance.
        """
        __props__['userData'] = user_data

        if vswitch_id and not isinstance(vswitch_id, basestring):
            raise TypeError('Expected property vswitch_id to be a basestring')
        __self__.vswitch_id = vswitch_id
        """
        The virtual switch ID to launch in VPC. If you want to create instances in VPC network, this parameter must be set.
        """
        __props__['vswitchId'] = vswitch_id

        __self__.public_ip = pulumi.runtime.UNKNOWN
        """
        The instance public ip.
        """
        __self__.status = pulumi.runtime.UNKNOWN
        """
        The instance status.
        """

        super(Instance, __self__).__init__(
            'alicloud:ecs/instance:Instance',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'allocatePublicIp' in outs:
            self.allocate_public_ip = outs['allocatePublicIp']
        if 'autoRenewPeriod' in outs:
            self.auto_renew_period = outs['autoRenewPeriod']
        if 'availabilityZone' in outs:
            self.availability_zone = outs['availabilityZone']
        if 'description' in outs:
            self.description = outs['description']
        if 'dryRun' in outs:
            self.dry_run = outs['dryRun']
        if 'forceDelete' in outs:
            self.force_delete = outs['forceDelete']
        if 'hostName' in outs:
            self.host_name = outs['hostName']
        if 'imageId' in outs:
            self.image_id = outs['imageId']
        if 'includeDataDisks' in outs:
            self.include_data_disks = outs['includeDataDisks']
        if 'instanceChargeType' in outs:
            self.instance_charge_type = outs['instanceChargeType']
        if 'instanceName' in outs:
            self.instance_name = outs['instanceName']
        if 'instanceType' in outs:
            self.instance_type = outs['instanceType']
        if 'internetChargeType' in outs:
            self.internet_charge_type = outs['internetChargeType']
        if 'internetMaxBandwidthIn' in outs:
            self.internet_max_bandwidth_in = outs['internetMaxBandwidthIn']
        if 'internetMaxBandwidthOut' in outs:
            self.internet_max_bandwidth_out = outs['internetMaxBandwidthOut']
        if 'ioOptimized' in outs:
            self.io_optimized = outs['ioOptimized']
        if 'isOutdated' in outs:
            self.is_outdated = outs['isOutdated']
        if 'keyName' in outs:
            self.key_name = outs['keyName']
        if 'password' in outs:
            self.password = outs['password']
        if 'period' in outs:
            self.period = outs['period']
        if 'periodUnit' in outs:
            self.period_unit = outs['periodUnit']
        if 'privateIp' in outs:
            self.private_ip = outs['privateIp']
        if 'publicIp' in outs:
            self.public_ip = outs['publicIp']
        if 'renewalStatus' in outs:
            self.renewal_status = outs['renewalStatus']
        if 'roleName' in outs:
            self.role_name = outs['roleName']
        if 'securityGroups' in outs:
            self.security_groups = outs['securityGroups']
        if 'spotPriceLimit' in outs:
            self.spot_price_limit = outs['spotPriceLimit']
        if 'spotStrategy' in outs:
            self.spot_strategy = outs['spotStrategy']
        if 'status' in outs:
            self.status = outs['status']
        if 'subnetId' in outs:
            self.subnet_id = outs['subnetId']
        if 'systemDiskCategory' in outs:
            self.system_disk_category = outs['systemDiskCategory']
        if 'systemDiskSize' in outs:
            self.system_disk_size = outs['systemDiskSize']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'userData' in outs:
            self.user_data = outs['userData']
        if 'vswitchId' in outs:
            self.vswitch_id = outs['vswitchId']
