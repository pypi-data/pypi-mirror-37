# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class SecurityGroupRule(pulumi.CustomResource):
    """
    Provides a security group rule resource.
    Represents a single `ingress` or `egress` group rule, which can be added to external Security Groups.
    
    ~> **NOTE:**  `nic_type` should set to `intranet` when security group type is `vpc` or specifying the `source_security_group_id`. In this situation it does not distinguish between intranet and internet, the rule is effective on them both.
    
    """
    def __init__(__self__, __name__, __opts__=None, cidr_ip=None, ip_protocol=None, nic_type=None, policy=None, port_range=None, priority=None, security_group_id=None, source_group_owner_account=None, source_security_group_id=None, type=None):
        """Create a SecurityGroupRule resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if cidr_ip and not isinstance(cidr_ip, basestring):
            raise TypeError('Expected property cidr_ip to be a basestring')
        __self__.cidr_ip = cidr_ip
        """
        The target IP address range. The default value is 0.0.0.0/0 (which means no restriction will be applied). Other supported formats include 10.159.6.18/12. Only IPv4 is supported.
        """
        __props__['cidrIp'] = cidr_ip

        if not ip_protocol:
            raise TypeError('Missing required property ip_protocol')
        elif not isinstance(ip_protocol, basestring):
            raise TypeError('Expected property ip_protocol to be a basestring')
        __self__.ip_protocol = ip_protocol
        """
        The protocol. Can be `tcp`, `udp`, `icmp`, `gre` or `all`.
        """
        __props__['ipProtocol'] = ip_protocol

        if nic_type and not isinstance(nic_type, basestring):
            raise TypeError('Expected property nic_type to be a basestring')
        __self__.nic_type = nic_type
        """
        Network type, can be either `internet` or `intranet`, the default value is `internet`.
        """
        __props__['nicType'] = nic_type

        if policy and not isinstance(policy, basestring):
            raise TypeError('Expected property policy to be a basestring')
        __self__.policy = policy
        """
        Authorization policy, can be either `accept` or `drop`, the default value is `accept`.
        """
        __props__['policy'] = policy

        if port_range and not isinstance(port_range, basestring):
            raise TypeError('Expected property port_range to be a basestring')
        __self__.port_range = port_range
        """
        The range of port numbers relevant to the IP protocol. Default to "-1/-1". When the protocol is tcp or udp, each side port number range from 1 to 65535 and '-1/-1' will be invalid.
        For example, `1/200` means that the range of the port numbers is 1-200. Other protocols' 'port_range' can only be "-1/-1", and other values will be invalid.
        """
        __props__['portRange'] = port_range

        if priority and not isinstance(priority, int):
            raise TypeError('Expected property priority to be a int')
        __self__.priority = priority
        """
        Authorization policy priority, with parameter values: `1-100`, default value: 1.
        """
        __props__['priority'] = priority

        if not security_group_id:
            raise TypeError('Missing required property security_group_id')
        elif not isinstance(security_group_id, basestring):
            raise TypeError('Expected property security_group_id to be a basestring')
        __self__.security_group_id = security_group_id
        """
        The security group to apply this rule to.
        """
        __props__['securityGroupId'] = security_group_id

        if source_group_owner_account and not isinstance(source_group_owner_account, basestring):
            raise TypeError('Expected property source_group_owner_account to be a basestring')
        __self__.source_group_owner_account = source_group_owner_account
        """
        The Alibaba Cloud user account Id of the target security group when security groups are authorized across accounts.  This parameter is invalid if `cidr_ip` has already been set.
        """
        __props__['sourceGroupOwnerAccount'] = source_group_owner_account

        if source_security_group_id and not isinstance(source_security_group_id, basestring):
            raise TypeError('Expected property source_security_group_id to be a basestring')
        __self__.source_security_group_id = source_security_group_id
        """
        The target security group ID within the same region. If this field is specified, the `nic_type` can only select `intranet`.
        """
        __props__['sourceSecurityGroupId'] = source_security_group_id

        if not type:
            raise TypeError('Missing required property type')
        elif not isinstance(type, basestring):
            raise TypeError('Expected property type to be a basestring')
        __self__.type = type
        """
        The type of rule being created. Valid options are `ingress` (inbound) or `egress` (outbound).
        """
        __props__['type'] = type

        super(SecurityGroupRule, __self__).__init__(
            'alicloud:ecs/securityGroupRule:SecurityGroupRule',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'cidrIp' in outs:
            self.cidr_ip = outs['cidrIp']
        if 'ipProtocol' in outs:
            self.ip_protocol = outs['ipProtocol']
        if 'nicType' in outs:
            self.nic_type = outs['nicType']
        if 'policy' in outs:
            self.policy = outs['policy']
        if 'portRange' in outs:
            self.port_range = outs['portRange']
        if 'priority' in outs:
            self.priority = outs['priority']
        if 'securityGroupId' in outs:
            self.security_group_id = outs['securityGroupId']
        if 'sourceGroupOwnerAccount' in outs:
            self.source_group_owner_account = outs['sourceGroupOwnerAccount']
        if 'sourceSecurityGroupId' in outs:
            self.source_security_group_id = outs['sourceSecurityGroupId']
        if 'type' in outs:
            self.type = outs['type']
