# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `FDFS.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if '_t_s1' not in _M_Demo.__dict__:
    _M_Demo._t_s1 = IcePy.defineSequence('::Demo::s1', (), IcePy._t_byte)

if 'FDFSException' not in _M_Demo.__dict__:
    _M_Demo.FDFSException = Ice.createTempClass()
    class FDFSException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Demo::FDFSException'

    _M_Demo._t_FDFSException = IcePy.defineException('::Demo::FDFSException', FDFSException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    FDFSException._ice_type = _M_Demo._t_FDFSException

    _M_Demo.FDFSException = FDFSException
    del FDFSException

_M_Demo._t_FDFS = IcePy.defineValue('::Demo::FDFS', Ice.Value, -1, (), False, True, None, ())

if 'FDFSPrx' not in _M_Demo.__dict__:
    _M_Demo.FDFSPrx = Ice.createTempClass()
    class FDFSPrx(Ice.ObjectPrx):

        def upload(self, fileBuff, length, fileName, context=None):
            return _M_Demo.FDFS._op_upload.invoke(self, ((fileBuff, length, fileName), context))

        def uploadAsync(self, fileBuff, length, fileName, context=None):
            return _M_Demo.FDFS._op_upload.invokeAsync(self, ((fileBuff, length, fileName), context))

        def begin_upload(self, fileBuff, length, fileName, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.FDFS._op_upload.begin(self, ((fileBuff, length, fileName), _response, _ex, _sent, context))

        def end_upload(self, _r):
            return _M_Demo.FDFS._op_upload.end(self, _r)

        def append(self, fid, fileBuff, bytes, context=None):
            return _M_Demo.FDFS._op_append.invoke(self, ((fid, fileBuff, bytes), context))

        def appendAsync(self, fid, fileBuff, bytes, context=None):
            return _M_Demo.FDFS._op_append.invokeAsync(self, ((fid, fileBuff, bytes), context))

        def begin_append(self, fid, fileBuff, bytes, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.FDFS._op_append.begin(self, ((fid, fileBuff, bytes), _response, _ex, _sent, context))

        def end_append(self, _r):
            return _M_Demo.FDFS._op_append.end(self, _r)

        def size(self, fid, context=None):
            return _M_Demo.FDFS._op_size.invoke(self, ((fid, ), context))

        def sizeAsync(self, fid, context=None):
            return _M_Demo.FDFS._op_size.invokeAsync(self, ((fid, ), context))

        def begin_size(self, fid, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.FDFS._op_size.begin(self, ((fid, ), _response, _ex, _sent, context))

        def end_size(self, _r):
            return _M_Demo.FDFS._op_size.end(self, _r)

        def delete(self, fileId, context=None):
            return _M_Demo.FDFS._op_delete.invoke(self, ((fileId, ), context))

        def deleteAsync(self, fileId, context=None):
            return _M_Demo.FDFS._op_delete.invokeAsync(self, ((fileId, ), context))

        def begin_delete(self, fileId, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.FDFS._op_delete.begin(self, ((fileId, ), _response, _ex, _sent, context))

        def end_delete(self, _r):
            return _M_Demo.FDFS._op_delete.end(self, _r)

        def download(self, fid, offset, downloadBytes, context=None):
            return _M_Demo.FDFS._op_download.invoke(self, ((fid, offset, downloadBytes), context))

        def downloadAsync(self, fid, offset, downloadBytes, context=None):
            return _M_Demo.FDFS._op_download.invokeAsync(self, ((fid, offset, downloadBytes), context))

        def begin_download(self, fid, offset, downloadBytes, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.FDFS._op_download.begin(self, ((fid, offset, downloadBytes), _response, _ex, _sent, context))

        def end_download(self, _r):
            return _M_Demo.FDFS._op_download.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.FDFSPrx.ice_checkedCast(proxy, '::Demo::FDFS', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.FDFSPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::FDFS'
    _M_Demo._t_FDFSPrx = IcePy.defineProxy('::Demo::FDFS', FDFSPrx)

    _M_Demo.FDFSPrx = FDFSPrx
    del FDFSPrx

    _M_Demo.FDFS = Ice.createTempClass()
    class FDFS(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::FDFS', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::FDFS'

        @staticmethod
        def ice_staticId():
            return '::Demo::FDFS'

        def upload(self, fileBuff, length, fileName, current=None):
            raise NotImplementedError("servant method 'upload' not implemented")

        def append(self, fid, fileBuff, bytes, current=None):
            raise NotImplementedError("servant method 'append' not implemented")

        def size(self, fid, current=None):
            raise NotImplementedError("servant method 'size' not implemented")

        def delete(self, fileId, current=None):
            raise NotImplementedError("servant method 'delete' not implemented")

        def download(self, fid, offset, downloadBytes, current=None):
            raise NotImplementedError("servant method 'download' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_FDFSDisp)

        __repr__ = __str__

    _M_Demo._t_FDFSDisp = IcePy.defineClass('::Demo::FDFS', FDFS, (), None, ())
    FDFS._ice_type = _M_Demo._t_FDFSDisp

    FDFS._op_upload = IcePy.Operation('upload', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_s1, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Demo._t_FDFSException,))
    FDFS._op_append = IcePy.Operation('append', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Demo._t_s1, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_long, False, 0), (_M_Demo._t_FDFSException,))
    FDFS._op_size = IcePy.Operation('size', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_long, False, 0), (_M_Demo._t_FDFSException,))
    FDFS._op_delete = IcePy.Operation('delete', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Demo._t_FDFSException,))
    FDFS._op_download = IcePy.Operation('download', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_long, False, 0)), (), ((), _M_Demo._t_s1, False, 0), (_M_Demo._t_FDFSException,))

    _M_Demo.FDFS = FDFS
    del FDFS

# End of module Demo
