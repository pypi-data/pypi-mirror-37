# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `dbm.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice.BuiltinSequences_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module DBM
_M_DBM = Ice.openModule('DBM')
__name__ = 'DBM'

if 'DBMException' not in _M_DBM.__dict__:
    _M_DBM.DBMException = Ice.createTempClass()
    class DBMException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::DBM::DBMException'

    _M_DBM._t_DBMException = IcePy.defineException('::DBM::DBMException', DBMException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    DBMException._ice_type = _M_DBM._t_DBMException

    _M_DBM.DBMException = DBMException
    del DBMException

_M_DBM._t_DatabaseManager = IcePy.defineValue('::DBM::DatabaseManager', Ice.Value, -1, (), False, True, None, ())

if 'DatabaseManagerPrx' not in _M_DBM.__dict__:
    _M_DBM.DatabaseManagerPrx = Ice.createTempClass()
    class DatabaseManagerPrx(Ice.ObjectPrx):

        def saveFid(self, exchange, symbol, contractType, dataType, fid, dateTime, context=None):
            return _M_DBM.DatabaseManager._op_saveFid.invoke(self, ((exchange, symbol, contractType, dataType, fid, dateTime), context))

        def saveFidAsync(self, exchange, symbol, contractType, dataType, fid, dateTime, context=None):
            return _M_DBM.DatabaseManager._op_saveFid.invokeAsync(self, ((exchange, symbol, contractType, dataType, fid, dateTime), context))

        def begin_saveFid(self, exchange, symbol, contractType, dataType, fid, dateTime, _response=None, _ex=None, _sent=None, context=None):
            return _M_DBM.DatabaseManager._op_saveFid.begin(self, ((exchange, symbol, contractType, dataType, fid, dateTime), _response, _ex, _sent, context))

        def end_saveFid(self, _r):
            return _M_DBM.DatabaseManager._op_saveFid.end(self, _r)

        def queryFid(self, exchange, symbol, contractType, dataType, startDate, endDate, context=None):
            return _M_DBM.DatabaseManager._op_queryFid.invoke(self, ((exchange, symbol, contractType, dataType, startDate, endDate), context))

        def queryFidAsync(self, exchange, symbol, contractType, dataType, startDate, endDate, context=None):
            return _M_DBM.DatabaseManager._op_queryFid.invokeAsync(self, ((exchange, symbol, contractType, dataType, startDate, endDate), context))

        def begin_queryFid(self, exchange, symbol, contractType, dataType, startDate, endDate, _response=None, _ex=None, _sent=None, context=None):
            return _M_DBM.DatabaseManager._op_queryFid.begin(self, ((exchange, symbol, contractType, dataType, startDate, endDate), _response, _ex, _sent, context))

        def end_queryFid(self, _r):
            return _M_DBM.DatabaseManager._op_queryFid.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_DBM.DatabaseManagerPrx.ice_checkedCast(proxy, '::DBM::DatabaseManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_DBM.DatabaseManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::DBM::DatabaseManager'
    _M_DBM._t_DatabaseManagerPrx = IcePy.defineProxy('::DBM::DatabaseManager', DatabaseManagerPrx)

    _M_DBM.DatabaseManagerPrx = DatabaseManagerPrx
    del DatabaseManagerPrx

    _M_DBM.DatabaseManager = Ice.createTempClass()
    class DatabaseManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::DBM::DatabaseManager', '::Ice::Object')

        def ice_id(self, current=None):
            return '::DBM::DatabaseManager'

        @staticmethod
        def ice_staticId():
            return '::DBM::DatabaseManager'

        def saveFid(self, exchange, symbol, contractType, dataType, fid, dateTime, current=None):
            raise NotImplementedError("servant method 'saveFid' not implemented")

        def queryFid(self, exchange, symbol, contractType, dataType, startDate, endDate, current=None):
            raise NotImplementedError("servant method 'queryFid' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_DBM._t_DatabaseManagerDisp)

        __repr__ = __str__

    _M_DBM._t_DatabaseManagerDisp = IcePy.defineClass('::DBM::DatabaseManager', DatabaseManager, (), None, ())
    DatabaseManager._ice_type = _M_DBM._t_DatabaseManagerDisp

    DatabaseManager._op_saveFid = IcePy.Operation('saveFid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), (_M_DBM._t_DBMException,))
    DatabaseManager._op_queryFid = IcePy.Operation('queryFid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_DBM._t_DBMException,))

    _M_DBM.DatabaseManager = DatabaseManager
    del DatabaseManager

# End of module DBM
