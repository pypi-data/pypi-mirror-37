import pytest
from tests.helpers import assert_df_equal

from pyranges.pyranges import PyRanges
import pyranges as pr

import pandas as pd

from io import StringIO

@pytest.fixture
def expected_result_intersection(names):

    c = """chr1	9988	10115	HWI-ST216_313:3:1203:10227:6568	1	-
chr1	10073	10115	HWI-ST216_313:3:1203:10227:6568	1	-
chr1	10079	10115	HWI-ST216_313:3:1203:10227:6568	1	-
chr1	10082	10115	HWI-ST216_313:3:1203:10227:6568	1	-
chr1	9988	10138	HWI-ST216_313:3:2301:15791:16298	1	+
chr1	10073	10138	HWI-ST216_313:3:2301:15791:16298	1	+
chr1	10079	10138	HWI-ST216_313:3:2301:15791:16298	1	+
chr1	10082	10138	HWI-ST216_313:3:2301:15791:16298	1	+
chr1	9988	10150	HWI-ST216_313:3:2205:20086:33508	1	-
chr1	10073	10150	HWI-ST216_313:3:2205:20086:33508	1	-
chr1	10079	10150	HWI-ST216_313:3:2205:20086:33508	1	-
chr1	10082	10150	HWI-ST216_313:3:2205:20086:33508	1	-
chr1	10149	10150	HWI-ST216_313:3:2205:20086:33508	1	-
chr1	9988	10152	HWI-ST216_313:3:1305:6975:102491	1	+
chr1	10073	10152	HWI-ST216_313:3:1305:6975:102491	1	+
chr1	10079	10152	HWI-ST216_313:3:1305:6975:102491	1	+
chr1	10082	10152	HWI-ST216_313:3:1305:6975:102491	1	+
chr1	10149	10152	HWI-ST216_313:3:1305:6975:102491	1	+
chr1	9988	10177	HWI-ST216_313:3:1204:5599:113305	1	-
chr1	10073	10177	HWI-ST216_313:3:1204:5599:113305	1	-
chr1	10079	10177	HWI-ST216_313:3:1204:5599:113305	1	-
chr1	10082	10177	HWI-ST216_313:3:1204:5599:113305	1	-
chr1	10149	10177	HWI-ST216_313:3:1204:5599:113305	1	-
chr1	10001	10187	HWI-ST216_313:3:1102:14019:151362	1	-
chr1	10073	10200	HWI-ST216_313:3:1102:14019:151362	1	-
chr1	10079	10200	HWI-ST216_313:3:1102:14019:151362	1	-
chr1	10082	10200	HWI-ST216_313:3:1102:14019:151362	1	-
chr1	10149	10200	HWI-ST216_313:3:1102:14019:151362	1	-
chr1	10024	10187	HWI-ST216_313:3:2201:5209:155139	1	+
chr1	10073	10223	HWI-ST216_313:3:2201:5209:155139	1	+
chr1	10079	10223	HWI-ST216_313:3:2201:5209:155139	1	+
chr1	10082	10223	HWI-ST216_313:3:2201:5209:155139	1	+
chr1	10149	10223	HWI-ST216_313:3:2201:5209:155139	1	+
chr1	10127	10187	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10127	10272	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10127	10278	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10127	10281	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10149	10326	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10280	10326	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10241	10272	HWI-ST216_313:3:1302:4516:156396	1	-
chr1	10241	10278	HWI-ST216_313:3:1302:4516:156396	1	-
chr1	10241	10281	HWI-ST216_313:3:1302:4516:156396	1	-
chr1	10241	10348	HWI-ST216_313:3:1302:4516:156396	1	-
chr1	10280	10440	HWI-ST216_313:3:1302:4516:156396	1	-
chr1	10246	10272	HWI-ST216_313:3:1207:4315:142177	1	+
chr1	10246	10278	HWI-ST216_313:3:1207:4315:142177	1	+
chr1	10246	10281	HWI-ST216_313:3:1207:4315:142177	1	+
chr1	10246	10348	HWI-ST216_313:3:1207:4315:142177	1	+
chr1	10280	10445	HWI-ST216_313:3:1207:4315:142177	1	+"""

    return pd.read_table(StringIO(c), sep="\s+", names=names, header=None)


@pytest.fixture
def expected_result_intersection_same_strand(names):

    c = """chr1	9988	10115	HWI-ST216_313:3:1203:10227:6568	1	-
chr1	10079	10115	HWI-ST216_313:3:1203:10227:6568	1	-
chr1	10082	10115	HWI-ST216_313:3:1203:10227:6568	1	-
chr1	10073	10138	HWI-ST216_313:3:2301:15791:16298	1	+
chr1	9988	10150	HWI-ST216_313:3:2205:20086:33508	1	-
chr1	10079	10150	HWI-ST216_313:3:2205:20086:33508	1	-
chr1	10082	10150	HWI-ST216_313:3:2205:20086:33508	1	-
chr1	10149	10150	HWI-ST216_313:3:2205:20086:33508	1	-
chr1	10073	10152	HWI-ST216_313:3:1305:6975:102491	1	+
chr1	9988	10177	HWI-ST216_313:3:1204:5599:113305	1	-
chr1	10079	10177	HWI-ST216_313:3:1204:5599:113305	1	-
chr1	10082	10177	HWI-ST216_313:3:1204:5599:113305	1	-
chr1	10149	10177	HWI-ST216_313:3:1204:5599:113305	1	-
chr1	10001	10187	HWI-ST216_313:3:1102:14019:151362	1	-
chr1	10079	10200	HWI-ST216_313:3:1102:14019:151362	1	-
chr1	10082	10200	HWI-ST216_313:3:1102:14019:151362	1	-
chr1	10149	10200	HWI-ST216_313:3:1102:14019:151362	1	-
chr1	10073	10223	HWI-ST216_313:3:2201:5209:155139	1	+
chr1	10127	10187	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10127	10278	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10127	10281	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10149	10326	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10241	10278	HWI-ST216_313:3:1302:4516:156396	1	-
chr1	10241	10281	HWI-ST216_313:3:1302:4516:156396	1	-
chr1	10241	10348	HWI-ST216_313:3:1302:4516:156396	1	-
chr1	10246	10272	HWI-ST216_313:3:1207:4315:142177	1	+
chr1	10280	10445	HWI-ST216_313:3:1207:4315:142177	1	+"""

    return pd.read_table(StringIO(c), sep="\s+", names=names, header=None)


@pytest.fixture
def expected_result_intersection_opposite_strand(names):

    c = """chr1	10073	10115	HWI-ST216_313:3:1203:10227:6568	1	-
chr1	9988	10138	HWI-ST216_313:3:2301:15791:16298	1	+
chr1	10079	10138	HWI-ST216_313:3:2301:15791:16298	1	+
chr1	10082	10138	HWI-ST216_313:3:2301:15791:16298	1	+
chr1	10073	10150	HWI-ST216_313:3:2205:20086:33508	1	-
chr1	9988	10152	HWI-ST216_313:3:1305:6975:102491	1	+
chr1	10079	10152	HWI-ST216_313:3:1305:6975:102491	1	+
chr1	10082	10152	HWI-ST216_313:3:1305:6975:102491	1	+
chr1	10149	10152	HWI-ST216_313:3:1305:6975:102491	1	+
chr1	10073	10177	HWI-ST216_313:3:1204:5599:113305	1	-
chr1	10073	10200	HWI-ST216_313:3:1102:14019:151362	1	-
chr1	10024	10187	HWI-ST216_313:3:2201:5209:155139	1	+
chr1	10079	10223	HWI-ST216_313:3:2201:5209:155139	1	+
chr1	10082	10223	HWI-ST216_313:3:2201:5209:155139	1	+
chr1	10149	10223	HWI-ST216_313:3:2201:5209:155139	1	+
chr1	10127	10272	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10280	10326	HWI-ST216_313:3:2207:7406:122346	1	-
chr1	10241	10272	HWI-ST216_313:3:1302:4516:156396	1	-
chr1	10280	10440	HWI-ST216_313:3:1302:4516:156396	1	-
chr1	10246	10278	HWI-ST216_313:3:1207:4315:142177	1	+
chr1	10246	10281	HWI-ST216_313:3:1207:4315:142177	1	+
chr1	10246	10348	HWI-ST216_313:3:1207:4315:142177	1	+"""

    return pd.read_table(StringIO(c), sep="\s+", names=names, header=None)


def test_intersect_bed_unstranded(chip_10, input_10, expected_result_intersection):

    result = chip_10.intersection(input_10, strandedness=False)

    assert_df_equal(result.df, expected_result_intersection)


def test_intersect_bed_same_strand(chip_10, input_10, expected_result_intersection_same_strand):

    result = chip_10.intersection(input_10, strandedness="same")

    assert_df_equal(result.df, expected_result_intersection_same_strand)


def test_intersect_bed_opposite_strand(chip_10, input_10, expected_result_intersection_opposite_strand):

    result = chip_10.intersection(input_10, strandedness="opposite")

    assert_df_equal(result.df, expected_result_intersection_opposite_strand)



def test_intersect_bed_opposite_strand_containment(chip_10, input_10, expected_result_intersection_opposite_strand):

    result = chip_10.intersection(input_10, strandedness="opposite", how="containment")

    assert result.df.empty
