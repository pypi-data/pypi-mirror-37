#!/usr/bin/env python

#    Wrapper for tm_multimodal
#    Copyright (C) 2016 Tristram Lett

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import argparse as ap

import tfce_mediation

class _HelpAction(ap._HelpAction):

	def __call__(self, parser, namespace, values, option_string=None):
		parser.print_help()
		subparsers_actions = [
			action for action in parser._actions
			if isinstance(action, ap._SubParsersAction)]
		for subparsers_action in subparsers_actions:
			for choice, subparser in list(subparsers_action.choices.items()):
				print(("Sub-command '{}'".format(choice)))
				print((subparser.format_help()))
		parser.exit()

class _Usage(ap._HelpAction):

	def __call__(self, parser, namespace, values, option_string=None):
		splist = []
		splist.append(tm_multimodality_multisurface_regression)
		splist.append(tm_mmr_randomise_parallel)
		splist.append(read_tmi_header)
		splist.append(create_tmi)
		splist.append(tmi_edit)
		splist.append(tm_mulitmodality_adjacency)
		splist.append(tm_mmr_rand_low_ram)
		splist.append(tm_mmr_rand_low_ram_parallel)

		helps = []
		helps.append(parser.format_usage())
		for p in splist:
			helps.append(p.format_usage())
		print((''.join(helps)))
		parser.exit()

DESCRIPTION = "TFCE_mediation: Multimodal Multisurface Analysis. ALPHA 0.1"

formatter_class=lambda prog: ap.HelpFormatter(prog, max_help_position=40)

parser = ap.ArgumentParser(description = DESCRIPTION, formatter_class=formatter_class)

subparsers = parser.add_subparsers(help = "Sub-command help: tfce_multimodal {subcommand} -h")

### Subparser template ###
#{funcName} = subparsers.add_parser("{funcName}", help="Description")
#{funcName}.set_defaults(func = tfce_mediation.{scriptName}.run)
#tfce_mediation.{scriptName}.getArgumentParser({funcName})

tm_multimodality_multisurface_regression = subparsers.add_parser("mmr", help="mmr", formatter_class=formatter_class)
tm_multimodality_multisurface_regression.set_defaults(func = tfce_mediation.tm_multisurface.tm_multimodality_multisurface_regression.run)
tfce_mediation.tm_multisurface.tm_multimodality_multisurface_regression.getArgumentParser(tm_multimodality_multisurface_regression)

tm_mmr_randomise_parallel = subparsers.add_parser("mmr-parallel", help="mmr-parallel", formatter_class=formatter_class)
tm_mmr_randomise_parallel.set_defaults(func = tfce_mediation.tm_multisurface.tm_mmr_randomise_parallel.run)
tfce_mediation.tm_multisurface.tm_mmr_randomise_parallel.getArgumentParser(tm_mmr_randomise_parallel)

read_tmi_header = subparsers.add_parser("read-tmi-header", help="read-tmi-header", formatter_class=formatter_class)
read_tmi_header.set_defaults(func = tfce_mediation.tools.read_tmi_header.run)
tfce_mediation.tools.read_tmi_header.getArgumentParser(read_tmi_header)

create_tmi = subparsers.add_parser("create-tmi", help="create-tmi", formatter_class=formatter_class)
create_tmi.set_defaults(func = tfce_mediation.tools.create_tmi.run)
tfce_mediation.tools.create_tmi.getArgumentParser(create_tmi)

tmi_edit = subparsers.add_parser("edit-tmi", help="edit-tmi", formatter_class=formatter_class)
tmi_edit.set_defaults(func = tfce_mediation.tools.tmi_edit.run)
tfce_mediation.tools.tmi_edit.getArgumentParser(tmi_edit)

tm_mulitmodality_adjacency = subparsers.add_parser("multimodal-adjacency", help="multimodal-adjacency", formatter_class=formatter_class)
tm_mulitmodality_adjacency.set_defaults(func = tfce_mediation.tools.tm_mulitmodality_adjacency.run)
tfce_mediation.tools.tm_mulitmodality_adjacency.getArgumentParser(tm_mulitmodality_adjacency)

tm_mmr_rand_low_ram = subparsers.add_parser("mmr-lr", help="mmr-lr", formatter_class=formatter_class)
tm_mmr_rand_low_ram.set_defaults(func = tfce_mediation.tm_multisurface.tm_mmr_rand_low_ram.run)
tfce_mediation.tm_multisurface.tm_mmr_rand_low_ram.getArgumentParser(tm_mmr_rand_low_ram)

tm_mmr_rand_low_ram_parallel = subparsers.add_parser("mmr-lr-run", help="mmr-lr-run", formatter_class=formatter_class)
tm_mmr_rand_low_ram_parallel.set_defaults(func = tfce_mediation.tm_multisurface.tm_mmr_rand_low_ram_parallel.run)
tfce_mediation.tm_multisurface.tm_mmr_rand_low_ram_parallel.getArgumentParser(tm_mmr_rand_low_ram_parallel)

parser.add_argument('--verbosehelp', action=_HelpAction, help='Display help for each sub-command.')  # custom help
parser.add_argument('--usage', action=_Usage, help='Display usage for sub-command.')  # printout usage

args = parser.parse_args()
if len(sys.argv) == 1:
	parser.print_help()
else:
	args.func(args)

