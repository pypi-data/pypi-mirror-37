# -*- coding: utf-8 -*-

"""
    demonstrationAPIseb1

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from demonstrationAPIseb1.api_helper import APIHelper


class AccountsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(AccountsControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.accounts

    # Returns a list of transactions for one specific account. You can search on account with or without a date period. The response contains transaction ids that can be used to retrieve transaction details.
    def test_returns_a_list_of_transactions_for_one_specific_account_unfiltered_transaction_lists_are_paginated_when_filtering_by_date_results_are_never_paginated(self):
        # Parameters for the API call
        accept = 'application/json'

        # Perform the API call through the SDK function
        self.controller.get_returns_a_list_of_transactions_for_one_specific_account_unfiltered_transaction_lists_are_paginated_when_filtering_by_date_results_are_never_paginated(accept)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

    # Depending on transaction type, different fields will be returned. Some types of transaction detail does not have any further details than shown in the original transactions list.
    def test_returns_transaction_details_on_a_specific_transaction(self):
        # Parameters for the API call
        accept = 'application/json'

        # Perform the API call through the SDK function
        self.controller.get_returns_transaction_details_on_a_specific_transaction(accept)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

    # Listed accounts are those where the user is account holder and where the account type is PSD2 supported.
    def test_returns_a_list_of_a_user_s_accounts(self):
        # Parameters for the API call
        with_balance = '{{withBalance}}'
        accept = 'application/json'
        x_request_id = '{{X-Request-ID}}'
        psu_ip_address = '{{PSU-IP-Address}}'
        psu_ip_port = '{{PSU-IP-Port}}'
        psu_user_agent = '{{PSU-User-Agent}}'
        psu_geo_location = '{{PSU-Geo-Location}}'
        psu_accept = '{{PSU-Accept}}'
        psu_accept_charset = '{{PSU-Accept-Charset}}'
        psu_accept_encoding = '{{PSU-Accept-Encoding}}'
        psu_accept_language = '{{PSU-Accept-Language}}'
        psu_http_method = '{{PSU-Http-Method}}'
        psu_device_id = '{{PSU-Device-ID}}'

        # Perform the API call through the SDK function
        self.controller.get_returns_a_list_of_a_user_s_accounts(with_balance, accept, x_request_id, psu_ip_address, psu_ip_port, psu_user_agent, psu_geo_location, psu_accept, psu_accept_charset, psu_accept_encoding, psu_accept_language, psu_http_method, psu_device_id)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

    # Returns account information, with or without balances for one specific account. The accountId is found using the account list endpoint.
    def test_returns_account_information_potentially_including_balances_for_one_specific_account(self):
        # Parameters for the API call
        with_balance = '{{withBalance}}'
        account_id = '{{accountId}}'
        accept = 'application/json'
        x_request_id = '{{X-Request-ID}}'
        psu_ip_address = '{{PSU-IP-Address}}'
        psu_ip_port = '{{PSU-IP-Port}}'
        psu_user_agent = '{{PSU-User-Agent}}'
        psu_geo_location = '{{PSU-Geo-Location}}'
        psu_accept = '{{PSU-Accept}}'
        psu_accept_charset = '{{PSU-Accept-Charset}}'
        psu_accept_encoding = '{{PSU-Accept-Encoding}}'
        psu_accept_language = '{{PSU-Accept-Language}}'
        psu_http_method = '{{PSU-Http-Method}}'
        psu_device_id = '{{PSU-Device-ID}}'

        # Perform the API call through the SDK function
        self.controller.get_returns_account_information_potentially_including_balances_for_one_specific_account(with_balance, account_id, accept, x_request_id, psu_ip_address, psu_ip_port, psu_user_agent, psu_geo_location, psu_accept, psu_accept_charset, psu_accept_encoding, psu_accept_language, psu_http_method, psu_device_id)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

