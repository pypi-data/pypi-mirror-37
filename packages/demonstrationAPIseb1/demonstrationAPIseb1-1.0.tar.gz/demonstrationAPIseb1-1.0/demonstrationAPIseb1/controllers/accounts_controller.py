# -*- coding: utf-8 -*-

"""
    demonstrationAPIseb1

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration

class AccountsController(BaseController):

    """A Controller to access Endpoints in the demonstrationAPIseb1 API."""


    def get_returns_a_list_of_transactions_for_one_specific_account_unfiltered_transaction_lists_are_paginated_when_filtering_by_date_results_are_never_paginated(self,
                                                                                                                                                                  accept):
        """Does a GET request to /accounts/:accountId/transactions.

        Returns a list of transactions for one specific account. You can
        search on account with or without a date period. The response contains
        transaction ids that can be used to retrieve transaction details.

        Args:
            accept (string): TODO: type description here. Example: 

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/accounts/:accountId/transactions'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        _context = self.execute_request(_request)
        self.validate_response(_context)

    def get_returns_transaction_details_on_a_specific_transaction(self,
                                                                  accept):
        """Does a GET request to /accounts/:accountId/transactions/:transactionId.

        Depending on transaction type, different fields will be returned. Some
        types of transaction detail does not have any further details than
        shown in the original transactions list.

        Args:
            accept (string): TODO: type description here. Example: 

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/accounts/:accountId/transactions/:transactionId'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        _context = self.execute_request(_request)
        self.validate_response(_context)

    def get_returns_a_list_of_a_user_s_accounts(self,
                                                with_balance,
                                                accept,
                                                x_request_id,
                                                psu_ip_address,
                                                psu_ip_port,
                                                psu_user_agent,
                                                psu_geo_location,
                                                psu_accept,
                                                psu_accept_charset,
                                                psu_accept_encoding,
                                                psu_accept_language,
                                                psu_http_method,
                                                psu_device_id):
        """Does a GET request to /accounts.

        Listed accounts are those where the user is account holder and where
        the account type is PSD2 supported.

        Args:
            with_balance (string): TODO: type description here. Example: 
            accept (string): TODO: type description here. Example: 
            x_request_id (string): TODO: type description here. Example: 
            psu_ip_address (string): TODO: type description here. Example: 
            psu_ip_port (string): TODO: type description here. Example: 
            psu_user_agent (string): TODO: type description here. Example: 
            psu_geo_location (string): TODO: type description here. Example: 
            psu_accept (string): TODO: type description here. Example: 
            psu_accept_charset (string): TODO: type description here. Example:
                            psu_accept_encoding (string): TODO: type description here.
                Example: 
            psu_accept_language (string): TODO: type description here.
                Example: 
            psu_http_method (string): TODO: type description here. Example: 
            psu_device_id (string): TODO: type description here. Example: 

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/accounts'
        _query_parameters = {
            'withBalance': with_balance
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'X-Request-ID': x_request_id,
            'PSU-IP-Address': psu_ip_address,
            'PSU-IP-Port': psu_ip_port,
            'PSU-User-Agent': psu_user_agent,
            'PSU-Geo-Location': psu_geo_location,
            'PSU-Accept': psu_accept,
            'PSU-Accept-Charset': psu_accept_charset,
            'PSU-Accept-Encoding': psu_accept_encoding,
            'PSU-Accept-Language': psu_accept_language,
            'PSU-Http-Method': psu_http_method,
            'PSU-Device-ID': psu_device_id
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        _context = self.execute_request(_request)
        self.validate_response(_context)

    def get_returns_account_information_potentially_including_balances_for_one_specific_account(self,
                                                                                                with_balance,
                                                                                                account_id,
                                                                                                accept,
                                                                                                x_request_id,
                                                                                                psu_ip_address,
                                                                                                psu_ip_port,
                                                                                                psu_user_agent,
                                                                                                psu_geo_location,
                                                                                                psu_accept,
                                                                                                psu_accept_charset,
                                                                                                psu_accept_encoding,
                                                                                                psu_accept_language,
                                                                                                psu_http_method,
                                                                                                psu_device_id):
        """Does a GET request to /accounts/{accountId}.

        Returns account information, with or without balances for one specific
        account. The accountId is found using the account list endpoint.

        Args:
            with_balance (string): TODO: type description here. Example: 
            account_id (string): TODO: type description here. Example: 
            accept (string): TODO: type description here. Example: 
            x_request_id (string): TODO: type description here. Example: 
            psu_ip_address (string): TODO: type description here. Example: 
            psu_ip_port (string): TODO: type description here. Example: 
            psu_user_agent (string): TODO: type description here. Example: 
            psu_geo_location (string): TODO: type description here. Example: 
            psu_accept (string): TODO: type description here. Example: 
            psu_accept_charset (string): TODO: type description here. Example:
                            psu_accept_encoding (string): TODO: type description here.
                Example: 
            psu_accept_language (string): TODO: type description here.
                Example: 
            psu_http_method (string): TODO: type description here. Example: 
            psu_device_id (string): TODO: type description here. Example: 

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.get_base_uri()
        _query_builder += '/accounts/{accountId}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'accountId': account_id
        })
        _query_parameters = {
            'withBalance': with_balance
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'X-Request-ID': x_request_id,
            'PSU-IP-Address': psu_ip_address,
            'PSU-IP-Port': psu_ip_port,
            'PSU-User-Agent': psu_user_agent,
            'PSU-Geo-Location': psu_geo_location,
            'PSU-Accept': psu_accept,
            'PSU-Accept-Charset': psu_accept_charset,
            'PSU-Accept-Encoding': psu_accept_encoding,
            'PSU-Accept-Language': psu_accept_language,
            'PSU-Http-Method': psu_http_method,
            'PSU-Device-ID': psu_device_id
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        _context = self.execute_request(_request)
        self.validate_response(_context)
