
# Hexlite - Solver for a fragment of HEX

This is a solver for a fragment of the HEX language and for Python-based plugins
which is based on Python interfaces of Clingo and does not contain any C++ code itself.

The intention is to provide a lightweight system for an easy start with HEX.

The vision is that HEXLite can use existing Python plugins and runs based on
the Clingo python interface, without realizing the full power of HEX.

The system is currently under development and only works for certain programs:
* External atoms with only constant inputs are evaluated during grounding in Gringo
* External atoms with predicate input(s) and no constant outputs are evaluated during solving in a clasp Propagator
* External atoms with predicate input(s) and constant outputs that have a domain predicate can also be evaluated
* Liberal Safety is not implemented
* Properties of external atoms are not used
* If it has a finite grounding, it will terminate, otherwise, it will not - as usual with Gringo
* FLP Check is implemented explicitly and does not work with strong negation and weak constraints
* FLP Check can be deactivated

A manuscript about the system is under preparation.

In case of bugs please report an issue here: https://github.com/hexhex/hexlite/issues

* License: GPL (3.0)
* Author: Peter Sch√ºller <schueller.p@gmail.com>
* Available at PyPi: https://pypi.python.org/pypi/hexlite
* Installation with Conda:

  The easiest way to install `hexlite` is Conda.
  
  First you need to install the `clingo` dependency:

  ```$ conda install -c potassco clingo```

  Then you install hexlite:

  ```$ conda install -c peterschueller hexlite```

  (If you wonder why we do not automatically install clingo as a dependency:
  certain conda restrictions prevent that `clingo` is automatically installed
  unless the potassco channel is **manually** added by the user.)

  Then you test hexlite:

  ```$ hexlite -h```

* Installation with pip:

  This will download, build, and locally install Python-enabled `clingo` modules.

  * If you do not have it: install `python-pip`: for example under Ubuntu via
    
    ```$ sudo apt-get install python-pip```

  * Install hexlite:

    ```$ pip install hexlite --user```

  * Setup Python to use the "Userinstall" environment that allows you
    to install Python programs without overwriting system packages:

    Add the following to your `.profile` or `.bashrc` file:

```
export PYTHONUSERBASE=~/.local/
export PATH=$PATH:~/.local/bin
```

  * Run hexlite the first time. This will help to download and build pyclingo unless it is already usable via `import clingo`:

    ```$ hexlite```

    The first run of hexlite might ask you to enter the sudo password
    to install several packages.
    (You can do this manually. Simply abort and later run `hexlite` again.)

  * Ubuntu 16.04 is tested
  * Debian 8.6 (jessie) is tested
  * Ubuntu 14.04 can not work without manual installation of cmake 3.1 or higher (for buildling clingo)

# Developer Readme

* For developing hexlite without uploading to anaconda repository:

  * Install clingo with conda, but but do **not** install hexlite with conda.

  ```$ conda install -c potassco clingo```

  * checkout hexlite with git

  ```$ git clone git@github.com:hexhex/hexlite.git```

  * install `hexlite` in develop mode into your user-defined Python space:

  ```$ python3 setup.py develop --user```

  * If you want to remove this development installation:

```
$ python3 setup.py develop --uninstall --user
$ rm ~/.local/bin/hexlite
```

  (Installed scripts are not automatically uninstalled.)

* Build and upload new version to pip and conda:
  
  * Update version in `setup.py`.
  * Update version in `meta.yaml`.


  * Build and upload to pypi (maybe check if dist/ contains the right thing before doing the upload)

  ```
  $ python setup.py sdist bdist_wheel
  $ twine upload dist/*
  ```

  * Build and upload to anaconda cloud

  ```
  $ conda build .
  $ anaconda upload
  ```
