Metadata-Version: 2.1
Name: ml-dash
Version: 0.0.1
Summary: A Beautiful Visualization Dashboard For Machine Learning
Home-page: https://github.com/episodeyang/ml_dash
Author: Ge Yang
Author-email: yangge1987@gmail.com
License: UNKNOWN
Keywords: ml_logger,ml_dash,ml-dash,ml dash,dashboard,machine learning,vis_serverlogging,debug,debugging
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: Programming Language :: Python :: 3
Requires-Dist: typing
Requires-Dist: numpy
Requires-Dist: termcolor
Requires-Dist: params-proto
Requires-Dist: cloudpickle
Requires-Dist: japronto
Requires-Dist: uvloop (==0.8.1)
Requires-Dist: requests
Requires-Dist: requests-futures
Requires-Dist: hachiko
Requires-Dist: sanic
Requires-Dist: sanic-cors
Requires-Dist: dill
Requires-Dist: ruamel.yaml

ML-Dash, A Beautiful Visualization Dashboard for Machine Learning
=================================================================

`Downloads <http://pepy.tech/project/ml-dash>`__

ML-Logger makes it easy to:

-  save data locally and remotely, as **binary**, in a transparent
   ``pickle`` file, with the same API and zero configuration.
-  write from 500+ worker containers to a single instrumentation server
-  visualize ``matplotlib.pyplot`` figures from a remote server locally
   with ``logger.savefig('my_figure.png?raw=true')``

And ml-dash does all of these with *minimal configuration* — you can use
the same logging code-block both locally and remotely with no code-block change.

ML-logger is highly performant – the remote writes are asynchronous. For
this reason it doesn’t slow down your training even with 100+ metric
keys.

Why did we built this, you might ask? Because we want to make it easy
for people in ML to use the same logging code-block in all of they projects,
so that it is easy to get started with someone else’s baseline.

Usage
-----

To **install** ``ml_dash``, do:

.. code-block:: bash

   pip install ml-dash

**Skip this if you just want to log locally.** To kickstart a logging
server (Instrument Server), run

.. code-block:: bash

   python -m ml_dash.server

It is the easiest if you setup a long-lived instrument server with a
public ip for yourself or the entire lab.


