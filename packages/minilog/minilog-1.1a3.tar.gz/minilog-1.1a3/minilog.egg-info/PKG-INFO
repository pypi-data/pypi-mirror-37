Metadata-Version: 2.1
Name: minilog
Version: 1.1a3
Summary: Minimalistic wrapper for Python logging.
Home-page: https://github.com/jacebrowning/minilog
Author: Jace Browning
Author-email: jacebrowning@gmail.com
License: MIT
Description: Unix: [![Unix Build Status](https://img.shields.io/travis/jacebrowning/minilog/develop.svg)](https://travis-ci.org/jacebrowning/minilog) Windows: [![Windows Build Status](https://img.shields.io/appveyor/ci/jacebrowning/minilog/develop.svg)](https://ci.appveyor.com/project/jacebrowning/minilog)<br>Metrics: [![Coverage Status](https://img.shields.io/coveralls/jacebrowning/minilog/develop.svg)](https://coveralls.io/r/jacebrowning/minilog) [![Scrutinizer Code Quality](https://img.shields.io/scrutinizer/g/jacebrowning/minilog.svg)](https://scrutinizer-ci.com/g/jacebrowning/minilog/?branch=develop)<br>Usage: [![PyPI Version](https://img.shields.io/pypi/v/minilog.svg)](https://pypi.org/project/minilog)
        
        # Overview
        
        Every project should utilize logging, but for simple use cases, this requires a bit too much boilerplate. Instead of including all of this in your modules:
        
        ```python
        import logging 
        
        logging.basicConfig(
            level=logging.INFO,
            format="%(levelname)s: %(name)s: %(message)s",
        )
        
        log = logging.getLogger(__name__)
        
        def greet(name):
            log.info("Hello, %s!", name)
        ```
        
        with this package you can simply:
        
        ```python
        import log
        
        def greet(name):
            log.info("Hello, %s!", name)
        ```
        
        It will produce the exact same standard library `logging` records behind the scenes.
        
        # Installation
        
        ```sh
        $ pip install minilog
        ```
        
        # Revision History
        
        ## 1.1 (unreleased)
        
        - Added `%(relpath)s` logging format.
        
        ## 1.0 (2018-09-27)
        
        - Initial stable release.
        
        ## 0.5 (2018-09-07)
        
        - Disabled automatic logging configuration when invoked by `pytest`.
        
        ## 0.4 (2018-4-28)
        
        - Added `reset=True` as `init()` option to replace all existing logging handlers.
        - Added `exception` logging API.
        - Added convenience alias: `log.c`, `log.exc`.
        
        ## 0.3.1 (2018-03-30)
        
        - Fixed bug where records were written for disabled levels.
        
        ## 0.3 (2018-03-15)
        
        - Exposed `logging` level constants on the `log` package.
        - Added `log.WARN` as an alias of `log.WARNING`.
        
        ## 0.2.1 (2018-03-04)
        
        - Removed the Python version check on installation.
        
        ## 0.2 (2018-03-03)
        
        - Added method to force logging format: `log.init(format="...")`
        - Added method to silenced named loggers: `log.silence('requests', allow_error=True)`
        - Added convenience aliases: `log.d`, `log.i`, `log.w`, `log.e`
        
        ## 0.1 (2018-03-03)
        
         - Initial release.
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python
Classifier: Topic :: Software Development
Classifier: Topic :: System :: Logging
Description-Content-Type: text/markdown
