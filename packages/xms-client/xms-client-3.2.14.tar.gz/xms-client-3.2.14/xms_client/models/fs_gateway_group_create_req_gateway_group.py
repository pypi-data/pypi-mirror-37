# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.fs_gateway_req import FSGatewayReq  # noqa: F401,E501


class FSGatewayGroupCreateReqGatewayGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'encoding': 'str',
        'fs_gateways': 'list[FSGatewayReq]',
        'name': 'str',
        'security': 'str',
        'types': 'list[str]',
        'vip': 'str'
    }

    attribute_map = {
        'description': 'description',
        'encoding': 'encoding',
        'fs_gateways': 'fs_gateways',
        'name': 'name',
        'security': 'security',
        'types': 'types',
        'vip': 'vip'
    }

    def __init__(self, description=None, encoding=None, fs_gateways=None, name=None, security=None, types=None, vip=None):  # noqa: E501
        """FSGatewayGroupCreateReqGatewayGroup - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._encoding = None
        self._fs_gateways = None
        self._name = None
        self._security = None
        self._types = None
        self._vip = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if encoding is not None:
            self.encoding = encoding
        self.fs_gateways = fs_gateways
        self.name = name
        if security is not None:
            self.security = security
        self.types = types
        self.vip = vip

    @property
    def description(self):
        """Gets the description of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        description of gateway group  # noqa: E501

        :return: The description of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FSGatewayGroupCreateReqGatewayGroup.

        description of gateway group  # noqa: E501

        :param description: The description of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def encoding(self):
        """Gets the encoding of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        encoding format, default is utf8  # noqa: E501

        :return: The encoding of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this FSGatewayGroupCreateReqGatewayGroup.

        encoding format, default is utf8  # noqa: E501

        :param encoding: The encoding of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    @property
    def fs_gateways(self):
        """Gets the fs_gateways of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        file storage gateways list  # noqa: E501

        :return: The fs_gateways of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: list[FSGatewayReq]
        """
        return self._fs_gateways

    @fs_gateways.setter
    def fs_gateways(self, fs_gateways):
        """Sets the fs_gateways of this FSGatewayGroupCreateReqGatewayGroup.

        file storage gateways list  # noqa: E501

        :param fs_gateways: The fs_gateways of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: list[FSGatewayReq]
        """
        if fs_gateways is None:
            raise ValueError("Invalid value for `fs_gateways`, must not be `None`")  # noqa: E501

        self._fs_gateways = fs_gateways

    @property
    def name(self):
        """Gets the name of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        name of gateway group  # noqa: E501

        :return: The name of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FSGatewayGroupCreateReqGatewayGroup.

        name of gateway group  # noqa: E501

        :param name: The name of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def security(self):
        """Gets the security of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        security type  # noqa: E501

        :return: The security of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this FSGatewayGroupCreateReqGatewayGroup.

        security type  # noqa: E501

        :param security: The security of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: str
        """

        self._security = security

    @property
    def types(self):
        """Gets the types of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        types of supported  # noqa: E501

        :return: The types of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this FSGatewayGroupCreateReqGatewayGroup.

        types of supported  # noqa: E501

        :param types: The types of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: list[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")  # noqa: E501

        self._types = types

    @property
    def vip(self):
        """Gets the vip of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501


        :return: The vip of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._vip

    @vip.setter
    def vip(self, vip):
        """Sets the vip of this FSGatewayGroupCreateReqGatewayGroup.


        :param vip: The vip of this FSGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: str
        """
        if vip is None:
            raise ValueError("Invalid value for `vip`, must not be `None`")  # noqa: E501

        self._vip = vip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSGatewayGroupCreateReqGatewayGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
