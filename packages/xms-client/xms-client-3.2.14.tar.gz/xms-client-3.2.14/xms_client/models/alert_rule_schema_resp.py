# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.alert_rule_schema import AlertRuleSchema  # noqa: F401,E501


class AlertRuleSchemaResp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rule_schema_map': 'dict(str, AlertRuleSchema)',
        'trigger_modes': 'list[str]'
    }

    attribute_map = {
        'rule_schema_map': 'rule_schema_map',
        'trigger_modes': 'trigger_modes'
    }

    def __init__(self, rule_schema_map=None, trigger_modes=None):  # noqa: E501
        """AlertRuleSchemaResp - a model defined in Swagger"""  # noqa: E501

        self._rule_schema_map = None
        self._trigger_modes = None
        self.discriminator = None

        self.rule_schema_map = rule_schema_map
        self.trigger_modes = trigger_modes

    @property
    def rule_schema_map(self):
        """Gets the rule_schema_map of this AlertRuleSchemaResp.  # noqa: E501

        rule schemas  # noqa: E501

        :return: The rule_schema_map of this AlertRuleSchemaResp.  # noqa: E501
        :rtype: dict(str, AlertRuleSchema)
        """
        return self._rule_schema_map

    @rule_schema_map.setter
    def rule_schema_map(self, rule_schema_map):
        """Sets the rule_schema_map of this AlertRuleSchemaResp.

        rule schemas  # noqa: E501

        :param rule_schema_map: The rule_schema_map of this AlertRuleSchemaResp.  # noqa: E501
        :type: dict(str, AlertRuleSchema)
        """
        if rule_schema_map is None:
            raise ValueError("Invalid value for `rule_schema_map`, must not be `None`")  # noqa: E501

        self._rule_schema_map = rule_schema_map

    @property
    def trigger_modes(self):
        """Gets the trigger_modes of this AlertRuleSchemaResp.  # noqa: E501

        trigger modes  # noqa: E501

        :return: The trigger_modes of this AlertRuleSchemaResp.  # noqa: E501
        :rtype: list[str]
        """
        return self._trigger_modes

    @trigger_modes.setter
    def trigger_modes(self, trigger_modes):
        """Sets the trigger_modes of this AlertRuleSchemaResp.

        trigger modes  # noqa: E501

        :param trigger_modes: The trigger_modes of this AlertRuleSchemaResp.  # noqa: E501
        :type: list[str]
        """
        if trigger_modes is None:
            raise ValueError("Invalid value for `trigger_modes`, must not be `None`")  # noqa: E501

        self._trigger_modes = trigger_modes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertRuleSchemaResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
