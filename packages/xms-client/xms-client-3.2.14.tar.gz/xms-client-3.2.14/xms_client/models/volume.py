# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.access_path_nestview import AccessPathNestview  # noqa: F401,E501
# from xms_client.models.cloud_platform_nestview import CloudPlatformNestview  # noqa: F401,E501
# from xms_client.models.dp_block_replication_policy_nestview import DpBlockReplicationPolicyNestview  # noqa: F401,E501
# from xms_client.models.dp_block_snapshot_policy_nestview import DpBlockSnapshotPolicyNestview  # noqa: F401,E501
# from xms_client.models.pool_nestview import PoolNestview  # noqa: F401,E501
# from xms_client.models.remote_cluster_nestview import RemoteClusterNestview  # noqa: F401,E501
# from xms_client.models.snapshot_nestview import SnapshotNestview  # noqa: F401,E501
# from xms_client.models.volume_group_nestview import VolumeGroupNestview  # noqa: F401,E501
# from xms_client.models.volume_qos_spec import VolumeQosSpec  # noqa: F401,E501


class Volume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_path': 'AccessPathNestview',
        'action_status': 'str',
        'allocated_size': 'int',
        'block_snapshot_num': 'int',
        'block_volume_group': 'VolumeGroupNestview',
        'client_group_num': 'int',
        'cloud_platform': 'CloudPlatformNestview',
        'create': 'datetime',
        'description': 'str',
        'dp_block_replication_policy': 'DpBlockReplicationPolicyNestview',
        'dp_block_snapshot_policy': 'DpBlockSnapshotPolicyNestview',
        'flattened': 'bool',
        'format': 'int',
        'hidden': 'bool',
        'id': 'int',
        'latest_snapshot_time': 'datetime',
        'migration_stripes': 'int',
        'name': 'str',
        'passive': 'bool',
        'performance_priority': 'int',
        'pool': 'PoolNestview',
        'progress': 'float',
        'qos': 'VolumeQosSpec',
        'qos_enabled': 'bool',
        'remote_cluster': 'RemoteClusterNestview',
        'replication_dest': 'str',
        'replication_pool': 'str',
        'replication_pool_id': 'int',
        'replication_pool_name': 'str',
        'replication_role': 'str',
        'replication_status': 'str',
        'replication_version': 'int',
        'replication_volume': 'str',
        'replication_volume_id': 'int',
        'replication_volume_name': 'str',
        'size': 'int',
        'sn': 'str',
        'snapshot': 'SnapshotNestview',
        'snapshot_replication_pool': 'str',
        'snapshot_replication_pool_id': 'int',
        'snapshot_replication_role': 'str',
        'snapshot_replication_status': 'str',
        'snapshot_replication_volume': 'str',
        'snapshot_replication_volume_id': 'int',
        'status': 'str',
        'update': 'datetime',
        'volume_name': 'str'
    }

    attribute_map = {
        'access_path': 'access_path',
        'action_status': 'action_status',
        'allocated_size': 'allocated_size',
        'block_snapshot_num': 'block_snapshot_num',
        'block_volume_group': 'block_volume_group',
        'client_group_num': 'client_group_num',
        'cloud_platform': 'cloud_platform',
        'create': 'create',
        'description': 'description',
        'dp_block_replication_policy': 'dp_block_replication_policy',
        'dp_block_snapshot_policy': 'dp_block_snapshot_policy',
        'flattened': 'flattened',
        'format': 'format',
        'hidden': 'hidden',
        'id': 'id',
        'latest_snapshot_time': 'latest_snapshot_time',
        'migration_stripes': 'migration_stripes',
        'name': 'name',
        'passive': 'passive',
        'performance_priority': 'performance_priority',
        'pool': 'pool',
        'progress': 'progress',
        'qos': 'qos',
        'qos_enabled': 'qos_enabled',
        'remote_cluster': 'remote_cluster',
        'replication_dest': 'replication_dest',
        'replication_pool': 'replication_pool',
        'replication_pool_id': 'replication_pool_id',
        'replication_pool_name': 'replication_pool_name',
        'replication_role': 'replication_role',
        'replication_status': 'replication_status',
        'replication_version': 'replication_version',
        'replication_volume': 'replication_volume',
        'replication_volume_id': 'replication_volume_id',
        'replication_volume_name': 'replication_volume_name',
        'size': 'size',
        'sn': 'sn',
        'snapshot': 'snapshot',
        'snapshot_replication_pool': 'snapshot_replication_pool',
        'snapshot_replication_pool_id': 'snapshot_replication_pool_id',
        'snapshot_replication_role': 'snapshot_replication_role',
        'snapshot_replication_status': 'snapshot_replication_status',
        'snapshot_replication_volume': 'snapshot_replication_volume',
        'snapshot_replication_volume_id': 'snapshot_replication_volume_id',
        'status': 'status',
        'update': 'update',
        'volume_name': 'volume_name'
    }

    def __init__(self, access_path=None, action_status=None, allocated_size=None, block_snapshot_num=None, block_volume_group=None, client_group_num=None, cloud_platform=None, create=None, description=None, dp_block_replication_policy=None, dp_block_snapshot_policy=None, flattened=None, format=None, hidden=None, id=None, latest_snapshot_time=None, migration_stripes=None, name=None, passive=None, performance_priority=None, pool=None, progress=None, qos=None, qos_enabled=None, remote_cluster=None, replication_dest=None, replication_pool=None, replication_pool_id=None, replication_pool_name=None, replication_role=None, replication_status=None, replication_version=None, replication_volume=None, replication_volume_id=None, replication_volume_name=None, size=None, sn=None, snapshot=None, snapshot_replication_pool=None, snapshot_replication_pool_id=None, snapshot_replication_role=None, snapshot_replication_status=None, snapshot_replication_volume=None, snapshot_replication_volume_id=None, status=None, update=None, volume_name=None):  # noqa: E501
        """Volume - a model defined in Swagger"""  # noqa: E501

        self._access_path = None
        self._action_status = None
        self._allocated_size = None
        self._block_snapshot_num = None
        self._block_volume_group = None
        self._client_group_num = None
        self._cloud_platform = None
        self._create = None
        self._description = None
        self._dp_block_replication_policy = None
        self._dp_block_snapshot_policy = None
        self._flattened = None
        self._format = None
        self._hidden = None
        self._id = None
        self._latest_snapshot_time = None
        self._migration_stripes = None
        self._name = None
        self._passive = None
        self._performance_priority = None
        self._pool = None
        self._progress = None
        self._qos = None
        self._qos_enabled = None
        self._remote_cluster = None
        self._replication_dest = None
        self._replication_pool = None
        self._replication_pool_id = None
        self._replication_pool_name = None
        self._replication_role = None
        self._replication_status = None
        self._replication_version = None
        self._replication_volume = None
        self._replication_volume_id = None
        self._replication_volume_name = None
        self._size = None
        self._sn = None
        self._snapshot = None
        self._snapshot_replication_pool = None
        self._snapshot_replication_pool_id = None
        self._snapshot_replication_role = None
        self._snapshot_replication_status = None
        self._snapshot_replication_volume = None
        self._snapshot_replication_volume_id = None
        self._status = None
        self._update = None
        self._volume_name = None
        self.discriminator = None

        if access_path is not None:
            self.access_path = access_path
        if action_status is not None:
            self.action_status = action_status
        if allocated_size is not None:
            self.allocated_size = allocated_size
        if block_snapshot_num is not None:
            self.block_snapshot_num = block_snapshot_num
        if block_volume_group is not None:
            self.block_volume_group = block_volume_group
        if client_group_num is not None:
            self.client_group_num = client_group_num
        if cloud_platform is not None:
            self.cloud_platform = cloud_platform
        if create is not None:
            self.create = create
        if description is not None:
            self.description = description
        if dp_block_replication_policy is not None:
            self.dp_block_replication_policy = dp_block_replication_policy
        if dp_block_snapshot_policy is not None:
            self.dp_block_snapshot_policy = dp_block_snapshot_policy
        if flattened is not None:
            self.flattened = flattened
        if format is not None:
            self.format = format
        if hidden is not None:
            self.hidden = hidden
        if id is not None:
            self.id = id
        if latest_snapshot_time is not None:
            self.latest_snapshot_time = latest_snapshot_time
        if migration_stripes is not None:
            self.migration_stripes = migration_stripes
        if name is not None:
            self.name = name
        if passive is not None:
            self.passive = passive
        if performance_priority is not None:
            self.performance_priority = performance_priority
        if pool is not None:
            self.pool = pool
        if progress is not None:
            self.progress = progress
        if qos is not None:
            self.qos = qos
        if qos_enabled is not None:
            self.qos_enabled = qos_enabled
        if remote_cluster is not None:
            self.remote_cluster = remote_cluster
        if replication_dest is not None:
            self.replication_dest = replication_dest
        if replication_pool is not None:
            self.replication_pool = replication_pool
        if replication_pool_id is not None:
            self.replication_pool_id = replication_pool_id
        if replication_pool_name is not None:
            self.replication_pool_name = replication_pool_name
        if replication_role is not None:
            self.replication_role = replication_role
        if replication_status is not None:
            self.replication_status = replication_status
        if replication_version is not None:
            self.replication_version = replication_version
        if replication_volume is not None:
            self.replication_volume = replication_volume
        if replication_volume_id is not None:
            self.replication_volume_id = replication_volume_id
        if replication_volume_name is not None:
            self.replication_volume_name = replication_volume_name
        if size is not None:
            self.size = size
        if sn is not None:
            self.sn = sn
        if snapshot is not None:
            self.snapshot = snapshot
        if snapshot_replication_pool is not None:
            self.snapshot_replication_pool = snapshot_replication_pool
        if snapshot_replication_pool_id is not None:
            self.snapshot_replication_pool_id = snapshot_replication_pool_id
        if snapshot_replication_role is not None:
            self.snapshot_replication_role = snapshot_replication_role
        if snapshot_replication_status is not None:
            self.snapshot_replication_status = snapshot_replication_status
        if snapshot_replication_volume is not None:
            self.snapshot_replication_volume = snapshot_replication_volume
        if snapshot_replication_volume_id is not None:
            self.snapshot_replication_volume_id = snapshot_replication_volume_id
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update
        if volume_name is not None:
            self.volume_name = volume_name

    @property
    def access_path(self):
        """Gets the access_path of this Volume.  # noqa: E501


        :return: The access_path of this Volume.  # noqa: E501
        :rtype: AccessPathNestview
        """
        return self._access_path

    @access_path.setter
    def access_path(self, access_path):
        """Sets the access_path of this Volume.


        :param access_path: The access_path of this Volume.  # noqa: E501
        :type: AccessPathNestview
        """

        self._access_path = access_path

    @property
    def action_status(self):
        """Gets the action_status of this Volume.  # noqa: E501


        :return: The action_status of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this Volume.


        :param action_status: The action_status of this Volume.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def allocated_size(self):
        """Gets the allocated_size of this Volume.  # noqa: E501


        :return: The allocated_size of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._allocated_size

    @allocated_size.setter
    def allocated_size(self, allocated_size):
        """Sets the allocated_size of this Volume.


        :param allocated_size: The allocated_size of this Volume.  # noqa: E501
        :type: int
        """

        self._allocated_size = allocated_size

    @property
    def block_snapshot_num(self):
        """Gets the block_snapshot_num of this Volume.  # noqa: E501


        :return: The block_snapshot_num of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._block_snapshot_num

    @block_snapshot_num.setter
    def block_snapshot_num(self, block_snapshot_num):
        """Sets the block_snapshot_num of this Volume.


        :param block_snapshot_num: The block_snapshot_num of this Volume.  # noqa: E501
        :type: int
        """

        self._block_snapshot_num = block_snapshot_num

    @property
    def block_volume_group(self):
        """Gets the block_volume_group of this Volume.  # noqa: E501


        :return: The block_volume_group of this Volume.  # noqa: E501
        :rtype: VolumeGroupNestview
        """
        return self._block_volume_group

    @block_volume_group.setter
    def block_volume_group(self, block_volume_group):
        """Sets the block_volume_group of this Volume.


        :param block_volume_group: The block_volume_group of this Volume.  # noqa: E501
        :type: VolumeGroupNestview
        """

        self._block_volume_group = block_volume_group

    @property
    def client_group_num(self):
        """Gets the client_group_num of this Volume.  # noqa: E501


        :return: The client_group_num of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._client_group_num

    @client_group_num.setter
    def client_group_num(self, client_group_num):
        """Sets the client_group_num of this Volume.


        :param client_group_num: The client_group_num of this Volume.  # noqa: E501
        :type: int
        """

        self._client_group_num = client_group_num

    @property
    def cloud_platform(self):
        """Gets the cloud_platform of this Volume.  # noqa: E501


        :return: The cloud_platform of this Volume.  # noqa: E501
        :rtype: CloudPlatformNestview
        """
        return self._cloud_platform

    @cloud_platform.setter
    def cloud_platform(self, cloud_platform):
        """Sets the cloud_platform of this Volume.


        :param cloud_platform: The cloud_platform of this Volume.  # noqa: E501
        :type: CloudPlatformNestview
        """

        self._cloud_platform = cloud_platform

    @property
    def create(self):
        """Gets the create of this Volume.  # noqa: E501


        :return: The create of this Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this Volume.


        :param create: The create of this Volume.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def description(self):
        """Gets the description of this Volume.  # noqa: E501


        :return: The description of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Volume.


        :param description: The description of this Volume.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dp_block_replication_policy(self):
        """Gets the dp_block_replication_policy of this Volume.  # noqa: E501


        :return: The dp_block_replication_policy of this Volume.  # noqa: E501
        :rtype: DpBlockReplicationPolicyNestview
        """
        return self._dp_block_replication_policy

    @dp_block_replication_policy.setter
    def dp_block_replication_policy(self, dp_block_replication_policy):
        """Sets the dp_block_replication_policy of this Volume.


        :param dp_block_replication_policy: The dp_block_replication_policy of this Volume.  # noqa: E501
        :type: DpBlockReplicationPolicyNestview
        """

        self._dp_block_replication_policy = dp_block_replication_policy

    @property
    def dp_block_snapshot_policy(self):
        """Gets the dp_block_snapshot_policy of this Volume.  # noqa: E501


        :return: The dp_block_snapshot_policy of this Volume.  # noqa: E501
        :rtype: DpBlockSnapshotPolicyNestview
        """
        return self._dp_block_snapshot_policy

    @dp_block_snapshot_policy.setter
    def dp_block_snapshot_policy(self, dp_block_snapshot_policy):
        """Sets the dp_block_snapshot_policy of this Volume.


        :param dp_block_snapshot_policy: The dp_block_snapshot_policy of this Volume.  # noqa: E501
        :type: DpBlockSnapshotPolicyNestview
        """

        self._dp_block_snapshot_policy = dp_block_snapshot_policy

    @property
    def flattened(self):
        """Gets the flattened of this Volume.  # noqa: E501


        :return: The flattened of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._flattened

    @flattened.setter
    def flattened(self, flattened):
        """Sets the flattened of this Volume.


        :param flattened: The flattened of this Volume.  # noqa: E501
        :type: bool
        """

        self._flattened = flattened

    @property
    def format(self):
        """Gets the format of this Volume.  # noqa: E501

        128 or 129 (advanced)  # noqa: E501

        :return: The format of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Volume.

        128 or 129 (advanced)  # noqa: E501

        :param format: The format of this Volume.  # noqa: E501
        :type: int
        """

        self._format = format

    @property
    def hidden(self):
        """Gets the hidden of this Volume.  # noqa: E501


        :return: The hidden of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Volume.


        :param hidden: The hidden of this Volume.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this Volume.  # noqa: E501


        :return: The id of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.


        :param id: The id of this Volume.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def latest_snapshot_time(self):
        """Gets the latest_snapshot_time of this Volume.  # noqa: E501


        :return: The latest_snapshot_time of this Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_snapshot_time

    @latest_snapshot_time.setter
    def latest_snapshot_time(self, latest_snapshot_time):
        """Sets the latest_snapshot_time of this Volume.


        :param latest_snapshot_time: The latest_snapshot_time of this Volume.  # noqa: E501
        :type: datetime
        """

        self._latest_snapshot_time = latest_snapshot_time

    @property
    def migration_stripes(self):
        """Gets the migration_stripes of this Volume.  # noqa: E501


        :return: The migration_stripes of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._migration_stripes

    @migration_stripes.setter
    def migration_stripes(self, migration_stripes):
        """Sets the migration_stripes of this Volume.


        :param migration_stripes: The migration_stripes of this Volume.  # noqa: E501
        :type: int
        """

        self._migration_stripes = migration_stripes

    @property
    def name(self):
        """Gets the name of this Volume.  # noqa: E501


        :return: The name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.


        :param name: The name of this Volume.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def passive(self):
        """Gets the passive of this Volume.  # noqa: E501


        :return: The passive of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._passive

    @passive.setter
    def passive(self, passive):
        """Sets the passive of this Volume.


        :param passive: The passive of this Volume.  # noqa: E501
        :type: bool
        """

        self._passive = passive

    @property
    def performance_priority(self):
        """Gets the performance_priority of this Volume.  # noqa: E501

        0 or 1  # noqa: E501

        :return: The performance_priority of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._performance_priority

    @performance_priority.setter
    def performance_priority(self, performance_priority):
        """Sets the performance_priority of this Volume.

        0 or 1  # noqa: E501

        :param performance_priority: The performance_priority of this Volume.  # noqa: E501
        :type: int
        """

        self._performance_priority = performance_priority

    @property
    def pool(self):
        """Gets the pool of this Volume.  # noqa: E501


        :return: The pool of this Volume.  # noqa: E501
        :rtype: PoolNestview
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this Volume.


        :param pool: The pool of this Volume.  # noqa: E501
        :type: PoolNestview
        """

        self._pool = pool

    @property
    def progress(self):
        """Gets the progress of this Volume.  # noqa: E501


        :return: The progress of this Volume.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Volume.


        :param progress: The progress of this Volume.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def qos(self):
        """Gets the qos of this Volume.  # noqa: E501


        :return: The qos of this Volume.  # noqa: E501
        :rtype: VolumeQosSpec
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this Volume.


        :param qos: The qos of this Volume.  # noqa: E501
        :type: VolumeQosSpec
        """

        self._qos = qos

    @property
    def qos_enabled(self):
        """Gets the qos_enabled of this Volume.  # noqa: E501


        :return: The qos_enabled of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._qos_enabled

    @qos_enabled.setter
    def qos_enabled(self, qos_enabled):
        """Sets the qos_enabled of this Volume.


        :param qos_enabled: The qos_enabled of this Volume.  # noqa: E501
        :type: bool
        """

        self._qos_enabled = qos_enabled

    @property
    def remote_cluster(self):
        """Gets the remote_cluster of this Volume.  # noqa: E501


        :return: The remote_cluster of this Volume.  # noqa: E501
        :rtype: RemoteClusterNestview
        """
        return self._remote_cluster

    @remote_cluster.setter
    def remote_cluster(self, remote_cluster):
        """Sets the remote_cluster of this Volume.


        :param remote_cluster: The remote_cluster of this Volume.  # noqa: E501
        :type: RemoteClusterNestview
        """

        self._remote_cluster = remote_cluster

    @property
    def replication_dest(self):
        """Gets the replication_dest of this Volume.  # noqa: E501


        :return: The replication_dest of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._replication_dest

    @replication_dest.setter
    def replication_dest(self, replication_dest):
        """Sets the replication_dest of this Volume.


        :param replication_dest: The replication_dest of this Volume.  # noqa: E501
        :type: str
        """

        self._replication_dest = replication_dest

    @property
    def replication_pool(self):
        """Gets the replication_pool of this Volume.  # noqa: E501


        :return: The replication_pool of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._replication_pool

    @replication_pool.setter
    def replication_pool(self, replication_pool):
        """Sets the replication_pool of this Volume.


        :param replication_pool: The replication_pool of this Volume.  # noqa: E501
        :type: str
        """

        self._replication_pool = replication_pool

    @property
    def replication_pool_id(self):
        """Gets the replication_pool_id of this Volume.  # noqa: E501


        :return: The replication_pool_id of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._replication_pool_id

    @replication_pool_id.setter
    def replication_pool_id(self, replication_pool_id):
        """Sets the replication_pool_id of this Volume.


        :param replication_pool_id: The replication_pool_id of this Volume.  # noqa: E501
        :type: int
        """

        self._replication_pool_id = replication_pool_id

    @property
    def replication_pool_name(self):
        """Gets the replication_pool_name of this Volume.  # noqa: E501


        :return: The replication_pool_name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._replication_pool_name

    @replication_pool_name.setter
    def replication_pool_name(self, replication_pool_name):
        """Sets the replication_pool_name of this Volume.


        :param replication_pool_name: The replication_pool_name of this Volume.  # noqa: E501
        :type: str
        """

        self._replication_pool_name = replication_pool_name

    @property
    def replication_role(self):
        """Gets the replication_role of this Volume.  # noqa: E501


        :return: The replication_role of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._replication_role

    @replication_role.setter
    def replication_role(self, replication_role):
        """Sets the replication_role of this Volume.


        :param replication_role: The replication_role of this Volume.  # noqa: E501
        :type: str
        """

        self._replication_role = replication_role

    @property
    def replication_status(self):
        """Gets the replication_status of this Volume.  # noqa: E501


        :return: The replication_status of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._replication_status

    @replication_status.setter
    def replication_status(self, replication_status):
        """Sets the replication_status of this Volume.


        :param replication_status: The replication_status of this Volume.  # noqa: E501
        :type: str
        """

        self._replication_status = replication_status

    @property
    def replication_version(self):
        """Gets the replication_version of this Volume.  # noqa: E501


        :return: The replication_version of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._replication_version

    @replication_version.setter
    def replication_version(self, replication_version):
        """Sets the replication_version of this Volume.


        :param replication_version: The replication_version of this Volume.  # noqa: E501
        :type: int
        """

        self._replication_version = replication_version

    @property
    def replication_volume(self):
        """Gets the replication_volume of this Volume.  # noqa: E501


        :return: The replication_volume of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._replication_volume

    @replication_volume.setter
    def replication_volume(self, replication_volume):
        """Sets the replication_volume of this Volume.


        :param replication_volume: The replication_volume of this Volume.  # noqa: E501
        :type: str
        """

        self._replication_volume = replication_volume

    @property
    def replication_volume_id(self):
        """Gets the replication_volume_id of this Volume.  # noqa: E501


        :return: The replication_volume_id of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._replication_volume_id

    @replication_volume_id.setter
    def replication_volume_id(self, replication_volume_id):
        """Sets the replication_volume_id of this Volume.


        :param replication_volume_id: The replication_volume_id of this Volume.  # noqa: E501
        :type: int
        """

        self._replication_volume_id = replication_volume_id

    @property
    def replication_volume_name(self):
        """Gets the replication_volume_name of this Volume.  # noqa: E501


        :return: The replication_volume_name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._replication_volume_name

    @replication_volume_name.setter
    def replication_volume_name(self, replication_volume_name):
        """Sets the replication_volume_name of this Volume.


        :param replication_volume_name: The replication_volume_name of this Volume.  # noqa: E501
        :type: str
        """

        self._replication_volume_name = replication_volume_name

    @property
    def size(self):
        """Gets the size of this Volume.  # noqa: E501


        :return: The size of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Volume.


        :param size: The size of this Volume.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def sn(self):
        """Gets the sn of this Volume.  # noqa: E501


        :return: The sn of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this Volume.


        :param sn: The sn of this Volume.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def snapshot(self):
        """Gets the snapshot of this Volume.  # noqa: E501


        :return: The snapshot of this Volume.  # noqa: E501
        :rtype: SnapshotNestview
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this Volume.


        :param snapshot: The snapshot of this Volume.  # noqa: E501
        :type: SnapshotNestview
        """

        self._snapshot = snapshot

    @property
    def snapshot_replication_pool(self):
        """Gets the snapshot_replication_pool of this Volume.  # noqa: E501


        :return: The snapshot_replication_pool of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_replication_pool

    @snapshot_replication_pool.setter
    def snapshot_replication_pool(self, snapshot_replication_pool):
        """Sets the snapshot_replication_pool of this Volume.


        :param snapshot_replication_pool: The snapshot_replication_pool of this Volume.  # noqa: E501
        :type: str
        """

        self._snapshot_replication_pool = snapshot_replication_pool

    @property
    def snapshot_replication_pool_id(self):
        """Gets the snapshot_replication_pool_id of this Volume.  # noqa: E501


        :return: The snapshot_replication_pool_id of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_replication_pool_id

    @snapshot_replication_pool_id.setter
    def snapshot_replication_pool_id(self, snapshot_replication_pool_id):
        """Sets the snapshot_replication_pool_id of this Volume.


        :param snapshot_replication_pool_id: The snapshot_replication_pool_id of this Volume.  # noqa: E501
        :type: int
        """

        self._snapshot_replication_pool_id = snapshot_replication_pool_id

    @property
    def snapshot_replication_role(self):
        """Gets the snapshot_replication_role of this Volume.  # noqa: E501


        :return: The snapshot_replication_role of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_replication_role

    @snapshot_replication_role.setter
    def snapshot_replication_role(self, snapshot_replication_role):
        """Sets the snapshot_replication_role of this Volume.


        :param snapshot_replication_role: The snapshot_replication_role of this Volume.  # noqa: E501
        :type: str
        """

        self._snapshot_replication_role = snapshot_replication_role

    @property
    def snapshot_replication_status(self):
        """Gets the snapshot_replication_status of this Volume.  # noqa: E501


        :return: The snapshot_replication_status of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_replication_status

    @snapshot_replication_status.setter
    def snapshot_replication_status(self, snapshot_replication_status):
        """Sets the snapshot_replication_status of this Volume.


        :param snapshot_replication_status: The snapshot_replication_status of this Volume.  # noqa: E501
        :type: str
        """

        self._snapshot_replication_status = snapshot_replication_status

    @property
    def snapshot_replication_volume(self):
        """Gets the snapshot_replication_volume of this Volume.  # noqa: E501


        :return: The snapshot_replication_volume of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_replication_volume

    @snapshot_replication_volume.setter
    def snapshot_replication_volume(self, snapshot_replication_volume):
        """Sets the snapshot_replication_volume of this Volume.


        :param snapshot_replication_volume: The snapshot_replication_volume of this Volume.  # noqa: E501
        :type: str
        """

        self._snapshot_replication_volume = snapshot_replication_volume

    @property
    def snapshot_replication_volume_id(self):
        """Gets the snapshot_replication_volume_id of this Volume.  # noqa: E501


        :return: The snapshot_replication_volume_id of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_replication_volume_id

    @snapshot_replication_volume_id.setter
    def snapshot_replication_volume_id(self, snapshot_replication_volume_id):
        """Sets the snapshot_replication_volume_id of this Volume.


        :param snapshot_replication_volume_id: The snapshot_replication_volume_id of this Volume.  # noqa: E501
        :type: int
        """

        self._snapshot_replication_volume_id = snapshot_replication_volume_id

    @property
    def status(self):
        """Gets the status of this Volume.  # noqa: E501


        :return: The status of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Volume.


        :param status: The status of this Volume.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this Volume.  # noqa: E501


        :return: The update of this Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this Volume.


        :param update: The update of this Volume.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def volume_name(self):
        """Gets the volume_name of this Volume.  # noqa: E501


        :return: The volume_name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this Volume.


        :param volume_name: The volume_name of this Volume.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
