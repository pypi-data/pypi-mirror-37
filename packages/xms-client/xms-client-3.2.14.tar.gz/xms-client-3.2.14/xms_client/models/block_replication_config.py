# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class BlockReplicationConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination': 'str',
        'local_gateways': 'list[str]',
        'remote_gateways': 'list[str]'
    }

    attribute_map = {
        'destination': 'destination',
        'local_gateways': 'local_gateways',
        'remote_gateways': 'remote_gateways'
    }

    def __init__(self, destination=None, local_gateways=None, remote_gateways=None):  # noqa: E501
        """BlockReplicationConfig - a model defined in Swagger"""  # noqa: E501

        self._destination = None
        self._local_gateways = None
        self._remote_gateways = None
        self.discriminator = None

        if destination is not None:
            self.destination = destination
        if local_gateways is not None:
            self.local_gateways = local_gateways
        if remote_gateways is not None:
            self.remote_gateways = remote_gateways

    @property
    def destination(self):
        """Gets the destination of this BlockReplicationConfig.  # noqa: E501


        :return: The destination of this BlockReplicationConfig.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this BlockReplicationConfig.


        :param destination: The destination of this BlockReplicationConfig.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def local_gateways(self):
        """Gets the local_gateways of this BlockReplicationConfig.  # noqa: E501


        :return: The local_gateways of this BlockReplicationConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_gateways

    @local_gateways.setter
    def local_gateways(self, local_gateways):
        """Sets the local_gateways of this BlockReplicationConfig.


        :param local_gateways: The local_gateways of this BlockReplicationConfig.  # noqa: E501
        :type: list[str]
        """

        self._local_gateways = local_gateways

    @property
    def remote_gateways(self):
        """Gets the remote_gateways of this BlockReplicationConfig.  # noqa: E501


        :return: The remote_gateways of this BlockReplicationConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._remote_gateways

    @remote_gateways.setter
    def remote_gateways(self, remote_gateways):
        """Sets the remote_gateways of this BlockReplicationConfig.


        :param remote_gateways: The remote_gateways of this BlockReplicationConfig.  # noqa: E501
        :type: list[str]
        """

        self._remote_gateways = remote_gateways

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockReplicationConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
