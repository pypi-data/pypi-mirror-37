# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.dp_backup_block_snapshot import DpBackupBlockSnapshot  # noqa: F401,E501
# from xms_client.models.dp_backup_block_volume import DpBackupBlockVolume  # noqa: F401,E501
# from xms_client.models.dp_backup_cluster import DpBackupCluster  # noqa: F401,E501
# from xms_client.models.dp_gateway_nestview import DpGatewayNestview  # noqa: F401,E501
# from xms_client.models.dp_site_nestview import DpSiteNestview  # noqa: F401,E501
# from xms_client.models.volume_nestview import VolumeNestview  # noqa: F401,E501


class DpBlockSnapshotRecoveryJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup_block_snapshot': 'DpBackupBlockSnapshot',
        'backup_block_volume': 'DpBackupBlockVolume',
        'backup_cluster': 'DpBackupCluster',
        'block_volume': 'VolumeNestview',
        'create': 'datetime',
        'dp_gateway': 'DpGatewayNestview',
        'dp_site': 'DpSiteNestview',
        'finished_at': 'datetime',
        'id': 'int',
        'progress': 'float',
        'resource_type': 'str',
        'started_at': 'datetime',
        'status': 'str',
        'update': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'backup_block_snapshot': 'backup_block_snapshot',
        'backup_block_volume': 'backup_block_volume',
        'backup_cluster': 'backup_cluster',
        'block_volume': 'block_volume',
        'create': 'create',
        'dp_gateway': 'dp_gateway',
        'dp_site': 'dp_site',
        'finished_at': 'finished_at',
        'id': 'id',
        'progress': 'progress',
        'resource_type': 'resource_type',
        'started_at': 'started_at',
        'status': 'status',
        'update': 'update',
        'updated_at': 'updated_at'
    }

    def __init__(self, backup_block_snapshot=None, backup_block_volume=None, backup_cluster=None, block_volume=None, create=None, dp_gateway=None, dp_site=None, finished_at=None, id=None, progress=None, resource_type=None, started_at=None, status=None, update=None, updated_at=None):  # noqa: E501
        """DpBlockSnapshotRecoveryJob - a model defined in Swagger"""  # noqa: E501

        self._backup_block_snapshot = None
        self._backup_block_volume = None
        self._backup_cluster = None
        self._block_volume = None
        self._create = None
        self._dp_gateway = None
        self._dp_site = None
        self._finished_at = None
        self._id = None
        self._progress = None
        self._resource_type = None
        self._started_at = None
        self._status = None
        self._update = None
        self._updated_at = None
        self.discriminator = None

        if backup_block_snapshot is not None:
            self.backup_block_snapshot = backup_block_snapshot
        if backup_block_volume is not None:
            self.backup_block_volume = backup_block_volume
        if backup_cluster is not None:
            self.backup_cluster = backup_cluster
        if block_volume is not None:
            self.block_volume = block_volume
        if create is not None:
            self.create = create
        if dp_gateway is not None:
            self.dp_gateway = dp_gateway
        if dp_site is not None:
            self.dp_site = dp_site
        if finished_at is not None:
            self.finished_at = finished_at
        if id is not None:
            self.id = id
        if progress is not None:
            self.progress = progress
        if resource_type is not None:
            self.resource_type = resource_type
        if started_at is not None:
            self.started_at = started_at
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def backup_block_snapshot(self):
        """Gets the backup_block_snapshot of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The backup_block_snapshot of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: DpBackupBlockSnapshot
        """
        return self._backup_block_snapshot

    @backup_block_snapshot.setter
    def backup_block_snapshot(self, backup_block_snapshot):
        """Sets the backup_block_snapshot of this DpBlockSnapshotRecoveryJob.


        :param backup_block_snapshot: The backup_block_snapshot of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: DpBackupBlockSnapshot
        """

        self._backup_block_snapshot = backup_block_snapshot

    @property
    def backup_block_volume(self):
        """Gets the backup_block_volume of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The backup_block_volume of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: DpBackupBlockVolume
        """
        return self._backup_block_volume

    @backup_block_volume.setter
    def backup_block_volume(self, backup_block_volume):
        """Sets the backup_block_volume of this DpBlockSnapshotRecoveryJob.


        :param backup_block_volume: The backup_block_volume of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: DpBackupBlockVolume
        """

        self._backup_block_volume = backup_block_volume

    @property
    def backup_cluster(self):
        """Gets the backup_cluster of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The backup_cluster of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: DpBackupCluster
        """
        return self._backup_cluster

    @backup_cluster.setter
    def backup_cluster(self, backup_cluster):
        """Sets the backup_cluster of this DpBlockSnapshotRecoveryJob.


        :param backup_cluster: The backup_cluster of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: DpBackupCluster
        """

        self._backup_cluster = backup_cluster

    @property
    def block_volume(self):
        """Gets the block_volume of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The block_volume of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: VolumeNestview
        """
        return self._block_volume

    @block_volume.setter
    def block_volume(self, block_volume):
        """Sets the block_volume of this DpBlockSnapshotRecoveryJob.


        :param block_volume: The block_volume of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: VolumeNestview
        """

        self._block_volume = block_volume

    @property
    def create(self):
        """Gets the create of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The create of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DpBlockSnapshotRecoveryJob.


        :param create: The create of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def dp_gateway(self):
        """Gets the dp_gateway of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The dp_gateway of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: DpGatewayNestview
        """
        return self._dp_gateway

    @dp_gateway.setter
    def dp_gateway(self, dp_gateway):
        """Sets the dp_gateway of this DpBlockSnapshotRecoveryJob.


        :param dp_gateway: The dp_gateway of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: DpGatewayNestview
        """

        self._dp_gateway = dp_gateway

    @property
    def dp_site(self):
        """Gets the dp_site of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The dp_site of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: DpSiteNestview
        """
        return self._dp_site

    @dp_site.setter
    def dp_site(self, dp_site):
        """Sets the dp_site of this DpBlockSnapshotRecoveryJob.


        :param dp_site: The dp_site of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: DpSiteNestview
        """

        self._dp_site = dp_site

    @property
    def finished_at(self):
        """Gets the finished_at of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The finished_at of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this DpBlockSnapshotRecoveryJob.


        :param finished_at: The finished_at of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def id(self):
        """Gets the id of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The id of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DpBlockSnapshotRecoveryJob.


        :param id: The id of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def progress(self):
        """Gets the progress of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The progress of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DpBlockSnapshotRecoveryJob.


        :param progress: The progress of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def resource_type(self):
        """Gets the resource_type of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The resource_type of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DpBlockSnapshotRecoveryJob.


        :param resource_type: The resource_type of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def started_at(self):
        """Gets the started_at of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The started_at of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this DpBlockSnapshotRecoveryJob.


        :param started_at: The started_at of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The status of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DpBlockSnapshotRecoveryJob.


        :param status: The status of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The update of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DpBlockSnapshotRecoveryJob.


        :param update: The update of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def updated_at(self):
        """Gets the updated_at of this DpBlockSnapshotRecoveryJob.  # noqa: E501


        :return: The updated_at of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DpBlockSnapshotRecoveryJob.


        :param updated_at: The updated_at of this DpBlockSnapshotRecoveryJob.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DpBlockSnapshotRecoveryJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
