# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.pool_nestview import PoolNestview  # noqa: F401,E501


class ObjectStorage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'create': 'datetime',
        'id': 'int',
        'index_pool': 'PoolNestview',
        'lifecycle_end_on': 'str',
        'lifecycle_start_on': 'str',
        'name': 'str',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'action_status': 'action_status',
        'create': 'create',
        'id': 'id',
        'index_pool': 'index_pool',
        'lifecycle_end_on': 'lifecycle_end_on',
        'lifecycle_start_on': 'lifecycle_start_on',
        'name': 'name',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, action_status=None, create=None, id=None, index_pool=None, lifecycle_end_on=None, lifecycle_start_on=None, name=None, status=None, update=None):  # noqa: E501
        """ObjectStorage - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._create = None
        self._id = None
        self._index_pool = None
        self._lifecycle_end_on = None
        self._lifecycle_start_on = None
        self._name = None
        self._status = None
        self._update = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if create is not None:
            self.create = create
        if id is not None:
            self.id = id
        if index_pool is not None:
            self.index_pool = index_pool
        if lifecycle_end_on is not None:
            self.lifecycle_end_on = lifecycle_end_on
        if lifecycle_start_on is not None:
            self.lifecycle_start_on = lifecycle_start_on
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def action_status(self):
        """Gets the action_status of this ObjectStorage.  # noqa: E501


        :return: The action_status of this ObjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this ObjectStorage.


        :param action_status: The action_status of this ObjectStorage.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def create(self):
        """Gets the create of this ObjectStorage.  # noqa: E501


        :return: The create of this ObjectStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this ObjectStorage.


        :param create: The create of this ObjectStorage.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def id(self):
        """Gets the id of this ObjectStorage.  # noqa: E501


        :return: The id of this ObjectStorage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjectStorage.


        :param id: The id of this ObjectStorage.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def index_pool(self):
        """Gets the index_pool of this ObjectStorage.  # noqa: E501


        :return: The index_pool of this ObjectStorage.  # noqa: E501
        :rtype: PoolNestview
        """
        return self._index_pool

    @index_pool.setter
    def index_pool(self, index_pool):
        """Sets the index_pool of this ObjectStorage.


        :param index_pool: The index_pool of this ObjectStorage.  # noqa: E501
        :type: PoolNestview
        """

        self._index_pool = index_pool

    @property
    def lifecycle_end_on(self):
        """Gets the lifecycle_end_on of this ObjectStorage.  # noqa: E501


        :return: The lifecycle_end_on of this ObjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._lifecycle_end_on

    @lifecycle_end_on.setter
    def lifecycle_end_on(self, lifecycle_end_on):
        """Sets the lifecycle_end_on of this ObjectStorage.


        :param lifecycle_end_on: The lifecycle_end_on of this ObjectStorage.  # noqa: E501
        :type: str
        """

        self._lifecycle_end_on = lifecycle_end_on

    @property
    def lifecycle_start_on(self):
        """Gets the lifecycle_start_on of this ObjectStorage.  # noqa: E501


        :return: The lifecycle_start_on of this ObjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._lifecycle_start_on

    @lifecycle_start_on.setter
    def lifecycle_start_on(self, lifecycle_start_on):
        """Sets the lifecycle_start_on of this ObjectStorage.


        :param lifecycle_start_on: The lifecycle_start_on of this ObjectStorage.  # noqa: E501
        :type: str
        """

        self._lifecycle_start_on = lifecycle_start_on

    @property
    def name(self):
        """Gets the name of this ObjectStorage.  # noqa: E501


        :return: The name of this ObjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectStorage.


        :param name: The name of this ObjectStorage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this ObjectStorage.  # noqa: E501


        :return: The status of this ObjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ObjectStorage.


        :param status: The status of this ObjectStorage.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this ObjectStorage.  # noqa: E501


        :return: The update of this ObjectStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this ObjectStorage.


        :param update: The update of this ObjectStorage.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStorage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
