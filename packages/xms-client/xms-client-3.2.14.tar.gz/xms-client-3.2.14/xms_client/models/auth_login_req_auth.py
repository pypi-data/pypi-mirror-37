# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class AuthLoginReqAuth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'password': 'str',
        'platform': 'str',
        'sign': 'str',
        'timestamp': 'str',
        'token': 'str'
    }

    attribute_map = {
        'name': 'name',
        'password': 'password',
        'platform': 'platform',
        'sign': 'sign',
        'timestamp': 'timestamp',
        'token': 'token'
    }

    def __init__(self, name=None, password=None, platform=None, sign=None, timestamp=None, token=None):  # noqa: E501
        """AuthLoginReqAuth - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._password = None
        self._platform = None
        self._sign = None
        self._timestamp = None
        self._token = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if platform is not None:
            self.platform = platform
        if sign is not None:
            self.sign = sign
        if timestamp is not None:
            self.timestamp = timestamp
        if token is not None:
            self.token = token

    @property
    def name(self):
        """Gets the name of this AuthLoginReqAuth.  # noqa: E501

        user name or email for auth  # noqa: E501

        :return: The name of this AuthLoginReqAuth.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthLoginReqAuth.

        user name or email for auth  # noqa: E501

        :param name: The name of this AuthLoginReqAuth.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this AuthLoginReqAuth.  # noqa: E501

        password for auth  # noqa: E501

        :return: The password of this AuthLoginReqAuth.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AuthLoginReqAuth.

        password for auth  # noqa: E501

        :param password: The password of this AuthLoginReqAuth.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def platform(self):
        """Gets the platform of this AuthLoginReqAuth.  # noqa: E501

        uuid of the identity platform  # noqa: E501

        :return: The platform of this AuthLoginReqAuth.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AuthLoginReqAuth.

        uuid of the identity platform  # noqa: E501

        :param platform: The platform of this AuthLoginReqAuth.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def sign(self):
        """Gets the sign of this AuthLoginReqAuth.  # noqa: E501

        signature of login request  # noqa: E501

        :return: The sign of this AuthLoginReqAuth.  # noqa: E501
        :rtype: str
        """
        return self._sign

    @sign.setter
    def sign(self, sign):
        """Sets the sign of this AuthLoginReqAuth.

        signature of login request  # noqa: E501

        :param sign: The sign of this AuthLoginReqAuth.  # noqa: E501
        :type: str
        """

        self._sign = sign

    @property
    def timestamp(self):
        """Gets the timestamp of this AuthLoginReqAuth.  # noqa: E501

        timestamp of platform token  # noqa: E501

        :return: The timestamp of this AuthLoginReqAuth.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuthLoginReqAuth.

        timestamp of platform token  # noqa: E501

        :param timestamp: The timestamp of this AuthLoginReqAuth.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def token(self):
        """Gets the token of this AuthLoginReqAuth.  # noqa: E501

        token of the identity platform  # noqa: E501

        :return: The token of this AuthLoginReqAuth.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AuthLoginReqAuth.

        token of the identity platform  # noqa: E501

        :param token: The token of this AuthLoginReqAuth.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthLoginReqAuth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
