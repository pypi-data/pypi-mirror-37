# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DpBlockSnapshotPlanUpdateReqPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compressed': 'bool',
        'deduplicated': 'bool',
        'encrypted': 'bool',
        'full_backup_interval': 'int',
        'operation_interval': 'int',
        'retained_max': 'int'
    }

    attribute_map = {
        'compressed': 'compressed',
        'deduplicated': 'deduplicated',
        'encrypted': 'encrypted',
        'full_backup_interval': 'full_backup_interval',
        'operation_interval': 'operation_interval',
        'retained_max': 'retained_max'
    }

    def __init__(self, compressed=None, deduplicated=None, encrypted=None, full_backup_interval=None, operation_interval=None, retained_max=None):  # noqa: E501
        """DpBlockSnapshotPlanUpdateReqPlan - a model defined in Swagger"""  # noqa: E501

        self._compressed = None
        self._deduplicated = None
        self._encrypted = None
        self._full_backup_interval = None
        self._operation_interval = None
        self._retained_max = None
        self.discriminator = None

        if compressed is not None:
            self.compressed = compressed
        if deduplicated is not None:
            self.deduplicated = deduplicated
        if encrypted is not None:
            self.encrypted = encrypted
        if full_backup_interval is not None:
            self.full_backup_interval = full_backup_interval
        if operation_interval is not None:
            self.operation_interval = operation_interval
        if retained_max is not None:
            self.retained_max = retained_max

    @property
    def compressed(self):
        """Gets the compressed of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501

        compressed switch  # noqa: E501

        :return: The compressed of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :rtype: bool
        """
        return self._compressed

    @compressed.setter
    def compressed(self, compressed):
        """Sets the compressed of this DpBlockSnapshotPlanUpdateReqPlan.

        compressed switch  # noqa: E501

        :param compressed: The compressed of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :type: bool
        """

        self._compressed = compressed

    @property
    def deduplicated(self):
        """Gets the deduplicated of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501

        deduplicated switch  # noqa: E501

        :return: The deduplicated of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :rtype: bool
        """
        return self._deduplicated

    @deduplicated.setter
    def deduplicated(self, deduplicated):
        """Sets the deduplicated of this DpBlockSnapshotPlanUpdateReqPlan.

        deduplicated switch  # noqa: E501

        :param deduplicated: The deduplicated of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :type: bool
        """

        self._deduplicated = deduplicated

    @property
    def encrypted(self):
        """Gets the encrypted of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501

        encrypted switch  # noqa: E501

        :return: The encrypted of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this DpBlockSnapshotPlanUpdateReqPlan.

        encrypted switch  # noqa: E501

        :param encrypted: The encrypted of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def full_backup_interval(self):
        """Gets the full_backup_interval of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501

        full backup interval  # noqa: E501

        :return: The full_backup_interval of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :rtype: int
        """
        return self._full_backup_interval

    @full_backup_interval.setter
    def full_backup_interval(self, full_backup_interval):
        """Sets the full_backup_interval of this DpBlockSnapshotPlanUpdateReqPlan.

        full backup interval  # noqa: E501

        :param full_backup_interval: The full_backup_interval of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :type: int
        """

        self._full_backup_interval = full_backup_interval

    @property
    def operation_interval(self):
        """Gets the operation_interval of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501

        operation taken after how many snapshots  # noqa: E501

        :return: The operation_interval of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :rtype: int
        """
        return self._operation_interval

    @operation_interval.setter
    def operation_interval(self, operation_interval):
        """Sets the operation_interval of this DpBlockSnapshotPlanUpdateReqPlan.

        operation taken after how many snapshots  # noqa: E501

        :param operation_interval: The operation_interval of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :type: int
        """

        self._operation_interval = operation_interval

    @property
    def retained_max(self):
        """Gets the retained_max of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501

        snapshot retained max number  # noqa: E501

        :return: The retained_max of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :rtype: int
        """
        return self._retained_max

    @retained_max.setter
    def retained_max(self, retained_max):
        """Sets the retained_max of this DpBlockSnapshotPlanUpdateReqPlan.

        snapshot retained max number  # noqa: E501

        :param retained_max: The retained_max of this DpBlockSnapshotPlanUpdateReqPlan.  # noqa: E501
        :type: int
        """

        self._retained_max = retained_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DpBlockSnapshotPlanUpdateReqPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
