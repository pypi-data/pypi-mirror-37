# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.volume_group_snapshot_nestview import VolumeGroupSnapshotNestview  # noqa: F401,E501


class VolumeGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'block_volume_group_snapshot': 'VolumeGroupSnapshotNestview',
        'block_volume_group_snapshot_num': 'int',
        'block_volume_num': 'int',
        'create': 'datetime',
        'description': 'str',
        'flattened': 'bool',
        'id': 'int',
        'latest_snapshot_time': 'datetime',
        'name': 'str',
        'progress': 'float',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'action_status': 'action_status',
        'block_volume_group_snapshot': 'block_volume_group_snapshot',
        'block_volume_group_snapshot_num': 'block_volume_group_snapshot_num',
        'block_volume_num': 'block_volume_num',
        'create': 'create',
        'description': 'description',
        'flattened': 'flattened',
        'id': 'id',
        'latest_snapshot_time': 'latest_snapshot_time',
        'name': 'name',
        'progress': 'progress',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, action_status=None, block_volume_group_snapshot=None, block_volume_group_snapshot_num=None, block_volume_num=None, create=None, description=None, flattened=None, id=None, latest_snapshot_time=None, name=None, progress=None, status=None, update=None):  # noqa: E501
        """VolumeGroup - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._block_volume_group_snapshot = None
        self._block_volume_group_snapshot_num = None
        self._block_volume_num = None
        self._create = None
        self._description = None
        self._flattened = None
        self._id = None
        self._latest_snapshot_time = None
        self._name = None
        self._progress = None
        self._status = None
        self._update = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if block_volume_group_snapshot is not None:
            self.block_volume_group_snapshot = block_volume_group_snapshot
        if block_volume_group_snapshot_num is not None:
            self.block_volume_group_snapshot_num = block_volume_group_snapshot_num
        if block_volume_num is not None:
            self.block_volume_num = block_volume_num
        if create is not None:
            self.create = create
        if description is not None:
            self.description = description
        if flattened is not None:
            self.flattened = flattened
        if id is not None:
            self.id = id
        if latest_snapshot_time is not None:
            self.latest_snapshot_time = latest_snapshot_time
        if name is not None:
            self.name = name
        if progress is not None:
            self.progress = progress
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def action_status(self):
        """Gets the action_status of this VolumeGroup.  # noqa: E501


        :return: The action_status of this VolumeGroup.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this VolumeGroup.


        :param action_status: The action_status of this VolumeGroup.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def block_volume_group_snapshot(self):
        """Gets the block_volume_group_snapshot of this VolumeGroup.  # noqa: E501


        :return: The block_volume_group_snapshot of this VolumeGroup.  # noqa: E501
        :rtype: VolumeGroupSnapshotNestview
        """
        return self._block_volume_group_snapshot

    @block_volume_group_snapshot.setter
    def block_volume_group_snapshot(self, block_volume_group_snapshot):
        """Sets the block_volume_group_snapshot of this VolumeGroup.


        :param block_volume_group_snapshot: The block_volume_group_snapshot of this VolumeGroup.  # noqa: E501
        :type: VolumeGroupSnapshotNestview
        """

        self._block_volume_group_snapshot = block_volume_group_snapshot

    @property
    def block_volume_group_snapshot_num(self):
        """Gets the block_volume_group_snapshot_num of this VolumeGroup.  # noqa: E501


        :return: The block_volume_group_snapshot_num of this VolumeGroup.  # noqa: E501
        :rtype: int
        """
        return self._block_volume_group_snapshot_num

    @block_volume_group_snapshot_num.setter
    def block_volume_group_snapshot_num(self, block_volume_group_snapshot_num):
        """Sets the block_volume_group_snapshot_num of this VolumeGroup.


        :param block_volume_group_snapshot_num: The block_volume_group_snapshot_num of this VolumeGroup.  # noqa: E501
        :type: int
        """

        self._block_volume_group_snapshot_num = block_volume_group_snapshot_num

    @property
    def block_volume_num(self):
        """Gets the block_volume_num of this VolumeGroup.  # noqa: E501


        :return: The block_volume_num of this VolumeGroup.  # noqa: E501
        :rtype: int
        """
        return self._block_volume_num

    @block_volume_num.setter
    def block_volume_num(self, block_volume_num):
        """Sets the block_volume_num of this VolumeGroup.


        :param block_volume_num: The block_volume_num of this VolumeGroup.  # noqa: E501
        :type: int
        """

        self._block_volume_num = block_volume_num

    @property
    def create(self):
        """Gets the create of this VolumeGroup.  # noqa: E501


        :return: The create of this VolumeGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this VolumeGroup.


        :param create: The create of this VolumeGroup.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def description(self):
        """Gets the description of this VolumeGroup.  # noqa: E501


        :return: The description of this VolumeGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeGroup.


        :param description: The description of this VolumeGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def flattened(self):
        """Gets the flattened of this VolumeGroup.  # noqa: E501


        :return: The flattened of this VolumeGroup.  # noqa: E501
        :rtype: bool
        """
        return self._flattened

    @flattened.setter
    def flattened(self, flattened):
        """Sets the flattened of this VolumeGroup.


        :param flattened: The flattened of this VolumeGroup.  # noqa: E501
        :type: bool
        """

        self._flattened = flattened

    @property
    def id(self):
        """Gets the id of this VolumeGroup.  # noqa: E501


        :return: The id of this VolumeGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VolumeGroup.


        :param id: The id of this VolumeGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def latest_snapshot_time(self):
        """Gets the latest_snapshot_time of this VolumeGroup.  # noqa: E501


        :return: The latest_snapshot_time of this VolumeGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_snapshot_time

    @latest_snapshot_time.setter
    def latest_snapshot_time(self, latest_snapshot_time):
        """Sets the latest_snapshot_time of this VolumeGroup.


        :param latest_snapshot_time: The latest_snapshot_time of this VolumeGroup.  # noqa: E501
        :type: datetime
        """

        self._latest_snapshot_time = latest_snapshot_time

    @property
    def name(self):
        """Gets the name of this VolumeGroup.  # noqa: E501


        :return: The name of this VolumeGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeGroup.


        :param name: The name of this VolumeGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def progress(self):
        """Gets the progress of this VolumeGroup.  # noqa: E501


        :return: The progress of this VolumeGroup.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this VolumeGroup.


        :param progress: The progress of this VolumeGroup.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this VolumeGroup.  # noqa: E501


        :return: The status of this VolumeGroup.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VolumeGroup.


        :param status: The status of this VolumeGroup.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this VolumeGroup.  # noqa: E501


        :return: The update of this VolumeGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this VolumeGroup.


        :param update: The update of this VolumeGroup.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
