# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.client import Client  # noqa: F401,E501
# from xms_client.models.host_nestview import HostNestview  # noqa: F401,E501
# from xms_client.models.lun_nestview import LunNestview  # noqa: F401,E501
# from xms_client.models.target_nestview import TargetNestview  # noqa: F401,E501
# from xms_client.models.volume_nestview import VolumeNestview  # noqa: F401,E501


class ClientLunMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_volume': 'VolumeNestview',
        'client': 'Client',
        'create': 'datetime',
        'host': 'HostNestview',
        'id': 'int',
        'lun': 'LunNestview',
        'status': 'str',
        'target': 'TargetNestview',
        'update': 'datetime'
    }

    attribute_map = {
        'block_volume': 'block_volume',
        'client': 'client',
        'create': 'create',
        'host': 'host',
        'id': 'id',
        'lun': 'lun',
        'status': 'status',
        'target': 'target',
        'update': 'update'
    }

    def __init__(self, block_volume=None, client=None, create=None, host=None, id=None, lun=None, status=None, target=None, update=None):  # noqa: E501
        """ClientLunMapping - a model defined in Swagger"""  # noqa: E501

        self._block_volume = None
        self._client = None
        self._create = None
        self._host = None
        self._id = None
        self._lun = None
        self._status = None
        self._target = None
        self._update = None
        self.discriminator = None

        if block_volume is not None:
            self.block_volume = block_volume
        if client is not None:
            self.client = client
        if create is not None:
            self.create = create
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if lun is not None:
            self.lun = lun
        if status is not None:
            self.status = status
        if target is not None:
            self.target = target
        if update is not None:
            self.update = update

    @property
    def block_volume(self):
        """Gets the block_volume of this ClientLunMapping.  # noqa: E501


        :return: The block_volume of this ClientLunMapping.  # noqa: E501
        :rtype: VolumeNestview
        """
        return self._block_volume

    @block_volume.setter
    def block_volume(self, block_volume):
        """Sets the block_volume of this ClientLunMapping.


        :param block_volume: The block_volume of this ClientLunMapping.  # noqa: E501
        :type: VolumeNestview
        """

        self._block_volume = block_volume

    @property
    def client(self):
        """Gets the client of this ClientLunMapping.  # noqa: E501


        :return: The client of this ClientLunMapping.  # noqa: E501
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ClientLunMapping.


        :param client: The client of this ClientLunMapping.  # noqa: E501
        :type: Client
        """

        self._client = client

    @property
    def create(self):
        """Gets the create of this ClientLunMapping.  # noqa: E501


        :return: The create of this ClientLunMapping.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this ClientLunMapping.


        :param create: The create of this ClientLunMapping.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def host(self):
        """Gets the host of this ClientLunMapping.  # noqa: E501


        :return: The host of this ClientLunMapping.  # noqa: E501
        :rtype: HostNestview
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ClientLunMapping.


        :param host: The host of this ClientLunMapping.  # noqa: E501
        :type: HostNestview
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this ClientLunMapping.  # noqa: E501


        :return: The id of this ClientLunMapping.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientLunMapping.


        :param id: The id of this ClientLunMapping.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lun(self):
        """Gets the lun of this ClientLunMapping.  # noqa: E501


        :return: The lun of this ClientLunMapping.  # noqa: E501
        :rtype: LunNestview
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this ClientLunMapping.


        :param lun: The lun of this ClientLunMapping.  # noqa: E501
        :type: LunNestview
        """

        self._lun = lun

    @property
    def status(self):
        """Gets the status of this ClientLunMapping.  # noqa: E501


        :return: The status of this ClientLunMapping.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClientLunMapping.


        :param status: The status of this ClientLunMapping.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def target(self):
        """Gets the target of this ClientLunMapping.  # noqa: E501


        :return: The target of this ClientLunMapping.  # noqa: E501
        :rtype: TargetNestview
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ClientLunMapping.


        :param target: The target of this ClientLunMapping.  # noqa: E501
        :type: TargetNestview
        """

        self._target = target

    @property
    def update(self):
        """Gets the update of this ClientLunMapping.  # noqa: E501


        :return: The update of this ClientLunMapping.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this ClientLunMapping.


        :param update: The update of this ClientLunMapping.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientLunMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
