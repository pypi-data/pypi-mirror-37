# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class AlertStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'critical_num': 'int',
        'error_num': 'int',
        'info_num': 'int',
        'warning_num': 'int'
    }

    attribute_map = {
        'critical_num': 'critical_num',
        'error_num': 'error_num',
        'info_num': 'info_num',
        'warning_num': 'warning_num'
    }

    def __init__(self, critical_num=None, error_num=None, info_num=None, warning_num=None):  # noqa: E501
        """AlertStats - a model defined in Swagger"""  # noqa: E501

        self._critical_num = None
        self._error_num = None
        self._info_num = None
        self._warning_num = None
        self.discriminator = None

        if critical_num is not None:
            self.critical_num = critical_num
        if error_num is not None:
            self.error_num = error_num
        if info_num is not None:
            self.info_num = info_num
        if warning_num is not None:
            self.warning_num = warning_num

    @property
    def critical_num(self):
        """Gets the critical_num of this AlertStats.  # noqa: E501


        :return: The critical_num of this AlertStats.  # noqa: E501
        :rtype: int
        """
        return self._critical_num

    @critical_num.setter
    def critical_num(self, critical_num):
        """Sets the critical_num of this AlertStats.


        :param critical_num: The critical_num of this AlertStats.  # noqa: E501
        :type: int
        """

        self._critical_num = critical_num

    @property
    def error_num(self):
        """Gets the error_num of this AlertStats.  # noqa: E501


        :return: The error_num of this AlertStats.  # noqa: E501
        :rtype: int
        """
        return self._error_num

    @error_num.setter
    def error_num(self, error_num):
        """Sets the error_num of this AlertStats.


        :param error_num: The error_num of this AlertStats.  # noqa: E501
        :type: int
        """

        self._error_num = error_num

    @property
    def info_num(self):
        """Gets the info_num of this AlertStats.  # noqa: E501


        :return: The info_num of this AlertStats.  # noqa: E501
        :rtype: int
        """
        return self._info_num

    @info_num.setter
    def info_num(self, info_num):
        """Sets the info_num of this AlertStats.


        :param info_num: The info_num of this AlertStats.  # noqa: E501
        :type: int
        """

        self._info_num = info_num

    @property
    def warning_num(self):
        """Gets the warning_num of this AlertStats.  # noqa: E501


        :return: The warning_num of this AlertStats.  # noqa: E501
        :rtype: int
        """
        return self._warning_num

    @warning_num.setter
    def warning_num(self, warning_num):
        """Sets the warning_num of this AlertStats.


        :param warning_num: The warning_num of this AlertStats.  # noqa: E501
        :type: int
        """

        self._warning_num = warning_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
