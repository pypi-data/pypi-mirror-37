# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class HostStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_switch_ps': 'float',
        'cpu_util': 'float',
        'create': 'datetime',
        'interrupts_ps': 'float',
        'load15min': 'float',
        'load1min': 'float',
        'load5min': 'float',
        'mem_usage_percent': 'float',
        'meta_docker_used_kbyte': 'float',
        'meta_elasticsearch_used_kbyte': 'float',
        'meta_etcd_used_kbyte': 'float',
        'meta_log_used_kbyte': 'float',
        'meta_mon_used_kbyte': 'float',
        'meta_postgres_used_kbyte': 'float',
        'meta_prometheus_used_kbyte': 'float',
        'network_drop_pps': 'float',
        'network_error_pps': 'float',
        'network_rx_bandwidth_kbyte': 'float',
        'network_rx_drop_pps': 'float',
        'network_rx_error_pps': 'float',
        'network_rx_pps': 'float',
        'network_tx_bandwidth_kbyte': 'float',
        'network_tx_drop_pps': 'float',
        'network_tx_error_pps': 'float',
        'network_tx_pps': 'float',
        'page_paging_ps': 'float'
    }

    attribute_map = {
        'context_switch_ps': 'context_switch_ps',
        'cpu_util': 'cpu_util',
        'create': 'create',
        'interrupts_ps': 'interrupts_ps',
        'load15min': 'load15min',
        'load1min': 'load1min',
        'load5min': 'load5min',
        'mem_usage_percent': 'mem_usage_percent',
        'meta_docker_used_kbyte': 'meta_docker_used_kbyte',
        'meta_elasticsearch_used_kbyte': 'meta_elasticsearch_used_kbyte',
        'meta_etcd_used_kbyte': 'meta_etcd_used_kbyte',
        'meta_log_used_kbyte': 'meta_log_used_kbyte',
        'meta_mon_used_kbyte': 'meta_mon_used_kbyte',
        'meta_postgres_used_kbyte': 'meta_postgres_used_kbyte',
        'meta_prometheus_used_kbyte': 'meta_prometheus_used_kbyte',
        'network_drop_pps': 'network_drop_pps',
        'network_error_pps': 'network_error_pps',
        'network_rx_bandwidth_kbyte': 'network_rx_bandwidth_kbyte',
        'network_rx_drop_pps': 'network_rx_drop_pps',
        'network_rx_error_pps': 'network_rx_error_pps',
        'network_rx_pps': 'network_rx_pps',
        'network_tx_bandwidth_kbyte': 'network_tx_bandwidth_kbyte',
        'network_tx_drop_pps': 'network_tx_drop_pps',
        'network_tx_error_pps': 'network_tx_error_pps',
        'network_tx_pps': 'network_tx_pps',
        'page_paging_ps': 'page_paging_ps'
    }

    def __init__(self, context_switch_ps=None, cpu_util=None, create=None, interrupts_ps=None, load15min=None, load1min=None, load5min=None, mem_usage_percent=None, meta_docker_used_kbyte=None, meta_elasticsearch_used_kbyte=None, meta_etcd_used_kbyte=None, meta_log_used_kbyte=None, meta_mon_used_kbyte=None, meta_postgres_used_kbyte=None, meta_prometheus_used_kbyte=None, network_drop_pps=None, network_error_pps=None, network_rx_bandwidth_kbyte=None, network_rx_drop_pps=None, network_rx_error_pps=None, network_rx_pps=None, network_tx_bandwidth_kbyte=None, network_tx_drop_pps=None, network_tx_error_pps=None, network_tx_pps=None, page_paging_ps=None):  # noqa: E501
        """HostStat - a model defined in Swagger"""  # noqa: E501

        self._context_switch_ps = None
        self._cpu_util = None
        self._create = None
        self._interrupts_ps = None
        self._load15min = None
        self._load1min = None
        self._load5min = None
        self._mem_usage_percent = None
        self._meta_docker_used_kbyte = None
        self._meta_elasticsearch_used_kbyte = None
        self._meta_etcd_used_kbyte = None
        self._meta_log_used_kbyte = None
        self._meta_mon_used_kbyte = None
        self._meta_postgres_used_kbyte = None
        self._meta_prometheus_used_kbyte = None
        self._network_drop_pps = None
        self._network_error_pps = None
        self._network_rx_bandwidth_kbyte = None
        self._network_rx_drop_pps = None
        self._network_rx_error_pps = None
        self._network_rx_pps = None
        self._network_tx_bandwidth_kbyte = None
        self._network_tx_drop_pps = None
        self._network_tx_error_pps = None
        self._network_tx_pps = None
        self._page_paging_ps = None
        self.discriminator = None

        if context_switch_ps is not None:
            self.context_switch_ps = context_switch_ps
        if cpu_util is not None:
            self.cpu_util = cpu_util
        if create is not None:
            self.create = create
        if interrupts_ps is not None:
            self.interrupts_ps = interrupts_ps
        if load15min is not None:
            self.load15min = load15min
        if load1min is not None:
            self.load1min = load1min
        if load5min is not None:
            self.load5min = load5min
        if mem_usage_percent is not None:
            self.mem_usage_percent = mem_usage_percent
        if meta_docker_used_kbyte is not None:
            self.meta_docker_used_kbyte = meta_docker_used_kbyte
        if meta_elasticsearch_used_kbyte is not None:
            self.meta_elasticsearch_used_kbyte = meta_elasticsearch_used_kbyte
        if meta_etcd_used_kbyte is not None:
            self.meta_etcd_used_kbyte = meta_etcd_used_kbyte
        if meta_log_used_kbyte is not None:
            self.meta_log_used_kbyte = meta_log_used_kbyte
        if meta_mon_used_kbyte is not None:
            self.meta_mon_used_kbyte = meta_mon_used_kbyte
        if meta_postgres_used_kbyte is not None:
            self.meta_postgres_used_kbyte = meta_postgres_used_kbyte
        if meta_prometheus_used_kbyte is not None:
            self.meta_prometheus_used_kbyte = meta_prometheus_used_kbyte
        if network_drop_pps is not None:
            self.network_drop_pps = network_drop_pps
        if network_error_pps is not None:
            self.network_error_pps = network_error_pps
        if network_rx_bandwidth_kbyte is not None:
            self.network_rx_bandwidth_kbyte = network_rx_bandwidth_kbyte
        if network_rx_drop_pps is not None:
            self.network_rx_drop_pps = network_rx_drop_pps
        if network_rx_error_pps is not None:
            self.network_rx_error_pps = network_rx_error_pps
        if network_rx_pps is not None:
            self.network_rx_pps = network_rx_pps
        if network_tx_bandwidth_kbyte is not None:
            self.network_tx_bandwidth_kbyte = network_tx_bandwidth_kbyte
        if network_tx_drop_pps is not None:
            self.network_tx_drop_pps = network_tx_drop_pps
        if network_tx_error_pps is not None:
            self.network_tx_error_pps = network_tx_error_pps
        if network_tx_pps is not None:
            self.network_tx_pps = network_tx_pps
        if page_paging_ps is not None:
            self.page_paging_ps = page_paging_ps

    @property
    def context_switch_ps(self):
        """Gets the context_switch_ps of this HostStat.  # noqa: E501


        :return: The context_switch_ps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._context_switch_ps

    @context_switch_ps.setter
    def context_switch_ps(self, context_switch_ps):
        """Sets the context_switch_ps of this HostStat.


        :param context_switch_ps: The context_switch_ps of this HostStat.  # noqa: E501
        :type: float
        """

        self._context_switch_ps = context_switch_ps

    @property
    def cpu_util(self):
        """Gets the cpu_util of this HostStat.  # noqa: E501


        :return: The cpu_util of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._cpu_util

    @cpu_util.setter
    def cpu_util(self, cpu_util):
        """Sets the cpu_util of this HostStat.


        :param cpu_util: The cpu_util of this HostStat.  # noqa: E501
        :type: float
        """

        self._cpu_util = cpu_util

    @property
    def create(self):
        """Gets the create of this HostStat.  # noqa: E501


        :return: The create of this HostStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this HostStat.


        :param create: The create of this HostStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def interrupts_ps(self):
        """Gets the interrupts_ps of this HostStat.  # noqa: E501


        :return: The interrupts_ps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._interrupts_ps

    @interrupts_ps.setter
    def interrupts_ps(self, interrupts_ps):
        """Sets the interrupts_ps of this HostStat.


        :param interrupts_ps: The interrupts_ps of this HostStat.  # noqa: E501
        :type: float
        """

        self._interrupts_ps = interrupts_ps

    @property
    def load15min(self):
        """Gets the load15min of this HostStat.  # noqa: E501


        :return: The load15min of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._load15min

    @load15min.setter
    def load15min(self, load15min):
        """Sets the load15min of this HostStat.


        :param load15min: The load15min of this HostStat.  # noqa: E501
        :type: float
        """

        self._load15min = load15min

    @property
    def load1min(self):
        """Gets the load1min of this HostStat.  # noqa: E501


        :return: The load1min of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._load1min

    @load1min.setter
    def load1min(self, load1min):
        """Sets the load1min of this HostStat.


        :param load1min: The load1min of this HostStat.  # noqa: E501
        :type: float
        """

        self._load1min = load1min

    @property
    def load5min(self):
        """Gets the load5min of this HostStat.  # noqa: E501


        :return: The load5min of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._load5min

    @load5min.setter
    def load5min(self, load5min):
        """Sets the load5min of this HostStat.


        :param load5min: The load5min of this HostStat.  # noqa: E501
        :type: float
        """

        self._load5min = load5min

    @property
    def mem_usage_percent(self):
        """Gets the mem_usage_percent of this HostStat.  # noqa: E501


        :return: The mem_usage_percent of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._mem_usage_percent

    @mem_usage_percent.setter
    def mem_usage_percent(self, mem_usage_percent):
        """Sets the mem_usage_percent of this HostStat.


        :param mem_usage_percent: The mem_usage_percent of this HostStat.  # noqa: E501
        :type: float
        """

        self._mem_usage_percent = mem_usage_percent

    @property
    def meta_docker_used_kbyte(self):
        """Gets the meta_docker_used_kbyte of this HostStat.  # noqa: E501


        :return: The meta_docker_used_kbyte of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._meta_docker_used_kbyte

    @meta_docker_used_kbyte.setter
    def meta_docker_used_kbyte(self, meta_docker_used_kbyte):
        """Sets the meta_docker_used_kbyte of this HostStat.


        :param meta_docker_used_kbyte: The meta_docker_used_kbyte of this HostStat.  # noqa: E501
        :type: float
        """

        self._meta_docker_used_kbyte = meta_docker_used_kbyte

    @property
    def meta_elasticsearch_used_kbyte(self):
        """Gets the meta_elasticsearch_used_kbyte of this HostStat.  # noqa: E501


        :return: The meta_elasticsearch_used_kbyte of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._meta_elasticsearch_used_kbyte

    @meta_elasticsearch_used_kbyte.setter
    def meta_elasticsearch_used_kbyte(self, meta_elasticsearch_used_kbyte):
        """Sets the meta_elasticsearch_used_kbyte of this HostStat.


        :param meta_elasticsearch_used_kbyte: The meta_elasticsearch_used_kbyte of this HostStat.  # noqa: E501
        :type: float
        """

        self._meta_elasticsearch_used_kbyte = meta_elasticsearch_used_kbyte

    @property
    def meta_etcd_used_kbyte(self):
        """Gets the meta_etcd_used_kbyte of this HostStat.  # noqa: E501


        :return: The meta_etcd_used_kbyte of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._meta_etcd_used_kbyte

    @meta_etcd_used_kbyte.setter
    def meta_etcd_used_kbyte(self, meta_etcd_used_kbyte):
        """Sets the meta_etcd_used_kbyte of this HostStat.


        :param meta_etcd_used_kbyte: The meta_etcd_used_kbyte of this HostStat.  # noqa: E501
        :type: float
        """

        self._meta_etcd_used_kbyte = meta_etcd_used_kbyte

    @property
    def meta_log_used_kbyte(self):
        """Gets the meta_log_used_kbyte of this HostStat.  # noqa: E501


        :return: The meta_log_used_kbyte of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._meta_log_used_kbyte

    @meta_log_used_kbyte.setter
    def meta_log_used_kbyte(self, meta_log_used_kbyte):
        """Sets the meta_log_used_kbyte of this HostStat.


        :param meta_log_used_kbyte: The meta_log_used_kbyte of this HostStat.  # noqa: E501
        :type: float
        """

        self._meta_log_used_kbyte = meta_log_used_kbyte

    @property
    def meta_mon_used_kbyte(self):
        """Gets the meta_mon_used_kbyte of this HostStat.  # noqa: E501


        :return: The meta_mon_used_kbyte of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._meta_mon_used_kbyte

    @meta_mon_used_kbyte.setter
    def meta_mon_used_kbyte(self, meta_mon_used_kbyte):
        """Sets the meta_mon_used_kbyte of this HostStat.


        :param meta_mon_used_kbyte: The meta_mon_used_kbyte of this HostStat.  # noqa: E501
        :type: float
        """

        self._meta_mon_used_kbyte = meta_mon_used_kbyte

    @property
    def meta_postgres_used_kbyte(self):
        """Gets the meta_postgres_used_kbyte of this HostStat.  # noqa: E501


        :return: The meta_postgres_used_kbyte of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._meta_postgres_used_kbyte

    @meta_postgres_used_kbyte.setter
    def meta_postgres_used_kbyte(self, meta_postgres_used_kbyte):
        """Sets the meta_postgres_used_kbyte of this HostStat.


        :param meta_postgres_used_kbyte: The meta_postgres_used_kbyte of this HostStat.  # noqa: E501
        :type: float
        """

        self._meta_postgres_used_kbyte = meta_postgres_used_kbyte

    @property
    def meta_prometheus_used_kbyte(self):
        """Gets the meta_prometheus_used_kbyte of this HostStat.  # noqa: E501


        :return: The meta_prometheus_used_kbyte of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._meta_prometheus_used_kbyte

    @meta_prometheus_used_kbyte.setter
    def meta_prometheus_used_kbyte(self, meta_prometheus_used_kbyte):
        """Sets the meta_prometheus_used_kbyte of this HostStat.


        :param meta_prometheus_used_kbyte: The meta_prometheus_used_kbyte of this HostStat.  # noqa: E501
        :type: float
        """

        self._meta_prometheus_used_kbyte = meta_prometheus_used_kbyte

    @property
    def network_drop_pps(self):
        """Gets the network_drop_pps of this HostStat.  # noqa: E501


        :return: The network_drop_pps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._network_drop_pps

    @network_drop_pps.setter
    def network_drop_pps(self, network_drop_pps):
        """Sets the network_drop_pps of this HostStat.


        :param network_drop_pps: The network_drop_pps of this HostStat.  # noqa: E501
        :type: float
        """

        self._network_drop_pps = network_drop_pps

    @property
    def network_error_pps(self):
        """Gets the network_error_pps of this HostStat.  # noqa: E501


        :return: The network_error_pps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._network_error_pps

    @network_error_pps.setter
    def network_error_pps(self, network_error_pps):
        """Sets the network_error_pps of this HostStat.


        :param network_error_pps: The network_error_pps of this HostStat.  # noqa: E501
        :type: float
        """

        self._network_error_pps = network_error_pps

    @property
    def network_rx_bandwidth_kbyte(self):
        """Gets the network_rx_bandwidth_kbyte of this HostStat.  # noqa: E501


        :return: The network_rx_bandwidth_kbyte of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._network_rx_bandwidth_kbyte

    @network_rx_bandwidth_kbyte.setter
    def network_rx_bandwidth_kbyte(self, network_rx_bandwidth_kbyte):
        """Sets the network_rx_bandwidth_kbyte of this HostStat.


        :param network_rx_bandwidth_kbyte: The network_rx_bandwidth_kbyte of this HostStat.  # noqa: E501
        :type: float
        """

        self._network_rx_bandwidth_kbyte = network_rx_bandwidth_kbyte

    @property
    def network_rx_drop_pps(self):
        """Gets the network_rx_drop_pps of this HostStat.  # noqa: E501


        :return: The network_rx_drop_pps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._network_rx_drop_pps

    @network_rx_drop_pps.setter
    def network_rx_drop_pps(self, network_rx_drop_pps):
        """Sets the network_rx_drop_pps of this HostStat.


        :param network_rx_drop_pps: The network_rx_drop_pps of this HostStat.  # noqa: E501
        :type: float
        """

        self._network_rx_drop_pps = network_rx_drop_pps

    @property
    def network_rx_error_pps(self):
        """Gets the network_rx_error_pps of this HostStat.  # noqa: E501


        :return: The network_rx_error_pps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._network_rx_error_pps

    @network_rx_error_pps.setter
    def network_rx_error_pps(self, network_rx_error_pps):
        """Sets the network_rx_error_pps of this HostStat.


        :param network_rx_error_pps: The network_rx_error_pps of this HostStat.  # noqa: E501
        :type: float
        """

        self._network_rx_error_pps = network_rx_error_pps

    @property
    def network_rx_pps(self):
        """Gets the network_rx_pps of this HostStat.  # noqa: E501


        :return: The network_rx_pps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._network_rx_pps

    @network_rx_pps.setter
    def network_rx_pps(self, network_rx_pps):
        """Sets the network_rx_pps of this HostStat.


        :param network_rx_pps: The network_rx_pps of this HostStat.  # noqa: E501
        :type: float
        """

        self._network_rx_pps = network_rx_pps

    @property
    def network_tx_bandwidth_kbyte(self):
        """Gets the network_tx_bandwidth_kbyte of this HostStat.  # noqa: E501


        :return: The network_tx_bandwidth_kbyte of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._network_tx_bandwidth_kbyte

    @network_tx_bandwidth_kbyte.setter
    def network_tx_bandwidth_kbyte(self, network_tx_bandwidth_kbyte):
        """Sets the network_tx_bandwidth_kbyte of this HostStat.


        :param network_tx_bandwidth_kbyte: The network_tx_bandwidth_kbyte of this HostStat.  # noqa: E501
        :type: float
        """

        self._network_tx_bandwidth_kbyte = network_tx_bandwidth_kbyte

    @property
    def network_tx_drop_pps(self):
        """Gets the network_tx_drop_pps of this HostStat.  # noqa: E501


        :return: The network_tx_drop_pps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._network_tx_drop_pps

    @network_tx_drop_pps.setter
    def network_tx_drop_pps(self, network_tx_drop_pps):
        """Sets the network_tx_drop_pps of this HostStat.


        :param network_tx_drop_pps: The network_tx_drop_pps of this HostStat.  # noqa: E501
        :type: float
        """

        self._network_tx_drop_pps = network_tx_drop_pps

    @property
    def network_tx_error_pps(self):
        """Gets the network_tx_error_pps of this HostStat.  # noqa: E501


        :return: The network_tx_error_pps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._network_tx_error_pps

    @network_tx_error_pps.setter
    def network_tx_error_pps(self, network_tx_error_pps):
        """Sets the network_tx_error_pps of this HostStat.


        :param network_tx_error_pps: The network_tx_error_pps of this HostStat.  # noqa: E501
        :type: float
        """

        self._network_tx_error_pps = network_tx_error_pps

    @property
    def network_tx_pps(self):
        """Gets the network_tx_pps of this HostStat.  # noqa: E501


        :return: The network_tx_pps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._network_tx_pps

    @network_tx_pps.setter
    def network_tx_pps(self, network_tx_pps):
        """Sets the network_tx_pps of this HostStat.


        :param network_tx_pps: The network_tx_pps of this HostStat.  # noqa: E501
        :type: float
        """

        self._network_tx_pps = network_tx_pps

    @property
    def page_paging_ps(self):
        """Gets the page_paging_ps of this HostStat.  # noqa: E501


        :return: The page_paging_ps of this HostStat.  # noqa: E501
        :rtype: float
        """
        return self._page_paging_ps

    @page_paging_ps.setter
    def page_paging_ps(self, page_paging_ps):
        """Sets the page_paging_ps of this HostStat.


        :param page_paging_ps: The page_paging_ps of this HostStat.  # noqa: E501
        :type: float
        """

        self._page_paging_ps = page_paging_ps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
