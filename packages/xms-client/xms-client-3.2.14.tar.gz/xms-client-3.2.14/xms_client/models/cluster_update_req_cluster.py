# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class ClusterUpdateReqCluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disk_lighting_mode': 'str',
        'down_out_interval': 'int',
        'name': 'str',
        'os_gateway_oplog_switch': 'bool',
        'stats_reserved_days': 'int'
    }

    attribute_map = {
        'disk_lighting_mode': 'disk_lighting_mode',
        'down_out_interval': 'down_out_interval',
        'name': 'name',
        'os_gateway_oplog_switch': 'os_gateway_oplog_switch',
        'stats_reserved_days': 'stats_reserved_days'
    }

    def __init__(self, disk_lighting_mode=None, down_out_interval=None, name=None, os_gateway_oplog_switch=None, stats_reserved_days=None):  # noqa: E501
        """ClusterUpdateReqCluster - a model defined in Swagger"""  # noqa: E501

        self._disk_lighting_mode = None
        self._down_out_interval = None
        self._name = None
        self._os_gateway_oplog_switch = None
        self._stats_reserved_days = None
        self.discriminator = None

        if disk_lighting_mode is not None:
            self.disk_lighting_mode = disk_lighting_mode
        if down_out_interval is not None:
            self.down_out_interval = down_out_interval
        if name is not None:
            self.name = name
        if os_gateway_oplog_switch is not None:
            self.os_gateway_oplog_switch = os_gateway_oplog_switch
        if stats_reserved_days is not None:
            self.stats_reserved_days = stats_reserved_days

    @property
    def disk_lighting_mode(self):
        """Gets the disk_lighting_mode of this ClusterUpdateReqCluster.  # noqa: E501

        disk lighting mode  # noqa: E501

        :return: The disk_lighting_mode of this ClusterUpdateReqCluster.  # noqa: E501
        :rtype: str
        """
        return self._disk_lighting_mode

    @disk_lighting_mode.setter
    def disk_lighting_mode(self, disk_lighting_mode):
        """Sets the disk_lighting_mode of this ClusterUpdateReqCluster.

        disk lighting mode  # noqa: E501

        :param disk_lighting_mode: The disk_lighting_mode of this ClusterUpdateReqCluster.  # noqa: E501
        :type: str
        """

        self._disk_lighting_mode = disk_lighting_mode

    @property
    def down_out_interval(self):
        """Gets the down_out_interval of this ClusterUpdateReqCluster.  # noqa: E501

        down out interval  # noqa: E501

        :return: The down_out_interval of this ClusterUpdateReqCluster.  # noqa: E501
        :rtype: int
        """
        return self._down_out_interval

    @down_out_interval.setter
    def down_out_interval(self, down_out_interval):
        """Sets the down_out_interval of this ClusterUpdateReqCluster.

        down out interval  # noqa: E501

        :param down_out_interval: The down_out_interval of this ClusterUpdateReqCluster.  # noqa: E501
        :type: int
        """

        self._down_out_interval = down_out_interval

    @property
    def name(self):
        """Gets the name of this ClusterUpdateReqCluster.  # noqa: E501

        disk lighting mode  # noqa: E501

        :return: The name of this ClusterUpdateReqCluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterUpdateReqCluster.

        disk lighting mode  # noqa: E501

        :param name: The name of this ClusterUpdateReqCluster.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def os_gateway_oplog_switch(self):
        """Gets the os_gateway_oplog_switch of this ClusterUpdateReqCluster.  # noqa: E501

        os gateway oplog switch  # noqa: E501

        :return: The os_gateway_oplog_switch of this ClusterUpdateReqCluster.  # noqa: E501
        :rtype: bool
        """
        return self._os_gateway_oplog_switch

    @os_gateway_oplog_switch.setter
    def os_gateway_oplog_switch(self, os_gateway_oplog_switch):
        """Sets the os_gateway_oplog_switch of this ClusterUpdateReqCluster.

        os gateway oplog switch  # noqa: E501

        :param os_gateway_oplog_switch: The os_gateway_oplog_switch of this ClusterUpdateReqCluster.  # noqa: E501
        :type: bool
        """

        self._os_gateway_oplog_switch = os_gateway_oplog_switch

    @property
    def stats_reserved_days(self):
        """Gets the stats_reserved_days of this ClusterUpdateReqCluster.  # noqa: E501

        stats reserve days  # noqa: E501

        :return: The stats_reserved_days of this ClusterUpdateReqCluster.  # noqa: E501
        :rtype: int
        """
        return self._stats_reserved_days

    @stats_reserved_days.setter
    def stats_reserved_days(self, stats_reserved_days):
        """Sets the stats_reserved_days of this ClusterUpdateReqCluster.

        stats reserve days  # noqa: E501

        :param stats_reserved_days: The stats_reserved_days of this ClusterUpdateReqCluster.  # noqa: E501
        :type: int
        """

        self._stats_reserved_days = stats_reserved_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterUpdateReqCluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
