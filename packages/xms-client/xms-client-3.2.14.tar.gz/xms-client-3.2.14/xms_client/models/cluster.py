# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.access_token import AccessToken  # noqa: F401,E501


class Cluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'AccessToken',
        'access_url': 'str',
        'create': 'datetime',
        'disk_lighting_mode': 'str',
        'down_out_interval': 'int',
        'fs_id': 'str',
        'id': 'int',
        'maintained': 'bool',
        'name': 'str',
        'os_gateway_oplog_switch': 'bool',
        'snmp_enabled': 'bool',
        'stats_reserved_days': 'int',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'access_token': 'access_token',
        'access_url': 'access_url',
        'create': 'create',
        'disk_lighting_mode': 'disk_lighting_mode',
        'down_out_interval': 'down_out_interval',
        'fs_id': 'fs_id',
        'id': 'id',
        'maintained': 'maintained',
        'name': 'name',
        'os_gateway_oplog_switch': 'os_gateway_oplog_switch',
        'snmp_enabled': 'snmp_enabled',
        'stats_reserved_days': 'stats_reserved_days',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, access_token=None, access_url=None, create=None, disk_lighting_mode=None, down_out_interval=None, fs_id=None, id=None, maintained=None, name=None, os_gateway_oplog_switch=None, snmp_enabled=None, stats_reserved_days=None, status=None, update=None):  # noqa: E501
        """Cluster - a model defined in Swagger"""  # noqa: E501

        self._access_token = None
        self._access_url = None
        self._create = None
        self._disk_lighting_mode = None
        self._down_out_interval = None
        self._fs_id = None
        self._id = None
        self._maintained = None
        self._name = None
        self._os_gateway_oplog_switch = None
        self._snmp_enabled = None
        self._stats_reserved_days = None
        self._status = None
        self._update = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if access_url is not None:
            self.access_url = access_url
        if create is not None:
            self.create = create
        if disk_lighting_mode is not None:
            self.disk_lighting_mode = disk_lighting_mode
        if down_out_interval is not None:
            self.down_out_interval = down_out_interval
        if fs_id is not None:
            self.fs_id = fs_id
        if id is not None:
            self.id = id
        if maintained is not None:
            self.maintained = maintained
        if name is not None:
            self.name = name
        if os_gateway_oplog_switch is not None:
            self.os_gateway_oplog_switch = os_gateway_oplog_switch
        if snmp_enabled is not None:
            self.snmp_enabled = snmp_enabled
        if stats_reserved_days is not None:
            self.stats_reserved_days = stats_reserved_days
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def access_token(self):
        """Gets the access_token of this Cluster.  # noqa: E501


        :return: The access_token of this Cluster.  # noqa: E501
        :rtype: AccessToken
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this Cluster.


        :param access_token: The access_token of this Cluster.  # noqa: E501
        :type: AccessToken
        """

        self._access_token = access_token

    @property
    def access_url(self):
        """Gets the access_url of this Cluster.  # noqa: E501


        :return: The access_url of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._access_url

    @access_url.setter
    def access_url(self, access_url):
        """Sets the access_url of this Cluster.


        :param access_url: The access_url of this Cluster.  # noqa: E501
        :type: str
        """

        self._access_url = access_url

    @property
    def create(self):
        """Gets the create of this Cluster.  # noqa: E501


        :return: The create of this Cluster.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this Cluster.


        :param create: The create of this Cluster.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def disk_lighting_mode(self):
        """Gets the disk_lighting_mode of this Cluster.  # noqa: E501


        :return: The disk_lighting_mode of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._disk_lighting_mode

    @disk_lighting_mode.setter
    def disk_lighting_mode(self, disk_lighting_mode):
        """Sets the disk_lighting_mode of this Cluster.


        :param disk_lighting_mode: The disk_lighting_mode of this Cluster.  # noqa: E501
        :type: str
        """

        self._disk_lighting_mode = disk_lighting_mode

    @property
    def down_out_interval(self):
        """Gets the down_out_interval of this Cluster.  # noqa: E501


        :return: The down_out_interval of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._down_out_interval

    @down_out_interval.setter
    def down_out_interval(self, down_out_interval):
        """Sets the down_out_interval of this Cluster.


        :param down_out_interval: The down_out_interval of this Cluster.  # noqa: E501
        :type: int
        """

        self._down_out_interval = down_out_interval

    @property
    def fs_id(self):
        """Gets the fs_id of this Cluster.  # noqa: E501


        :return: The fs_id of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._fs_id

    @fs_id.setter
    def fs_id(self, fs_id):
        """Sets the fs_id of this Cluster.


        :param fs_id: The fs_id of this Cluster.  # noqa: E501
        :type: str
        """

        self._fs_id = fs_id

    @property
    def id(self):
        """Gets the id of this Cluster.  # noqa: E501


        :return: The id of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cluster.


        :param id: The id of this Cluster.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def maintained(self):
        """Gets the maintained of this Cluster.  # noqa: E501


        :return: The maintained of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._maintained

    @maintained.setter
    def maintained(self, maintained):
        """Sets the maintained of this Cluster.


        :param maintained: The maintained of this Cluster.  # noqa: E501
        :type: bool
        """

        self._maintained = maintained

    @property
    def name(self):
        """Gets the name of this Cluster.  # noqa: E501


        :return: The name of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.


        :param name: The name of this Cluster.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def os_gateway_oplog_switch(self):
        """Gets the os_gateway_oplog_switch of this Cluster.  # noqa: E501


        :return: The os_gateway_oplog_switch of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._os_gateway_oplog_switch

    @os_gateway_oplog_switch.setter
    def os_gateway_oplog_switch(self, os_gateway_oplog_switch):
        """Sets the os_gateway_oplog_switch of this Cluster.


        :param os_gateway_oplog_switch: The os_gateway_oplog_switch of this Cluster.  # noqa: E501
        :type: bool
        """

        self._os_gateway_oplog_switch = os_gateway_oplog_switch

    @property
    def snmp_enabled(self):
        """Gets the snmp_enabled of this Cluster.  # noqa: E501


        :return: The snmp_enabled of this Cluster.  # noqa: E501
        :rtype: bool
        """
        return self._snmp_enabled

    @snmp_enabled.setter
    def snmp_enabled(self, snmp_enabled):
        """Sets the snmp_enabled of this Cluster.


        :param snmp_enabled: The snmp_enabled of this Cluster.  # noqa: E501
        :type: bool
        """

        self._snmp_enabled = snmp_enabled

    @property
    def stats_reserved_days(self):
        """Gets the stats_reserved_days of this Cluster.  # noqa: E501


        :return: The stats_reserved_days of this Cluster.  # noqa: E501
        :rtype: int
        """
        return self._stats_reserved_days

    @stats_reserved_days.setter
    def stats_reserved_days(self, stats_reserved_days):
        """Sets the stats_reserved_days of this Cluster.


        :param stats_reserved_days: The stats_reserved_days of this Cluster.  # noqa: E501
        :type: int
        """

        self._stats_reserved_days = stats_reserved_days

    @property
    def status(self):
        """Gets the status of this Cluster.  # noqa: E501


        :return: The status of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Cluster.


        :param status: The status of this Cluster.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this Cluster.  # noqa: E501


        :return: The update of this Cluster.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this Cluster.


        :param update: The update of this Cluster.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
