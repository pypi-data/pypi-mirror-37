# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class SSLCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'description': 'str',
        'enabled': 'bool',
        'force_https': 'bool',
        'id': 'int',
        'issuer': 'str',
        'name': 'str',
        'not_after': 'datetime',
        'not_before': 'datetime',
        'permitted_dns_domains': 'str',
        'public_key_algorithm': 'str',
        'raw_certificate': 'str',
        'signature_algorithm': 'str',
        'status': 'str',
        'subject': 'str',
        'type': 'str',
        'update': 'datetime',
        'version': 'int'
    }

    attribute_map = {
        'create': 'create',
        'description': 'description',
        'enabled': 'enabled',
        'force_https': 'force_https',
        'id': 'id',
        'issuer': 'issuer',
        'name': 'name',
        'not_after': 'not_after',
        'not_before': 'not_before',
        'permitted_dns_domains': 'permitted_dns_domains',
        'public_key_algorithm': 'public_key_algorithm',
        'raw_certificate': 'raw_certificate',
        'signature_algorithm': 'signature_algorithm',
        'status': 'status',
        'subject': 'subject',
        'type': 'type',
        'update': 'update',
        'version': 'version'
    }

    def __init__(self, create=None, description=None, enabled=None, force_https=None, id=None, issuer=None, name=None, not_after=None, not_before=None, permitted_dns_domains=None, public_key_algorithm=None, raw_certificate=None, signature_algorithm=None, status=None, subject=None, type=None, update=None, version=None):  # noqa: E501
        """SSLCertificate - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._description = None
        self._enabled = None
        self._force_https = None
        self._id = None
        self._issuer = None
        self._name = None
        self._not_after = None
        self._not_before = None
        self._permitted_dns_domains = None
        self._public_key_algorithm = None
        self._raw_certificate = None
        self._signature_algorithm = None
        self._status = None
        self._subject = None
        self._type = None
        self._update = None
        self._version = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if force_https is not None:
            self.force_https = force_https
        if id is not None:
            self.id = id
        if issuer is not None:
            self.issuer = issuer
        if name is not None:
            self.name = name
        if not_after is not None:
            self.not_after = not_after
        if not_before is not None:
            self.not_before = not_before
        if permitted_dns_domains is not None:
            self.permitted_dns_domains = permitted_dns_domains
        if public_key_algorithm is not None:
            self.public_key_algorithm = public_key_algorithm
        if raw_certificate is not None:
            self.raw_certificate = raw_certificate
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if status is not None:
            self.status = status
        if subject is not None:
            self.subject = subject
        if type is not None:
            self.type = type
        if update is not None:
            self.update = update
        if version is not None:
            self.version = version

    @property
    def create(self):
        """Gets the create of this SSLCertificate.  # noqa: E501

        created time of certificate  # noqa: E501

        :return: The create of this SSLCertificate.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this SSLCertificate.

        created time of certificate  # noqa: E501

        :param create: The create of this SSLCertificate.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def description(self):
        """Gets the description of this SSLCertificate.  # noqa: E501

        certificate description  # noqa: E501

        :return: The description of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SSLCertificate.

        certificate description  # noqa: E501

        :param description: The description of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this SSLCertificate.  # noqa: E501

        enabled or not  # noqa: E501

        :return: The enabled of this SSLCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SSLCertificate.

        enabled or not  # noqa: E501

        :param enabled: The enabled of this SSLCertificate.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def force_https(self):
        """Gets the force_https of this SSLCertificate.  # noqa: E501

        redirect http request to https  # noqa: E501

        :return: The force_https of this SSLCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._force_https

    @force_https.setter
    def force_https(self, force_https):
        """Sets the force_https of this SSLCertificate.

        redirect http request to https  # noqa: E501

        :param force_https: The force_https of this SSLCertificate.  # noqa: E501
        :type: bool
        """

        self._force_https = force_https

    @property
    def id(self):
        """Gets the id of this SSLCertificate.  # noqa: E501

        certificate id  # noqa: E501

        :return: The id of this SSLCertificate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SSLCertificate.

        certificate id  # noqa: E501

        :param id: The id of this SSLCertificate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def issuer(self):
        """Gets the issuer of this SSLCertificate.  # noqa: E501

        issuer info  # noqa: E501

        :return: The issuer of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this SSLCertificate.

        issuer info  # noqa: E501

        :param issuer: The issuer of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def name(self):
        """Gets the name of this SSLCertificate.  # noqa: E501

        certificate name  # noqa: E501

        :return: The name of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SSLCertificate.

        certificate name  # noqa: E501

        :param name: The name of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def not_after(self):
        """Gets the not_after of this SSLCertificate.  # noqa: E501

        validity is not after the time  # noqa: E501

        :return: The not_after of this SSLCertificate.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this SSLCertificate.

        validity is not after the time  # noqa: E501

        :param not_after: The not_after of this SSLCertificate.  # noqa: E501
        :type: datetime
        """

        self._not_after = not_after

    @property
    def not_before(self):
        """Gets the not_before of this SSLCertificate.  # noqa: E501

        validity is not before the time  # noqa: E501

        :return: The not_before of this SSLCertificate.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this SSLCertificate.

        validity is not before the time  # noqa: E501

        :param not_before: The not_before of this SSLCertificate.  # noqa: E501
        :type: datetime
        """

        self._not_before = not_before

    @property
    def permitted_dns_domains(self):
        """Gets the permitted_dns_domains of this SSLCertificate.  # noqa: E501

        permitted dns domains  # noqa: E501

        :return: The permitted_dns_domains of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._permitted_dns_domains

    @permitted_dns_domains.setter
    def permitted_dns_domains(self, permitted_dns_domains):
        """Sets the permitted_dns_domains of this SSLCertificate.

        permitted dns domains  # noqa: E501

        :param permitted_dns_domains: The permitted_dns_domains of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._permitted_dns_domains = permitted_dns_domains

    @property
    def public_key_algorithm(self):
        """Gets the public_key_algorithm of this SSLCertificate.  # noqa: E501

        public key algorithm  # noqa: E501

        :return: The public_key_algorithm of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._public_key_algorithm

    @public_key_algorithm.setter
    def public_key_algorithm(self, public_key_algorithm):
        """Sets the public_key_algorithm of this SSLCertificate.

        public key algorithm  # noqa: E501

        :param public_key_algorithm: The public_key_algorithm of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._public_key_algorithm = public_key_algorithm

    @property
    def raw_certificate(self):
        """Gets the raw_certificate of this SSLCertificate.  # noqa: E501

        public certificate  # noqa: E501

        :return: The raw_certificate of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._raw_certificate

    @raw_certificate.setter
    def raw_certificate(self, raw_certificate):
        """Sets the raw_certificate of this SSLCertificate.

        public certificate  # noqa: E501

        :param raw_certificate: The raw_certificate of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._raw_certificate = raw_certificate

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this SSLCertificate.  # noqa: E501

        signature algorithm  # noqa: E501

        :return: The signature_algorithm of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this SSLCertificate.

        signature algorithm  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def status(self):
        """Gets the status of this SSLCertificate.  # noqa: E501


        :return: The status of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SSLCertificate.


        :param status: The status of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this SSLCertificate.  # noqa: E501

        subject info  # noqa: E501

        :return: The subject of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SSLCertificate.

        subject info  # noqa: E501

        :param subject: The subject of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def type(self):
        """Gets the type of this SSLCertificate.  # noqa: E501

        applied type: admin, s3  # noqa: E501

        :return: The type of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SSLCertificate.

        applied type: admin, s3  # noqa: E501

        :param type: The type of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def update(self):
        """Gets the update of this SSLCertificate.  # noqa: E501

        updated time of certificate  # noqa: E501

        :return: The update of this SSLCertificate.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this SSLCertificate.

        updated time of certificate  # noqa: E501

        :param update: The update of this SSLCertificate.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def version(self):
        """Gets the version of this SSLCertificate.  # noqa: E501

        certificate version  # noqa: E501

        :return: The version of this SSLCertificate.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SSLCertificate.

        certificate version  # noqa: E501

        :param version: The version of this SSLCertificate.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSLCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
