# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.dp_site_config import DpSiteConfig  # noqa: F401,E501


class DpSiteCreateReqSite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'config': 'DpSiteConfig',
        'crypto_key_id': 'int',
        'name': 'str',
        'platform': 'str',
        'protection_type': 'str',
        'remote_cluster_id': 'int',
        'service': 'str'
    }

    attribute_map = {
        'address': 'address',
        'config': 'config',
        'crypto_key_id': 'crypto_key_id',
        'name': 'name',
        'platform': 'platform',
        'protection_type': 'protection_type',
        'remote_cluster_id': 'remote_cluster_id',
        'service': 'service'
    }

    def __init__(self, address=None, config=None, crypto_key_id=None, name=None, platform=None, protection_type=None, remote_cluster_id=None, service=None):  # noqa: E501
        """DpSiteCreateReqSite - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._config = None
        self._crypto_key_id = None
        self._name = None
        self._platform = None
        self._protection_type = None
        self._remote_cluster_id = None
        self._service = None
        self.discriminator = None

        if address is not None:
            self.address = address
        self.config = config
        if crypto_key_id is not None:
            self.crypto_key_id = crypto_key_id
        self.name = name
        self.platform = platform
        self.protection_type = protection_type
        if remote_cluster_id is not None:
            self.remote_cluster_id = remote_cluster_id
        self.service = service

    @property
    def address(self):
        """Gets the address of this DpSiteCreateReqSite.  # noqa: E501

        site address  # noqa: E501

        :return: The address of this DpSiteCreateReqSite.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DpSiteCreateReqSite.

        site address  # noqa: E501

        :param address: The address of this DpSiteCreateReqSite.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def config(self):
        """Gets the config of this DpSiteCreateReqSite.  # noqa: E501

        extra config  # noqa: E501

        :return: The config of this DpSiteCreateReqSite.  # noqa: E501
        :rtype: DpSiteConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this DpSiteCreateReqSite.

        extra config  # noqa: E501

        :param config: The config of this DpSiteCreateReqSite.  # noqa: E501
        :type: DpSiteConfig
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def crypto_key_id(self):
        """Gets the crypto_key_id of this DpSiteCreateReqSite.  # noqa: E501

        crypto key  # noqa: E501

        :return: The crypto_key_id of this DpSiteCreateReqSite.  # noqa: E501
        :rtype: int
        """
        return self._crypto_key_id

    @crypto_key_id.setter
    def crypto_key_id(self, crypto_key_id):
        """Sets the crypto_key_id of this DpSiteCreateReqSite.

        crypto key  # noqa: E501

        :param crypto_key_id: The crypto_key_id of this DpSiteCreateReqSite.  # noqa: E501
        :type: int
        """

        self._crypto_key_id = crypto_key_id

    @property
    def name(self):
        """Gets the name of this DpSiteCreateReqSite.  # noqa: E501

        site name  # noqa: E501

        :return: The name of this DpSiteCreateReqSite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DpSiteCreateReqSite.

        site name  # noqa: E501

        :param name: The name of this DpSiteCreateReqSite.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this DpSiteCreateReqSite.  # noqa: E501

        platform of site  # noqa: E501

        :return: The platform of this DpSiteCreateReqSite.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DpSiteCreateReqSite.

        platform of site  # noqa: E501

        :param platform: The platform of this DpSiteCreateReqSite.  # noqa: E501
        :type: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform

    @property
    def protection_type(self):
        """Gets the protection_type of this DpSiteCreateReqSite.  # noqa: E501

        protection type  # noqa: E501

        :return: The protection_type of this DpSiteCreateReqSite.  # noqa: E501
        :rtype: str
        """
        return self._protection_type

    @protection_type.setter
    def protection_type(self, protection_type):
        """Sets the protection_type of this DpSiteCreateReqSite.

        protection type  # noqa: E501

        :param protection_type: The protection_type of this DpSiteCreateReqSite.  # noqa: E501
        :type: str
        """
        if protection_type is None:
            raise ValueError("Invalid value for `protection_type`, must not be `None`")  # noqa: E501

        self._protection_type = protection_type

    @property
    def remote_cluster_id(self):
        """Gets the remote_cluster_id of this DpSiteCreateReqSite.  # noqa: E501

        remote cluster  # noqa: E501

        :return: The remote_cluster_id of this DpSiteCreateReqSite.  # noqa: E501
        :rtype: int
        """
        return self._remote_cluster_id

    @remote_cluster_id.setter
    def remote_cluster_id(self, remote_cluster_id):
        """Sets the remote_cluster_id of this DpSiteCreateReqSite.

        remote cluster  # noqa: E501

        :param remote_cluster_id: The remote_cluster_id of this DpSiteCreateReqSite.  # noqa: E501
        :type: int
        """

        self._remote_cluster_id = remote_cluster_id

    @property
    def service(self):
        """Gets the service of this DpSiteCreateReqSite.  # noqa: E501

        service of site  # noqa: E501

        :return: The service of this DpSiteCreateReqSite.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this DpSiteCreateReqSite.

        service of site  # noqa: E501

        :param service: The service of this DpSiteCreateReqSite.  # noqa: E501
        :type: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DpSiteCreateReqSite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
