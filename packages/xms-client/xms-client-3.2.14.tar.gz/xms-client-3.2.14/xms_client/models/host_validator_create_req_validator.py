# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class HostValidatorCreateReqValidator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_ip': 'str',
        'gateway_ips': 'list[str]',
        'host_roles': 'list[str]',
        'host_type': 'str',
        'private_ip': 'str',
        'public_ip': 'str'
    }

    attribute_map = {
        'admin_ip': 'admin_ip',
        'gateway_ips': 'gateway_ips',
        'host_roles': 'host_roles',
        'host_type': 'host_type',
        'private_ip': 'private_ip',
        'public_ip': 'public_ip'
    }

    def __init__(self, admin_ip=None, gateway_ips=None, host_roles=None, host_type=None, private_ip=None, public_ip=None):  # noqa: E501
        """HostValidatorCreateReqValidator - a model defined in Swagger"""  # noqa: E501

        self._admin_ip = None
        self._gateway_ips = None
        self._host_roles = None
        self._host_type = None
        self._private_ip = None
        self._public_ip = None
        self.discriminator = None

        self.admin_ip = admin_ip
        if gateway_ips is not None:
            self.gateway_ips = gateway_ips
        self.host_roles = host_roles
        self.host_type = host_type
        if private_ip is not None:
            self.private_ip = private_ip
        if public_ip is not None:
            self.public_ip = public_ip

    @property
    def admin_ip(self):
        """Gets the admin_ip of this HostValidatorCreateReqValidator.  # noqa: E501


        :return: The admin_ip of this HostValidatorCreateReqValidator.  # noqa: E501
        :rtype: str
        """
        return self._admin_ip

    @admin_ip.setter
    def admin_ip(self, admin_ip):
        """Sets the admin_ip of this HostValidatorCreateReqValidator.


        :param admin_ip: The admin_ip of this HostValidatorCreateReqValidator.  # noqa: E501
        :type: str
        """
        if admin_ip is None:
            raise ValueError("Invalid value for `admin_ip`, must not be `None`")  # noqa: E501

        self._admin_ip = admin_ip

    @property
    def gateway_ips(self):
        """Gets the gateway_ips of this HostValidatorCreateReqValidator.  # noqa: E501


        :return: The gateway_ips of this HostValidatorCreateReqValidator.  # noqa: E501
        :rtype: list[str]
        """
        return self._gateway_ips

    @gateway_ips.setter
    def gateway_ips(self, gateway_ips):
        """Sets the gateway_ips of this HostValidatorCreateReqValidator.


        :param gateway_ips: The gateway_ips of this HostValidatorCreateReqValidator.  # noqa: E501
        :type: list[str]
        """

        self._gateway_ips = gateway_ips

    @property
    def host_roles(self):
        """Gets the host_roles of this HostValidatorCreateReqValidator.  # noqa: E501


        :return: The host_roles of this HostValidatorCreateReqValidator.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_roles

    @host_roles.setter
    def host_roles(self, host_roles):
        """Sets the host_roles of this HostValidatorCreateReqValidator.


        :param host_roles: The host_roles of this HostValidatorCreateReqValidator.  # noqa: E501
        :type: list[str]
        """
        if host_roles is None:
            raise ValueError("Invalid value for `host_roles`, must not be `None`")  # noqa: E501

        self._host_roles = host_roles

    @property
    def host_type(self):
        """Gets the host_type of this HostValidatorCreateReqValidator.  # noqa: E501


        :return: The host_type of this HostValidatorCreateReqValidator.  # noqa: E501
        :rtype: str
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """Sets the host_type of this HostValidatorCreateReqValidator.


        :param host_type: The host_type of this HostValidatorCreateReqValidator.  # noqa: E501
        :type: str
        """
        if host_type is None:
            raise ValueError("Invalid value for `host_type`, must not be `None`")  # noqa: E501

        self._host_type = host_type

    @property
    def private_ip(self):
        """Gets the private_ip of this HostValidatorCreateReqValidator.  # noqa: E501


        :return: The private_ip of this HostValidatorCreateReqValidator.  # noqa: E501
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this HostValidatorCreateReqValidator.


        :param private_ip: The private_ip of this HostValidatorCreateReqValidator.  # noqa: E501
        :type: str
        """

        self._private_ip = private_ip

    @property
    def public_ip(self):
        """Gets the public_ip of this HostValidatorCreateReqValidator.  # noqa: E501


        :return: The public_ip of this HostValidatorCreateReqValidator.  # noqa: E501
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this HostValidatorCreateReqValidator.


        :param public_ip: The public_ip of this HostValidatorCreateReqValidator.  # noqa: E501
        :type: str
        """

        self._public_ip = public_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostValidatorCreateReqValidator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
