# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.fs_folder_nestview import FSFolderNestview  # noqa: F401,E501
# from xms_client.models.pool_nestview import PoolNestview  # noqa: F401,E501
# from xms_client.models.snapshot_nestview import SnapshotNestview  # noqa: F401,E501


class FSSnapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_snapshot': 'SnapshotNestview',
        'clone_folder_num': 'int',
        'create': 'datetime',
        'description': 'str',
        'formatted': 'bool',
        'fs_folder': 'FSFolderNestview',
        'id': 'int',
        'name': 'str',
        'pool': 'PoolNestview',
        'size': 'int',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'block_snapshot': 'block_snapshot',
        'clone_folder_num': 'clone_folder_num',
        'create': 'create',
        'description': 'description',
        'formatted': 'formatted',
        'fs_folder': 'fs_folder',
        'id': 'id',
        'name': 'name',
        'pool': 'pool',
        'size': 'size',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, block_snapshot=None, clone_folder_num=None, create=None, description=None, formatted=None, fs_folder=None, id=None, name=None, pool=None, size=None, status=None, update=None):  # noqa: E501
        """FSSnapshot - a model defined in Swagger"""  # noqa: E501

        self._block_snapshot = None
        self._clone_folder_num = None
        self._create = None
        self._description = None
        self._formatted = None
        self._fs_folder = None
        self._id = None
        self._name = None
        self._pool = None
        self._size = None
        self._status = None
        self._update = None
        self.discriminator = None

        if block_snapshot is not None:
            self.block_snapshot = block_snapshot
        if clone_folder_num is not None:
            self.clone_folder_num = clone_folder_num
        if create is not None:
            self.create = create
        if description is not None:
            self.description = description
        if formatted is not None:
            self.formatted = formatted
        if fs_folder is not None:
            self.fs_folder = fs_folder
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if pool is not None:
            self.pool = pool
        if size is not None:
            self.size = size
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def block_snapshot(self):
        """Gets the block_snapshot of this FSSnapshot.  # noqa: E501


        :return: The block_snapshot of this FSSnapshot.  # noqa: E501
        :rtype: SnapshotNestview
        """
        return self._block_snapshot

    @block_snapshot.setter
    def block_snapshot(self, block_snapshot):
        """Sets the block_snapshot of this FSSnapshot.


        :param block_snapshot: The block_snapshot of this FSSnapshot.  # noqa: E501
        :type: SnapshotNestview
        """

        self._block_snapshot = block_snapshot

    @property
    def clone_folder_num(self):
        """Gets the clone_folder_num of this FSSnapshot.  # noqa: E501


        :return: The clone_folder_num of this FSSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._clone_folder_num

    @clone_folder_num.setter
    def clone_folder_num(self, clone_folder_num):
        """Sets the clone_folder_num of this FSSnapshot.


        :param clone_folder_num: The clone_folder_num of this FSSnapshot.  # noqa: E501
        :type: int
        """

        self._clone_folder_num = clone_folder_num

    @property
    def create(self):
        """Gets the create of this FSSnapshot.  # noqa: E501


        :return: The create of this FSSnapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this FSSnapshot.


        :param create: The create of this FSSnapshot.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def description(self):
        """Gets the description of this FSSnapshot.  # noqa: E501


        :return: The description of this FSSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FSSnapshot.


        :param description: The description of this FSSnapshot.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def formatted(self):
        """Gets the formatted of this FSSnapshot.  # noqa: E501


        :return: The formatted of this FSSnapshot.  # noqa: E501
        :rtype: bool
        """
        return self._formatted

    @formatted.setter
    def formatted(self, formatted):
        """Sets the formatted of this FSSnapshot.


        :param formatted: The formatted of this FSSnapshot.  # noqa: E501
        :type: bool
        """

        self._formatted = formatted

    @property
    def fs_folder(self):
        """Gets the fs_folder of this FSSnapshot.  # noqa: E501


        :return: The fs_folder of this FSSnapshot.  # noqa: E501
        :rtype: FSFolderNestview
        """
        return self._fs_folder

    @fs_folder.setter
    def fs_folder(self, fs_folder):
        """Sets the fs_folder of this FSSnapshot.


        :param fs_folder: The fs_folder of this FSSnapshot.  # noqa: E501
        :type: FSFolderNestview
        """

        self._fs_folder = fs_folder

    @property
    def id(self):
        """Gets the id of this FSSnapshot.  # noqa: E501


        :return: The id of this FSSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FSSnapshot.


        :param id: The id of this FSSnapshot.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FSSnapshot.  # noqa: E501


        :return: The name of this FSSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FSSnapshot.


        :param name: The name of this FSSnapshot.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pool(self):
        """Gets the pool of this FSSnapshot.  # noqa: E501


        :return: The pool of this FSSnapshot.  # noqa: E501
        :rtype: PoolNestview
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this FSSnapshot.


        :param pool: The pool of this FSSnapshot.  # noqa: E501
        :type: PoolNestview
        """

        self._pool = pool

    @property
    def size(self):
        """Gets the size of this FSSnapshot.  # noqa: E501


        :return: The size of this FSSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FSSnapshot.


        :param size: The size of this FSSnapshot.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this FSSnapshot.  # noqa: E501


        :return: The status of this FSSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FSSnapshot.


        :param status: The status of this FSSnapshot.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this FSSnapshot.  # noqa: E501


        :return: The update of this FSSnapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this FSSnapshot.


        :param update: The update of this FSSnapshot.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSSnapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
