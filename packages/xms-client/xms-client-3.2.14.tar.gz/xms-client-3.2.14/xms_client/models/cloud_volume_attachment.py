# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cloud_instance_nestview import CloudInstanceNestview  # noqa: F401,E501
# from xms_client.models.cloud_volume_nestview import CloudVolumeNestview  # noqa: F401,E501
# from xms_client.models.volume_nestview import VolumeNestview  # noqa: F401,E501


class CloudVolumeAttachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_volume': 'VolumeNestview',
        'cloud_instance': 'CloudInstanceNestview',
        'cloud_volume': 'CloudVolumeNestview',
        'create': 'datetime',
        'device': 'str',
        'id': 'int',
        'update': 'datetime'
    }

    attribute_map = {
        'block_volume': 'block_volume',
        'cloud_instance': 'cloud_instance',
        'cloud_volume': 'cloud_volume',
        'create': 'create',
        'device': 'device',
        'id': 'id',
        'update': 'update'
    }

    def __init__(self, block_volume=None, cloud_instance=None, cloud_volume=None, create=None, device=None, id=None, update=None):  # noqa: E501
        """CloudVolumeAttachment - a model defined in Swagger"""  # noqa: E501

        self._block_volume = None
        self._cloud_instance = None
        self._cloud_volume = None
        self._create = None
        self._device = None
        self._id = None
        self._update = None
        self.discriminator = None

        if block_volume is not None:
            self.block_volume = block_volume
        if cloud_instance is not None:
            self.cloud_instance = cloud_instance
        if cloud_volume is not None:
            self.cloud_volume = cloud_volume
        if create is not None:
            self.create = create
        if device is not None:
            self.device = device
        if id is not None:
            self.id = id
        if update is not None:
            self.update = update

    @property
    def block_volume(self):
        """Gets the block_volume of this CloudVolumeAttachment.  # noqa: E501


        :return: The block_volume of this CloudVolumeAttachment.  # noqa: E501
        :rtype: VolumeNestview
        """
        return self._block_volume

    @block_volume.setter
    def block_volume(self, block_volume):
        """Sets the block_volume of this CloudVolumeAttachment.


        :param block_volume: The block_volume of this CloudVolumeAttachment.  # noqa: E501
        :type: VolumeNestview
        """

        self._block_volume = block_volume

    @property
    def cloud_instance(self):
        """Gets the cloud_instance of this CloudVolumeAttachment.  # noqa: E501


        :return: The cloud_instance of this CloudVolumeAttachment.  # noqa: E501
        :rtype: CloudInstanceNestview
        """
        return self._cloud_instance

    @cloud_instance.setter
    def cloud_instance(self, cloud_instance):
        """Sets the cloud_instance of this CloudVolumeAttachment.


        :param cloud_instance: The cloud_instance of this CloudVolumeAttachment.  # noqa: E501
        :type: CloudInstanceNestview
        """

        self._cloud_instance = cloud_instance

    @property
    def cloud_volume(self):
        """Gets the cloud_volume of this CloudVolumeAttachment.  # noqa: E501


        :return: The cloud_volume of this CloudVolumeAttachment.  # noqa: E501
        :rtype: CloudVolumeNestview
        """
        return self._cloud_volume

    @cloud_volume.setter
    def cloud_volume(self, cloud_volume):
        """Sets the cloud_volume of this CloudVolumeAttachment.


        :param cloud_volume: The cloud_volume of this CloudVolumeAttachment.  # noqa: E501
        :type: CloudVolumeNestview
        """

        self._cloud_volume = cloud_volume

    @property
    def create(self):
        """Gets the create of this CloudVolumeAttachment.  # noqa: E501


        :return: The create of this CloudVolumeAttachment.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this CloudVolumeAttachment.


        :param create: The create of this CloudVolumeAttachment.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def device(self):
        """Gets the device of this CloudVolumeAttachment.  # noqa: E501


        :return: The device of this CloudVolumeAttachment.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this CloudVolumeAttachment.


        :param device: The device of this CloudVolumeAttachment.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def id(self):
        """Gets the id of this CloudVolumeAttachment.  # noqa: E501


        :return: The id of this CloudVolumeAttachment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudVolumeAttachment.


        :param id: The id of this CloudVolumeAttachment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def update(self):
        """Gets the update of this CloudVolumeAttachment.  # noqa: E501


        :return: The update of this CloudVolumeAttachment.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this CloudVolumeAttachment.


        :param update: The update of this CloudVolumeAttachment.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudVolumeAttachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
