# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.mapping_group_req import MappingGroupReq  # noqa: F401,E501


class AccessPathCreateReqAccessPath(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chap': 'bool',
        'description': 'str',
        'host_ids': 'list[int]',
        'mapping_groups': 'list[MappingGroupReq]',
        'name': 'str',
        'protection_domain_id': 'int',
        'tname': 'str',
        'tsecret': 'str',
        'type': 'str'
    }

    attribute_map = {
        'chap': 'chap',
        'description': 'description',
        'host_ids': 'host_ids',
        'mapping_groups': 'mapping_groups',
        'name': 'name',
        'protection_domain_id': 'protection_domain_id',
        'tname': 'tname',
        'tsecret': 'tsecret',
        'type': 'type'
    }

    def __init__(self, chap=None, description=None, host_ids=None, mapping_groups=None, name=None, protection_domain_id=None, tname=None, tsecret=None, type=None):  # noqa: E501
        """AccessPathCreateReqAccessPath - a model defined in Swagger"""  # noqa: E501

        self._chap = None
        self._description = None
        self._host_ids = None
        self._mapping_groups = None
        self._name = None
        self._protection_domain_id = None
        self._tname = None
        self._tsecret = None
        self._type = None
        self.discriminator = None

        if chap is not None:
            self.chap = chap
        if description is not None:
            self.description = description
        if host_ids is not None:
            self.host_ids = host_ids
        if mapping_groups is not None:
            self.mapping_groups = mapping_groups
        if name is not None:
            self.name = name
        if protection_domain_id is not None:
            self.protection_domain_id = protection_domain_id
        if tname is not None:
            self.tname = tname
        if tsecret is not None:
            self.tsecret = tsecret
        if type is not None:
            self.type = type

    @property
    def chap(self):
        """Gets the chap of this AccessPathCreateReqAccessPath.  # noqa: E501


        :return: The chap of this AccessPathCreateReqAccessPath.  # noqa: E501
        :rtype: bool
        """
        return self._chap

    @chap.setter
    def chap(self, chap):
        """Sets the chap of this AccessPathCreateReqAccessPath.


        :param chap: The chap of this AccessPathCreateReqAccessPath.  # noqa: E501
        :type: bool
        """

        self._chap = chap

    @property
    def description(self):
        """Gets the description of this AccessPathCreateReqAccessPath.  # noqa: E501


        :return: The description of this AccessPathCreateReqAccessPath.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccessPathCreateReqAccessPath.


        :param description: The description of this AccessPathCreateReqAccessPath.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def host_ids(self):
        """Gets the host_ids of this AccessPathCreateReqAccessPath.  # noqa: E501


        :return: The host_ids of this AccessPathCreateReqAccessPath.  # noqa: E501
        :rtype: list[int]
        """
        return self._host_ids

    @host_ids.setter
    def host_ids(self, host_ids):
        """Sets the host_ids of this AccessPathCreateReqAccessPath.


        :param host_ids: The host_ids of this AccessPathCreateReqAccessPath.  # noqa: E501
        :type: list[int]
        """

        self._host_ids = host_ids

    @property
    def mapping_groups(self):
        """Gets the mapping_groups of this AccessPathCreateReqAccessPath.  # noqa: E501


        :return: The mapping_groups of this AccessPathCreateReqAccessPath.  # noqa: E501
        :rtype: list[MappingGroupReq]
        """
        return self._mapping_groups

    @mapping_groups.setter
    def mapping_groups(self, mapping_groups):
        """Sets the mapping_groups of this AccessPathCreateReqAccessPath.


        :param mapping_groups: The mapping_groups of this AccessPathCreateReqAccessPath.  # noqa: E501
        :type: list[MappingGroupReq]
        """

        self._mapping_groups = mapping_groups

    @property
    def name(self):
        """Gets the name of this AccessPathCreateReqAccessPath.  # noqa: E501


        :return: The name of this AccessPathCreateReqAccessPath.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccessPathCreateReqAccessPath.


        :param name: The name of this AccessPathCreateReqAccessPath.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protection_domain_id(self):
        """Gets the protection_domain_id of this AccessPathCreateReqAccessPath.  # noqa: E501


        :return: The protection_domain_id of this AccessPathCreateReqAccessPath.  # noqa: E501
        :rtype: int
        """
        return self._protection_domain_id

    @protection_domain_id.setter
    def protection_domain_id(self, protection_domain_id):
        """Sets the protection_domain_id of this AccessPathCreateReqAccessPath.


        :param protection_domain_id: The protection_domain_id of this AccessPathCreateReqAccessPath.  # noqa: E501
        :type: int
        """

        self._protection_domain_id = protection_domain_id

    @property
    def tname(self):
        """Gets the tname of this AccessPathCreateReqAccessPath.  # noqa: E501


        :return: The tname of this AccessPathCreateReqAccessPath.  # noqa: E501
        :rtype: str
        """
        return self._tname

    @tname.setter
    def tname(self, tname):
        """Sets the tname of this AccessPathCreateReqAccessPath.


        :param tname: The tname of this AccessPathCreateReqAccessPath.  # noqa: E501
        :type: str
        """

        self._tname = tname

    @property
    def tsecret(self):
        """Gets the tsecret of this AccessPathCreateReqAccessPath.  # noqa: E501


        :return: The tsecret of this AccessPathCreateReqAccessPath.  # noqa: E501
        :rtype: str
        """
        return self._tsecret

    @tsecret.setter
    def tsecret(self, tsecret):
        """Sets the tsecret of this AccessPathCreateReqAccessPath.


        :param tsecret: The tsecret of this AccessPathCreateReqAccessPath.  # noqa: E501
        :type: str
        """

        self._tsecret = tsecret

    @property
    def type(self):
        """Gets the type of this AccessPathCreateReqAccessPath.  # noqa: E501


        :return: The type of this AccessPathCreateReqAccessPath.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccessPathCreateReqAccessPath.


        :param type: The type of this AccessPathCreateReqAccessPath.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessPathCreateReqAccessPath):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
