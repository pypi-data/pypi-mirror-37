# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class NetworkInterfaceStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'drop_pps': 'float',
        'error_pps': 'float',
        'rx_bandwidth_kbyte': 'float',
        'rx_drop_pps': 'float',
        'rx_error_pps': 'float',
        'rx_pps': 'float',
        'tx_bandwidth_kbyte': 'float',
        'tx_drop_pps': 'float',
        'tx_error_pps': 'float',
        'tx_pps': 'float'
    }

    attribute_map = {
        'create': 'create',
        'drop_pps': 'drop_pps',
        'error_pps': 'error_pps',
        'rx_bandwidth_kbyte': 'rx_bandwidth_kbyte',
        'rx_drop_pps': 'rx_drop_pps',
        'rx_error_pps': 'rx_error_pps',
        'rx_pps': 'rx_pps',
        'tx_bandwidth_kbyte': 'tx_bandwidth_kbyte',
        'tx_drop_pps': 'tx_drop_pps',
        'tx_error_pps': 'tx_error_pps',
        'tx_pps': 'tx_pps'
    }

    def __init__(self, create=None, drop_pps=None, error_pps=None, rx_bandwidth_kbyte=None, rx_drop_pps=None, rx_error_pps=None, rx_pps=None, tx_bandwidth_kbyte=None, tx_drop_pps=None, tx_error_pps=None, tx_pps=None):  # noqa: E501
        """NetworkInterfaceStat - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._drop_pps = None
        self._error_pps = None
        self._rx_bandwidth_kbyte = None
        self._rx_drop_pps = None
        self._rx_error_pps = None
        self._rx_pps = None
        self._tx_bandwidth_kbyte = None
        self._tx_drop_pps = None
        self._tx_error_pps = None
        self._tx_pps = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if drop_pps is not None:
            self.drop_pps = drop_pps
        if error_pps is not None:
            self.error_pps = error_pps
        if rx_bandwidth_kbyte is not None:
            self.rx_bandwidth_kbyte = rx_bandwidth_kbyte
        if rx_drop_pps is not None:
            self.rx_drop_pps = rx_drop_pps
        if rx_error_pps is not None:
            self.rx_error_pps = rx_error_pps
        if rx_pps is not None:
            self.rx_pps = rx_pps
        if tx_bandwidth_kbyte is not None:
            self.tx_bandwidth_kbyte = tx_bandwidth_kbyte
        if tx_drop_pps is not None:
            self.tx_drop_pps = tx_drop_pps
        if tx_error_pps is not None:
            self.tx_error_pps = tx_error_pps
        if tx_pps is not None:
            self.tx_pps = tx_pps

    @property
    def create(self):
        """Gets the create of this NetworkInterfaceStat.  # noqa: E501


        :return: The create of this NetworkInterfaceStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this NetworkInterfaceStat.


        :param create: The create of this NetworkInterfaceStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def drop_pps(self):
        """Gets the drop_pps of this NetworkInterfaceStat.  # noqa: E501


        :return: The drop_pps of this NetworkInterfaceStat.  # noqa: E501
        :rtype: float
        """
        return self._drop_pps

    @drop_pps.setter
    def drop_pps(self, drop_pps):
        """Sets the drop_pps of this NetworkInterfaceStat.


        :param drop_pps: The drop_pps of this NetworkInterfaceStat.  # noqa: E501
        :type: float
        """

        self._drop_pps = drop_pps

    @property
    def error_pps(self):
        """Gets the error_pps of this NetworkInterfaceStat.  # noqa: E501


        :return: The error_pps of this NetworkInterfaceStat.  # noqa: E501
        :rtype: float
        """
        return self._error_pps

    @error_pps.setter
    def error_pps(self, error_pps):
        """Sets the error_pps of this NetworkInterfaceStat.


        :param error_pps: The error_pps of this NetworkInterfaceStat.  # noqa: E501
        :type: float
        """

        self._error_pps = error_pps

    @property
    def rx_bandwidth_kbyte(self):
        """Gets the rx_bandwidth_kbyte of this NetworkInterfaceStat.  # noqa: E501


        :return: The rx_bandwidth_kbyte of this NetworkInterfaceStat.  # noqa: E501
        :rtype: float
        """
        return self._rx_bandwidth_kbyte

    @rx_bandwidth_kbyte.setter
    def rx_bandwidth_kbyte(self, rx_bandwidth_kbyte):
        """Sets the rx_bandwidth_kbyte of this NetworkInterfaceStat.


        :param rx_bandwidth_kbyte: The rx_bandwidth_kbyte of this NetworkInterfaceStat.  # noqa: E501
        :type: float
        """

        self._rx_bandwidth_kbyte = rx_bandwidth_kbyte

    @property
    def rx_drop_pps(self):
        """Gets the rx_drop_pps of this NetworkInterfaceStat.  # noqa: E501


        :return: The rx_drop_pps of this NetworkInterfaceStat.  # noqa: E501
        :rtype: float
        """
        return self._rx_drop_pps

    @rx_drop_pps.setter
    def rx_drop_pps(self, rx_drop_pps):
        """Sets the rx_drop_pps of this NetworkInterfaceStat.


        :param rx_drop_pps: The rx_drop_pps of this NetworkInterfaceStat.  # noqa: E501
        :type: float
        """

        self._rx_drop_pps = rx_drop_pps

    @property
    def rx_error_pps(self):
        """Gets the rx_error_pps of this NetworkInterfaceStat.  # noqa: E501


        :return: The rx_error_pps of this NetworkInterfaceStat.  # noqa: E501
        :rtype: float
        """
        return self._rx_error_pps

    @rx_error_pps.setter
    def rx_error_pps(self, rx_error_pps):
        """Sets the rx_error_pps of this NetworkInterfaceStat.


        :param rx_error_pps: The rx_error_pps of this NetworkInterfaceStat.  # noqa: E501
        :type: float
        """

        self._rx_error_pps = rx_error_pps

    @property
    def rx_pps(self):
        """Gets the rx_pps of this NetworkInterfaceStat.  # noqa: E501


        :return: The rx_pps of this NetworkInterfaceStat.  # noqa: E501
        :rtype: float
        """
        return self._rx_pps

    @rx_pps.setter
    def rx_pps(self, rx_pps):
        """Sets the rx_pps of this NetworkInterfaceStat.


        :param rx_pps: The rx_pps of this NetworkInterfaceStat.  # noqa: E501
        :type: float
        """

        self._rx_pps = rx_pps

    @property
    def tx_bandwidth_kbyte(self):
        """Gets the tx_bandwidth_kbyte of this NetworkInterfaceStat.  # noqa: E501


        :return: The tx_bandwidth_kbyte of this NetworkInterfaceStat.  # noqa: E501
        :rtype: float
        """
        return self._tx_bandwidth_kbyte

    @tx_bandwidth_kbyte.setter
    def tx_bandwidth_kbyte(self, tx_bandwidth_kbyte):
        """Sets the tx_bandwidth_kbyte of this NetworkInterfaceStat.


        :param tx_bandwidth_kbyte: The tx_bandwidth_kbyte of this NetworkInterfaceStat.  # noqa: E501
        :type: float
        """

        self._tx_bandwidth_kbyte = tx_bandwidth_kbyte

    @property
    def tx_drop_pps(self):
        """Gets the tx_drop_pps of this NetworkInterfaceStat.  # noqa: E501


        :return: The tx_drop_pps of this NetworkInterfaceStat.  # noqa: E501
        :rtype: float
        """
        return self._tx_drop_pps

    @tx_drop_pps.setter
    def tx_drop_pps(self, tx_drop_pps):
        """Sets the tx_drop_pps of this NetworkInterfaceStat.


        :param tx_drop_pps: The tx_drop_pps of this NetworkInterfaceStat.  # noqa: E501
        :type: float
        """

        self._tx_drop_pps = tx_drop_pps

    @property
    def tx_error_pps(self):
        """Gets the tx_error_pps of this NetworkInterfaceStat.  # noqa: E501


        :return: The tx_error_pps of this NetworkInterfaceStat.  # noqa: E501
        :rtype: float
        """
        return self._tx_error_pps

    @tx_error_pps.setter
    def tx_error_pps(self, tx_error_pps):
        """Sets the tx_error_pps of this NetworkInterfaceStat.


        :param tx_error_pps: The tx_error_pps of this NetworkInterfaceStat.  # noqa: E501
        :type: float
        """

        self._tx_error_pps = tx_error_pps

    @property
    def tx_pps(self):
        """Gets the tx_pps of this NetworkInterfaceStat.  # noqa: E501


        :return: The tx_pps of this NetworkInterfaceStat.  # noqa: E501
        :rtype: float
        """
        return self._tx_pps

    @tx_pps.setter
    def tx_pps(self, tx_pps):
        """Sets the tx_pps of this NetworkInterfaceStat.


        :param tx_pps: The tx_pps of this NetworkInterfaceStat.  # noqa: E501
        :type: float
        """

        self._tx_pps = tx_pps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInterfaceStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
