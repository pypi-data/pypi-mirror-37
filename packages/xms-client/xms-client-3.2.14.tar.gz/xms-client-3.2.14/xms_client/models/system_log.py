# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.host import Host  # noqa: F401,E501


class SystemLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'catalog': 'str',
        'host': 'Host',
        'id': 'int',
        'last_updated_time': 'datetime',
        'name': 'str',
        'size': 'int'
    }

    attribute_map = {
        'catalog': 'catalog',
        'host': 'host',
        'id': 'id',
        'last_updated_time': 'last_updated_time',
        'name': 'name',
        'size': 'size'
    }

    def __init__(self, catalog=None, host=None, id=None, last_updated_time=None, name=None, size=None):  # noqa: E501
        """SystemLog - a model defined in Swagger"""  # noqa: E501

        self._catalog = None
        self._host = None
        self._id = None
        self._last_updated_time = None
        self._name = None
        self._size = None
        self.discriminator = None

        if catalog is not None:
            self.catalog = catalog
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if last_updated_time is not None:
            self.last_updated_time = last_updated_time
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size

    @property
    def catalog(self):
        """Gets the catalog of this SystemLog.  # noqa: E501


        :return: The catalog of this SystemLog.  # noqa: E501
        :rtype: str
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this SystemLog.


        :param catalog: The catalog of this SystemLog.  # noqa: E501
        :type: str
        """

        self._catalog = catalog

    @property
    def host(self):
        """Gets the host of this SystemLog.  # noqa: E501


        :return: The host of this SystemLog.  # noqa: E501
        :rtype: Host
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SystemLog.


        :param host: The host of this SystemLog.  # noqa: E501
        :type: Host
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this SystemLog.  # noqa: E501


        :return: The id of this SystemLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SystemLog.


        :param id: The id of this SystemLog.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this SystemLog.  # noqa: E501


        :return: The last_updated_time of this SystemLog.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this SystemLog.


        :param last_updated_time: The last_updated_time of this SystemLog.  # noqa: E501
        :type: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def name(self):
        """Gets the name of this SystemLog.  # noqa: E501


        :return: The name of this SystemLog.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemLog.


        :param name: The name of this SystemLog.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this SystemLog.  # noqa: E501


        :return: The size of this SystemLog.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SystemLog.


        :param size: The size of this SystemLog.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
