# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from xms_client.api_client import ApiClient


class CloudVolumesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_cloud_volume(self, cloud_volume_id, **kwargs):  # noqa: E501
        """get_cloud_volume  # noqa: E501

        Get a cloud volume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cloud_volume(cloud_volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int cloud_volume_id: cloud volume id (required)
        :return: CloudVolumeResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_cloud_volume_with_http_info(cloud_volume_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_volume_with_http_info(cloud_volume_id, **kwargs)  # noqa: E501
            return data

    def get_cloud_volume_with_http_info(self, cloud_volume_id, **kwargs):  # noqa: E501
        """get_cloud_volume  # noqa: E501

        Get a cloud volume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cloud_volume_with_http_info(cloud_volume_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int cloud_volume_id: cloud volume id (required)
        :return: CloudVolumeResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_volume_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_volume_id' is set
        if ('cloud_volume_id' not in params or
                params['cloud_volume_id'] is None):
            raise ValueError("Missing the required parameter `cloud_volume_id` when calling `get_cloud_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_volume_id' in params:
            path_params['cloud_volume_id'] = params['cloud_volume_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInCookie', 'tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/cloud-volumes/{cloud_volume_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudVolumeResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_cloud_volumes(self, **kwargs):  # noqa: E501
        """list_cloud_volumes  # noqa: E501

        List cloud volumes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_cloud_volumes(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: paging param
        :param int offset: paging param
        :param int cloud_instance_id: cloud instance id
        :return: CloudVolumesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_cloud_volumes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_cloud_volumes_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_cloud_volumes_with_http_info(self, **kwargs):  # noqa: E501
        """list_cloud_volumes  # noqa: E501

        List cloud volumes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_cloud_volumes_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: paging param
        :param int offset: paging param
        :param int cloud_instance_id: cloud instance id
        :return: CloudVolumesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'cloud_instance_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cloud_volumes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'cloud_instance_id' in params:
            query_params.append(('cloud_instance_id', params['cloud_instance_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInCookie', 'tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/cloud-volumes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudVolumesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
