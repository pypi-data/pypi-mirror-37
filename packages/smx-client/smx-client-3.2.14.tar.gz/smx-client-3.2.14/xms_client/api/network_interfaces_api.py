# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from xms_client.api_client import ApiClient


class NetworkInterfacesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_network_interface(self, network_interface_id, **kwargs):  # noqa: E501
        """get_network_interface  # noqa: E501

        Get a network interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_interface(network_interface_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int network_interface_id: network interface id (required)
        :return: NetworkInterfaceResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_interface_with_http_info(network_interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_interface_with_http_info(network_interface_id, **kwargs)  # noqa: E501
            return data

    def get_network_interface_with_http_info(self, network_interface_id, **kwargs):  # noqa: E501
        """get_network_interface  # noqa: E501

        Get a network interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_interface_with_http_info(network_interface_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int network_interface_id: network interface id (required)
        :return: NetworkInterfaceResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_interface_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_interface_id' is set
        if ('network_interface_id' not in params or
                params['network_interface_id'] is None):
            raise ValueError("Missing the required parameter `network_interface_id` when calling `get_network_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'network_interface_id' in params:
            path_params['network_interface_id'] = params['network_interface_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInCookie', 'tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/network-interfaces/{network_interface_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkInterfaceResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_interface_samples(self, network_interface_id, **kwargs):  # noqa: E501
        """get_network_interface_samples  # noqa: E501

        get a network interface's Samples  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_interface_samples(network_interface_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int network_interface_id: network interface id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: NetworkInterfaceSamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_interface_samples_with_http_info(network_interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_interface_samples_with_http_info(network_interface_id, **kwargs)  # noqa: E501
            return data

    def get_network_interface_samples_with_http_info(self, network_interface_id, **kwargs):  # noqa: E501
        """get_network_interface_samples  # noqa: E501

        get a network interface's Samples  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_interface_samples_with_http_info(network_interface_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int network_interface_id: network interface id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: NetworkInterfaceSamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_interface_id', 'duration_begin', 'duration_end', 'period']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_interface_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_interface_id' is set
        if ('network_interface_id' not in params or
                params['network_interface_id'] is None):
            raise ValueError("Missing the required parameter `network_interface_id` when calling `get_network_interface_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'network_interface_id' in params:
            path_params['network_interface_id'] = params['network_interface_id']  # noqa: E501

        query_params = []
        if 'duration_begin' in params:
            query_params.append(('duration_begin', params['duration_begin']))  # noqa: E501
        if 'duration_end' in params:
            query_params.append(('duration_end', params['duration_end']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInCookie', 'tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/network-interfaces/{network_interface_id}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkInterfaceSamplesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_network_interfaces(self, **kwargs):  # noqa: E501
        """list_network_interfaces  # noqa: E501

        List network interfaces  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_network_interfaces(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: paging param
        :param int offset: paging param
        :param int master_network_interface_id: master network interface id
        :param int host_id: host id
        :param str role: network interface role
        :return: NetworkInterfacesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_network_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_network_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_network_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """list_network_interfaces  # noqa: E501

        List network interfaces  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_network_interfaces_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: paging param
        :param int offset: paging param
        :param int master_network_interface_id: master network interface id
        :param int host_id: host id
        :param str role: network interface role
        :return: NetworkInterfacesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'master_network_interface_id', 'host_id', 'role']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_network_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'master_network_interface_id' in params:
            query_params.append(('master_network_interface_id', params['master_network_interface_id']))  # noqa: E501
        if 'host_id' in params:
            query_params.append(('host_id', params['host_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInCookie', 'tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/network-interfaces/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkInterfacesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
