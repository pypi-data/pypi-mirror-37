# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.fs_access_group_nestview import FSAccessGroupNestview  # noqa: F401,E501


class FSUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available': 'bool',
        'create': 'datetime',
        'email': 'str',
        'fs_access_group_num': 'int',
        'fs_access_groups': 'list[FSAccessGroupNestview]',
        'id': 'int',
        'name': 'str',
        'password': 'str',
        'type': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'available': 'available',
        'create': 'create',
        'email': 'email',
        'fs_access_group_num': 'fs_access_group_num',
        'fs_access_groups': 'fs_access_groups',
        'id': 'id',
        'name': 'name',
        'password': 'password',
        'type': 'type',
        'update': 'update'
    }

    def __init__(self, available=None, create=None, email=None, fs_access_group_num=None, fs_access_groups=None, id=None, name=None, password=None, type=None, update=None):  # noqa: E501
        """FSUser - a model defined in Swagger"""  # noqa: E501

        self._available = None
        self._create = None
        self._email = None
        self._fs_access_group_num = None
        self._fs_access_groups = None
        self._id = None
        self._name = None
        self._password = None
        self._type = None
        self._update = None
        self.discriminator = None

        if available is not None:
            self.available = available
        if create is not None:
            self.create = create
        if email is not None:
            self.email = email
        if fs_access_group_num is not None:
            self.fs_access_group_num = fs_access_group_num
        if fs_access_groups is not None:
            self.fs_access_groups = fs_access_groups
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if type is not None:
            self.type = type
        if update is not None:
            self.update = update

    @property
    def available(self):
        """Gets the available of this FSUser.  # noqa: E501


        :return: The available of this FSUser.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this FSUser.


        :param available: The available of this FSUser.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def create(self):
        """Gets the create of this FSUser.  # noqa: E501


        :return: The create of this FSUser.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this FSUser.


        :param create: The create of this FSUser.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def email(self):
        """Gets the email of this FSUser.  # noqa: E501


        :return: The email of this FSUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this FSUser.


        :param email: The email of this FSUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def fs_access_group_num(self):
        """Gets the fs_access_group_num of this FSUser.  # noqa: E501


        :return: The fs_access_group_num of this FSUser.  # noqa: E501
        :rtype: int
        """
        return self._fs_access_group_num

    @fs_access_group_num.setter
    def fs_access_group_num(self, fs_access_group_num):
        """Sets the fs_access_group_num of this FSUser.


        :param fs_access_group_num: The fs_access_group_num of this FSUser.  # noqa: E501
        :type: int
        """

        self._fs_access_group_num = fs_access_group_num

    @property
    def fs_access_groups(self):
        """Gets the fs_access_groups of this FSUser.  # noqa: E501


        :return: The fs_access_groups of this FSUser.  # noqa: E501
        :rtype: list[FSAccessGroupNestview]
        """
        return self._fs_access_groups

    @fs_access_groups.setter
    def fs_access_groups(self, fs_access_groups):
        """Sets the fs_access_groups of this FSUser.


        :param fs_access_groups: The fs_access_groups of this FSUser.  # noqa: E501
        :type: list[FSAccessGroupNestview]
        """

        self._fs_access_groups = fs_access_groups

    @property
    def id(self):
        """Gets the id of this FSUser.  # noqa: E501


        :return: The id of this FSUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FSUser.


        :param id: The id of this FSUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FSUser.  # noqa: E501


        :return: The name of this FSUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FSUser.


        :param name: The name of this FSUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this FSUser.  # noqa: E501


        :return: The password of this FSUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this FSUser.


        :param password: The password of this FSUser.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def type(self):
        """Gets the type of this FSUser.  # noqa: E501


        :return: The type of this FSUser.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FSUser.


        :param type: The type of this FSUser.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def update(self):
        """Gets the update of this FSUser.  # noqa: E501


        :return: The update of this FSUser.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this FSUser.


        :param update: The update of this FSUser.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
