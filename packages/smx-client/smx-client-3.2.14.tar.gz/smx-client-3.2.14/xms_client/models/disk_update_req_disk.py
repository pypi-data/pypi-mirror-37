# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DiskUpdateReqDisk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disk_type': 'str',
        'lighting_status': 'str',
        'power_safe': 'bool'
    }

    attribute_map = {
        'disk_type': 'disk_type',
        'lighting_status': 'lighting_status',
        'power_safe': 'power_safe'
    }

    def __init__(self, disk_type=None, lighting_status=None, power_safe=None):  # noqa: E501
        """DiskUpdateReqDisk - a model defined in Swagger"""  # noqa: E501

        self._disk_type = None
        self._lighting_status = None
        self._power_safe = None
        self.discriminator = None

        if disk_type is not None:
            self.disk_type = disk_type
        if lighting_status is not None:
            self.lighting_status = lighting_status
        if power_safe is not None:
            self.power_safe = power_safe

    @property
    def disk_type(self):
        """Gets the disk_type of this DiskUpdateReqDisk.  # noqa: E501


        :return: The disk_type of this DiskUpdateReqDisk.  # noqa: E501
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this DiskUpdateReqDisk.


        :param disk_type: The disk_type of this DiskUpdateReqDisk.  # noqa: E501
        :type: str
        """

        self._disk_type = disk_type

    @property
    def lighting_status(self):
        """Gets the lighting_status of this DiskUpdateReqDisk.  # noqa: E501


        :return: The lighting_status of this DiskUpdateReqDisk.  # noqa: E501
        :rtype: str
        """
        return self._lighting_status

    @lighting_status.setter
    def lighting_status(self, lighting_status):
        """Sets the lighting_status of this DiskUpdateReqDisk.


        :param lighting_status: The lighting_status of this DiskUpdateReqDisk.  # noqa: E501
        :type: str
        """

        self._lighting_status = lighting_status

    @property
    def power_safe(self):
        """Gets the power_safe of this DiskUpdateReqDisk.  # noqa: E501


        :return: The power_safe of this DiskUpdateReqDisk.  # noqa: E501
        :rtype: bool
        """
        return self._power_safe

    @power_safe.setter
    def power_safe(self, power_safe):
        """Sets the power_safe of this DiskUpdateReqDisk.


        :param power_safe: The power_safe of this DiskUpdateReqDisk.  # noqa: E501
        :type: bool
        """

        self._power_safe = power_safe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskUpdateReqDisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
