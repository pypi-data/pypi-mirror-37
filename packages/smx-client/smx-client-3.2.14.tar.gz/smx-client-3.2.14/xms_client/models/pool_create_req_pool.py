# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.pool_rule_req import PoolRuleReq  # noqa: F401,E501


class PoolCreateReqPool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coding_chunk_num': 'int',
        'data_chunk_num': 'int',
        'failure_domain_type': 'str',
        'name': 'str',
        'osd_ids': 'list[int]',
        'pool_role': 'str',
        'pool_type': 'str',
        'primary_placement_node_id': 'int',
        'protection_domain_id': 'int',
        'ruleset': 'list[PoolRuleReq]',
        'size': 'int'
    }

    attribute_map = {
        'coding_chunk_num': 'coding_chunk_num',
        'data_chunk_num': 'data_chunk_num',
        'failure_domain_type': 'failure_domain_type',
        'name': 'name',
        'osd_ids': 'osd_ids',
        'pool_role': 'pool_role',
        'pool_type': 'pool_type',
        'primary_placement_node_id': 'primary_placement_node_id',
        'protection_domain_id': 'protection_domain_id',
        'ruleset': 'ruleset',
        'size': 'size'
    }

    def __init__(self, coding_chunk_num=None, data_chunk_num=None, failure_domain_type=None, name=None, osd_ids=None, pool_role=None, pool_type=None, primary_placement_node_id=None, protection_domain_id=None, ruleset=None, size=None):  # noqa: E501
        """PoolCreateReqPool - a model defined in Swagger"""  # noqa: E501

        self._coding_chunk_num = None
        self._data_chunk_num = None
        self._failure_domain_type = None
        self._name = None
        self._osd_ids = None
        self._pool_role = None
        self._pool_type = None
        self._primary_placement_node_id = None
        self._protection_domain_id = None
        self._ruleset = None
        self._size = None
        self.discriminator = None

        if coding_chunk_num is not None:
            self.coding_chunk_num = coding_chunk_num
        if data_chunk_num is not None:
            self.data_chunk_num = data_chunk_num
        if failure_domain_type is not None:
            self.failure_domain_type = failure_domain_type
        if name is not None:
            self.name = name
        if osd_ids is not None:
            self.osd_ids = osd_ids
        if pool_role is not None:
            self.pool_role = pool_role
        if pool_type is not None:
            self.pool_type = pool_type
        if primary_placement_node_id is not None:
            self.primary_placement_node_id = primary_placement_node_id
        if protection_domain_id is not None:
            self.protection_domain_id = protection_domain_id
        if ruleset is not None:
            self.ruleset = ruleset
        if size is not None:
            self.size = size

    @property
    def coding_chunk_num(self):
        """Gets the coding_chunk_num of this PoolCreateReqPool.  # noqa: E501


        :return: The coding_chunk_num of this PoolCreateReqPool.  # noqa: E501
        :rtype: int
        """
        return self._coding_chunk_num

    @coding_chunk_num.setter
    def coding_chunk_num(self, coding_chunk_num):
        """Sets the coding_chunk_num of this PoolCreateReqPool.


        :param coding_chunk_num: The coding_chunk_num of this PoolCreateReqPool.  # noqa: E501
        :type: int
        """

        self._coding_chunk_num = coding_chunk_num

    @property
    def data_chunk_num(self):
        """Gets the data_chunk_num of this PoolCreateReqPool.  # noqa: E501


        :return: The data_chunk_num of this PoolCreateReqPool.  # noqa: E501
        :rtype: int
        """
        return self._data_chunk_num

    @data_chunk_num.setter
    def data_chunk_num(self, data_chunk_num):
        """Sets the data_chunk_num of this PoolCreateReqPool.


        :param data_chunk_num: The data_chunk_num of this PoolCreateReqPool.  # noqa: E501
        :type: int
        """

        self._data_chunk_num = data_chunk_num

    @property
    def failure_domain_type(self):
        """Gets the failure_domain_type of this PoolCreateReqPool.  # noqa: E501


        :return: The failure_domain_type of this PoolCreateReqPool.  # noqa: E501
        :rtype: str
        """
        return self._failure_domain_type

    @failure_domain_type.setter
    def failure_domain_type(self, failure_domain_type):
        """Sets the failure_domain_type of this PoolCreateReqPool.


        :param failure_domain_type: The failure_domain_type of this PoolCreateReqPool.  # noqa: E501
        :type: str
        """

        self._failure_domain_type = failure_domain_type

    @property
    def name(self):
        """Gets the name of this PoolCreateReqPool.  # noqa: E501


        :return: The name of this PoolCreateReqPool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PoolCreateReqPool.


        :param name: The name of this PoolCreateReqPool.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def osd_ids(self):
        """Gets the osd_ids of this PoolCreateReqPool.  # noqa: E501


        :return: The osd_ids of this PoolCreateReqPool.  # noqa: E501
        :rtype: list[int]
        """
        return self._osd_ids

    @osd_ids.setter
    def osd_ids(self, osd_ids):
        """Sets the osd_ids of this PoolCreateReqPool.


        :param osd_ids: The osd_ids of this PoolCreateReqPool.  # noqa: E501
        :type: list[int]
        """

        self._osd_ids = osd_ids

    @property
    def pool_role(self):
        """Gets the pool_role of this PoolCreateReqPool.  # noqa: E501


        :return: The pool_role of this PoolCreateReqPool.  # noqa: E501
        :rtype: str
        """
        return self._pool_role

    @pool_role.setter
    def pool_role(self, pool_role):
        """Sets the pool_role of this PoolCreateReqPool.


        :param pool_role: The pool_role of this PoolCreateReqPool.  # noqa: E501
        :type: str
        """

        self._pool_role = pool_role

    @property
    def pool_type(self):
        """Gets the pool_type of this PoolCreateReqPool.  # noqa: E501


        :return: The pool_type of this PoolCreateReqPool.  # noqa: E501
        :rtype: str
        """
        return self._pool_type

    @pool_type.setter
    def pool_type(self, pool_type):
        """Sets the pool_type of this PoolCreateReqPool.


        :param pool_type: The pool_type of this PoolCreateReqPool.  # noqa: E501
        :type: str
        """

        self._pool_type = pool_type

    @property
    def primary_placement_node_id(self):
        """Gets the primary_placement_node_id of this PoolCreateReqPool.  # noqa: E501


        :return: The primary_placement_node_id of this PoolCreateReqPool.  # noqa: E501
        :rtype: int
        """
        return self._primary_placement_node_id

    @primary_placement_node_id.setter
    def primary_placement_node_id(self, primary_placement_node_id):
        """Sets the primary_placement_node_id of this PoolCreateReqPool.


        :param primary_placement_node_id: The primary_placement_node_id of this PoolCreateReqPool.  # noqa: E501
        :type: int
        """

        self._primary_placement_node_id = primary_placement_node_id

    @property
    def protection_domain_id(self):
        """Gets the protection_domain_id of this PoolCreateReqPool.  # noqa: E501


        :return: The protection_domain_id of this PoolCreateReqPool.  # noqa: E501
        :rtype: int
        """
        return self._protection_domain_id

    @protection_domain_id.setter
    def protection_domain_id(self, protection_domain_id):
        """Sets the protection_domain_id of this PoolCreateReqPool.


        :param protection_domain_id: The protection_domain_id of this PoolCreateReqPool.  # noqa: E501
        :type: int
        """

        self._protection_domain_id = protection_domain_id

    @property
    def ruleset(self):
        """Gets the ruleset of this PoolCreateReqPool.  # noqa: E501


        :return: The ruleset of this PoolCreateReqPool.  # noqa: E501
        :rtype: list[PoolRuleReq]
        """
        return self._ruleset

    @ruleset.setter
    def ruleset(self, ruleset):
        """Sets the ruleset of this PoolCreateReqPool.


        :param ruleset: The ruleset of this PoolCreateReqPool.  # noqa: E501
        :type: list[PoolRuleReq]
        """

        self._ruleset = ruleset

    @property
    def size(self):
        """Gets the size of this PoolCreateReqPool.  # noqa: E501


        :return: The size of this PoolCreateReqPool.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PoolCreateReqPool.


        :param size: The size of this PoolCreateReqPool.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolCreateReqPool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
