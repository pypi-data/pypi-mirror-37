# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class ObjectStoragePolicyCreateReqPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compress': 'bool',
        'crypto': 'bool',
        'data_pool_id': 'int',
        'data_pool_ids': 'list[int]',
        'description': 'str',
        'index_pool_id': 'int',
        'name': 'str',
        'object_size_threshold': 'int'
    }

    attribute_map = {
        'compress': 'compress',
        'crypto': 'crypto',
        'data_pool_id': 'data_pool_id',
        'data_pool_ids': 'data_pool_ids',
        'description': 'description',
        'index_pool_id': 'index_pool_id',
        'name': 'name',
        'object_size_threshold': 'object_size_threshold'
    }

    def __init__(self, compress=None, crypto=None, data_pool_id=None, data_pool_ids=None, description=None, index_pool_id=None, name=None, object_size_threshold=None):  # noqa: E501
        """ObjectStoragePolicyCreateReqPolicy - a model defined in Swagger"""  # noqa: E501

        self._compress = None
        self._crypto = None
        self._data_pool_id = None
        self._data_pool_ids = None
        self._description = None
        self._index_pool_id = None
        self._name = None
        self._object_size_threshold = None
        self.discriminator = None

        self.compress = compress
        self.crypto = crypto
        self.data_pool_id = data_pool_id
        self.data_pool_ids = data_pool_ids
        if description is not None:
            self.description = description
        self.index_pool_id = index_pool_id
        self.name = name
        if object_size_threshold is not None:
            self.object_size_threshold = object_size_threshold

    @property
    def compress(self):
        """Gets the compress of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501


        :return: The compress of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this ObjectStoragePolicyCreateReqPolicy.


        :param compress: The compress of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :type: bool
        """
        if compress is None:
            raise ValueError("Invalid value for `compress`, must not be `None`")  # noqa: E501

        self._compress = compress

    @property
    def crypto(self):
        """Gets the crypto of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501


        :return: The crypto of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._crypto

    @crypto.setter
    def crypto(self, crypto):
        """Sets the crypto of this ObjectStoragePolicyCreateReqPolicy.


        :param crypto: The crypto of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :type: bool
        """
        if crypto is None:
            raise ValueError("Invalid value for `crypto`, must not be `None`")  # noqa: E501

        self._crypto = crypto

    @property
    def data_pool_id(self):
        """Gets the data_pool_id of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501


        :return: The data_pool_id of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :rtype: int
        """
        return self._data_pool_id

    @data_pool_id.setter
    def data_pool_id(self, data_pool_id):
        """Sets the data_pool_id of this ObjectStoragePolicyCreateReqPolicy.


        :param data_pool_id: The data_pool_id of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :type: int
        """
        if data_pool_id is None:
            raise ValueError("Invalid value for `data_pool_id`, must not be `None`")  # noqa: E501

        self._data_pool_id = data_pool_id

    @property
    def data_pool_ids(self):
        """Gets the data_pool_ids of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501


        :return: The data_pool_ids of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :rtype: list[int]
        """
        return self._data_pool_ids

    @data_pool_ids.setter
    def data_pool_ids(self, data_pool_ids):
        """Sets the data_pool_ids of this ObjectStoragePolicyCreateReqPolicy.


        :param data_pool_ids: The data_pool_ids of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :type: list[int]
        """
        if data_pool_ids is None:
            raise ValueError("Invalid value for `data_pool_ids`, must not be `None`")  # noqa: E501

        self._data_pool_ids = data_pool_ids

    @property
    def description(self):
        """Gets the description of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501


        :return: The description of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ObjectStoragePolicyCreateReqPolicy.


        :param description: The description of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def index_pool_id(self):
        """Gets the index_pool_id of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501


        :return: The index_pool_id of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :rtype: int
        """
        return self._index_pool_id

    @index_pool_id.setter
    def index_pool_id(self, index_pool_id):
        """Sets the index_pool_id of this ObjectStoragePolicyCreateReqPolicy.


        :param index_pool_id: The index_pool_id of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :type: int
        """
        if index_pool_id is None:
            raise ValueError("Invalid value for `index_pool_id`, must not be `None`")  # noqa: E501

        self._index_pool_id = index_pool_id

    @property
    def name(self):
        """Gets the name of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501


        :return: The name of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectStoragePolicyCreateReqPolicy.


        :param name: The name of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def object_size_threshold(self):
        """Gets the object_size_threshold of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501


        :return: The object_size_threshold of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :rtype: int
        """
        return self._object_size_threshold

    @object_size_threshold.setter
    def object_size_threshold(self, object_size_threshold):
        """Sets the object_size_threshold of this ObjectStoragePolicyCreateReqPolicy.


        :param object_size_threshold: The object_size_threshold of this ObjectStoragePolicyCreateReqPolicy.  # noqa: E501
        :type: int
        """

        self._object_size_threshold = object_size_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStoragePolicyCreateReqPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
