# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class VolumeStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'migrate_write_bandwidth_kbyte': 'float',
        'migrate_write_iops': 'float',
        'migrate_write_latency_us': 'float',
        'read_bandwidth_kbyte': 'float',
        'read_iops': 'float',
        'read_latency_us': 'float',
        'total_bandwidth_kbyte': 'float',
        'total_iops': 'float',
        'write_bandwidth_kbyte': 'float',
        'write_iops': 'float',
        'write_latency_us': 'float'
    }

    attribute_map = {
        'create': 'create',
        'migrate_write_bandwidth_kbyte': 'migrate_write_bandwidth_kbyte',
        'migrate_write_iops': 'migrate_write_iops',
        'migrate_write_latency_us': 'migrate_write_latency_us',
        'read_bandwidth_kbyte': 'read_bandwidth_kbyte',
        'read_iops': 'read_iops',
        'read_latency_us': 'read_latency_us',
        'total_bandwidth_kbyte': 'total_bandwidth_kbyte',
        'total_iops': 'total_iops',
        'write_bandwidth_kbyte': 'write_bandwidth_kbyte',
        'write_iops': 'write_iops',
        'write_latency_us': 'write_latency_us'
    }

    def __init__(self, create=None, migrate_write_bandwidth_kbyte=None, migrate_write_iops=None, migrate_write_latency_us=None, read_bandwidth_kbyte=None, read_iops=None, read_latency_us=None, total_bandwidth_kbyte=None, total_iops=None, write_bandwidth_kbyte=None, write_iops=None, write_latency_us=None):  # noqa: E501
        """VolumeStat - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._migrate_write_bandwidth_kbyte = None
        self._migrate_write_iops = None
        self._migrate_write_latency_us = None
        self._read_bandwidth_kbyte = None
        self._read_iops = None
        self._read_latency_us = None
        self._total_bandwidth_kbyte = None
        self._total_iops = None
        self._write_bandwidth_kbyte = None
        self._write_iops = None
        self._write_latency_us = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if migrate_write_bandwidth_kbyte is not None:
            self.migrate_write_bandwidth_kbyte = migrate_write_bandwidth_kbyte
        if migrate_write_iops is not None:
            self.migrate_write_iops = migrate_write_iops
        if migrate_write_latency_us is not None:
            self.migrate_write_latency_us = migrate_write_latency_us
        if read_bandwidth_kbyte is not None:
            self.read_bandwidth_kbyte = read_bandwidth_kbyte
        if read_iops is not None:
            self.read_iops = read_iops
        if read_latency_us is not None:
            self.read_latency_us = read_latency_us
        if total_bandwidth_kbyte is not None:
            self.total_bandwidth_kbyte = total_bandwidth_kbyte
        if total_iops is not None:
            self.total_iops = total_iops
        if write_bandwidth_kbyte is not None:
            self.write_bandwidth_kbyte = write_bandwidth_kbyte
        if write_iops is not None:
            self.write_iops = write_iops
        if write_latency_us is not None:
            self.write_latency_us = write_latency_us

    @property
    def create(self):
        """Gets the create of this VolumeStat.  # noqa: E501


        :return: The create of this VolumeStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this VolumeStat.


        :param create: The create of this VolumeStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def migrate_write_bandwidth_kbyte(self):
        """Gets the migrate_write_bandwidth_kbyte of this VolumeStat.  # noqa: E501


        :return: The migrate_write_bandwidth_kbyte of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._migrate_write_bandwidth_kbyte

    @migrate_write_bandwidth_kbyte.setter
    def migrate_write_bandwidth_kbyte(self, migrate_write_bandwidth_kbyte):
        """Sets the migrate_write_bandwidth_kbyte of this VolumeStat.


        :param migrate_write_bandwidth_kbyte: The migrate_write_bandwidth_kbyte of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._migrate_write_bandwidth_kbyte = migrate_write_bandwidth_kbyte

    @property
    def migrate_write_iops(self):
        """Gets the migrate_write_iops of this VolumeStat.  # noqa: E501


        :return: The migrate_write_iops of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._migrate_write_iops

    @migrate_write_iops.setter
    def migrate_write_iops(self, migrate_write_iops):
        """Sets the migrate_write_iops of this VolumeStat.


        :param migrate_write_iops: The migrate_write_iops of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._migrate_write_iops = migrate_write_iops

    @property
    def migrate_write_latency_us(self):
        """Gets the migrate_write_latency_us of this VolumeStat.  # noqa: E501


        :return: The migrate_write_latency_us of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._migrate_write_latency_us

    @migrate_write_latency_us.setter
    def migrate_write_latency_us(self, migrate_write_latency_us):
        """Sets the migrate_write_latency_us of this VolumeStat.


        :param migrate_write_latency_us: The migrate_write_latency_us of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._migrate_write_latency_us = migrate_write_latency_us

    @property
    def read_bandwidth_kbyte(self):
        """Gets the read_bandwidth_kbyte of this VolumeStat.  # noqa: E501


        :return: The read_bandwidth_kbyte of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._read_bandwidth_kbyte

    @read_bandwidth_kbyte.setter
    def read_bandwidth_kbyte(self, read_bandwidth_kbyte):
        """Sets the read_bandwidth_kbyte of this VolumeStat.


        :param read_bandwidth_kbyte: The read_bandwidth_kbyte of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._read_bandwidth_kbyte = read_bandwidth_kbyte

    @property
    def read_iops(self):
        """Gets the read_iops of this VolumeStat.  # noqa: E501


        :return: The read_iops of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._read_iops

    @read_iops.setter
    def read_iops(self, read_iops):
        """Sets the read_iops of this VolumeStat.


        :param read_iops: The read_iops of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._read_iops = read_iops

    @property
    def read_latency_us(self):
        """Gets the read_latency_us of this VolumeStat.  # noqa: E501


        :return: The read_latency_us of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._read_latency_us

    @read_latency_us.setter
    def read_latency_us(self, read_latency_us):
        """Sets the read_latency_us of this VolumeStat.


        :param read_latency_us: The read_latency_us of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._read_latency_us = read_latency_us

    @property
    def total_bandwidth_kbyte(self):
        """Gets the total_bandwidth_kbyte of this VolumeStat.  # noqa: E501


        :return: The total_bandwidth_kbyte of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._total_bandwidth_kbyte

    @total_bandwidth_kbyte.setter
    def total_bandwidth_kbyte(self, total_bandwidth_kbyte):
        """Sets the total_bandwidth_kbyte of this VolumeStat.


        :param total_bandwidth_kbyte: The total_bandwidth_kbyte of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._total_bandwidth_kbyte = total_bandwidth_kbyte

    @property
    def total_iops(self):
        """Gets the total_iops of this VolumeStat.  # noqa: E501


        :return: The total_iops of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._total_iops

    @total_iops.setter
    def total_iops(self, total_iops):
        """Sets the total_iops of this VolumeStat.


        :param total_iops: The total_iops of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._total_iops = total_iops

    @property
    def write_bandwidth_kbyte(self):
        """Gets the write_bandwidth_kbyte of this VolumeStat.  # noqa: E501


        :return: The write_bandwidth_kbyte of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._write_bandwidth_kbyte

    @write_bandwidth_kbyte.setter
    def write_bandwidth_kbyte(self, write_bandwidth_kbyte):
        """Sets the write_bandwidth_kbyte of this VolumeStat.


        :param write_bandwidth_kbyte: The write_bandwidth_kbyte of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._write_bandwidth_kbyte = write_bandwidth_kbyte

    @property
    def write_iops(self):
        """Gets the write_iops of this VolumeStat.  # noqa: E501


        :return: The write_iops of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._write_iops

    @write_iops.setter
    def write_iops(self, write_iops):
        """Sets the write_iops of this VolumeStat.


        :param write_iops: The write_iops of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._write_iops = write_iops

    @property
    def write_latency_us(self):
        """Gets the write_latency_us of this VolumeStat.  # noqa: E501


        :return: The write_latency_us of this VolumeStat.  # noqa: E501
        :rtype: float
        """
        return self._write_latency_us

    @write_latency_us.setter
    def write_latency_us(self, write_latency_us):
        """Sets the write_latency_us of this VolumeStat.


        :param write_latency_us: The write_latency_us of this VolumeStat.  # noqa: E501
        :type: float
        """

        self._write_latency_us = write_latency_us

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
