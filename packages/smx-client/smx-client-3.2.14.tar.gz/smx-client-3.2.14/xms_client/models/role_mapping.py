# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.identity_platform_nestview import IdentityPlatformNestview  # noqa: F401,E501


class RoleMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'id': 'int',
        'identity_platform': 'IdentityPlatformNestview',
        'role': 'str',
        'update': 'datetime',
        'value': 'str'
    }

    attribute_map = {
        'create': 'create',
        'id': 'id',
        'identity_platform': 'identity_platform',
        'role': 'role',
        'update': 'update',
        'value': 'value'
    }

    def __init__(self, create=None, id=None, identity_platform=None, role=None, update=None, value=None):  # noqa: E501
        """RoleMapping - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._id = None
        self._identity_platform = None
        self._role = None
        self._update = None
        self._value = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if id is not None:
            self.id = id
        if identity_platform is not None:
            self.identity_platform = identity_platform
        if role is not None:
            self.role = role
        if update is not None:
            self.update = update
        if value is not None:
            self.value = value

    @property
    def create(self):
        """Gets the create of this RoleMapping.  # noqa: E501

        time of creating identity platform  # noqa: E501

        :return: The create of this RoleMapping.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this RoleMapping.

        time of creating identity platform  # noqa: E501

        :param create: The create of this RoleMapping.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def id(self):
        """Gets the id of this RoleMapping.  # noqa: E501

        id of role mapping  # noqa: E501

        :return: The id of this RoleMapping.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RoleMapping.

        id of role mapping  # noqa: E501

        :param id: The id of this RoleMapping.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def identity_platform(self):
        """Gets the identity_platform of this RoleMapping.  # noqa: E501

        identity platform of role mapping  # noqa: E501

        :return: The identity_platform of this RoleMapping.  # noqa: E501
        :rtype: IdentityPlatformNestview
        """
        return self._identity_platform

    @identity_platform.setter
    def identity_platform(self, identity_platform):
        """Sets the identity_platform of this RoleMapping.

        identity platform of role mapping  # noqa: E501

        :param identity_platform: The identity_platform of this RoleMapping.  # noqa: E501
        :type: IdentityPlatformNestview
        """

        self._identity_platform = identity_platform

    @property
    def role(self):
        """Gets the role of this RoleMapping.  # noqa: E501

        mapped role of sds platform  # noqa: E501

        :return: The role of this RoleMapping.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RoleMapping.

        mapped role of sds platform  # noqa: E501

        :param role: The role of this RoleMapping.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def update(self):
        """Gets the update of this RoleMapping.  # noqa: E501

        time of updating identity platform  # noqa: E501

        :return: The update of this RoleMapping.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this RoleMapping.

        time of updating identity platform  # noqa: E501

        :param update: The update of this RoleMapping.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def value(self):
        """Gets the value of this RoleMapping.  # noqa: E501

        roles of external identity platform  # noqa: E501

        :return: The value of this RoleMapping.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RoleMapping.

        roles of external identity platform  # noqa: E501

        :param value: The value of this RoleMapping.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
