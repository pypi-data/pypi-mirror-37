# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class EmailConfigUpdateReqEmailConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'smtp_enable_ssl': 'bool',
        'smtp_host': 'str',
        'smtp_password': 'str',
        'smtp_port': 'int',
        'smtp_skip_tls_cert_verify': 'bool',
        'smtp_user': 'str',
        'subject': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'smtp_enable_ssl': 'smtp_enable_ssl',
        'smtp_host': 'smtp_host',
        'smtp_password': 'smtp_password',
        'smtp_port': 'smtp_port',
        'smtp_skip_tls_cert_verify': 'smtp_skip_tls_cert_verify',
        'smtp_user': 'smtp_user',
        'subject': 'subject'
    }

    def __init__(self, enabled=None, smtp_enable_ssl=None, smtp_host=None, smtp_password=None, smtp_port=None, smtp_skip_tls_cert_verify=None, smtp_user=None, subject=None):  # noqa: E501
        """EmailConfigUpdateReqEmailConfig - a model defined in Swagger"""  # noqa: E501

        self._enabled = None
        self._smtp_enable_ssl = None
        self._smtp_host = None
        self._smtp_password = None
        self._smtp_port = None
        self._smtp_skip_tls_cert_verify = None
        self._smtp_user = None
        self._subject = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if smtp_enable_ssl is not None:
            self.smtp_enable_ssl = smtp_enable_ssl
        if smtp_host is not None:
            self.smtp_host = smtp_host
        if smtp_password is not None:
            self.smtp_password = smtp_password
        if smtp_port is not None:
            self.smtp_port = smtp_port
        if smtp_skip_tls_cert_verify is not None:
            self.smtp_skip_tls_cert_verify = smtp_skip_tls_cert_verify
        if smtp_user is not None:
            self.smtp_user = smtp_user
        if subject is not None:
            self.subject = subject

    @property
    def enabled(self):
        """Gets the enabled of this EmailConfigUpdateReqEmailConfig.  # noqa: E501


        :return: The enabled of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EmailConfigUpdateReqEmailConfig.


        :param enabled: The enabled of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def smtp_enable_ssl(self):
        """Gets the smtp_enable_ssl of this EmailConfigUpdateReqEmailConfig.  # noqa: E501


        :return: The smtp_enable_ssl of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :rtype: bool
        """
        return self._smtp_enable_ssl

    @smtp_enable_ssl.setter
    def smtp_enable_ssl(self, smtp_enable_ssl):
        """Sets the smtp_enable_ssl of this EmailConfigUpdateReqEmailConfig.


        :param smtp_enable_ssl: The smtp_enable_ssl of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :type: bool
        """

        self._smtp_enable_ssl = smtp_enable_ssl

    @property
    def smtp_host(self):
        """Gets the smtp_host of this EmailConfigUpdateReqEmailConfig.  # noqa: E501


        :return: The smtp_host of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :rtype: str
        """
        return self._smtp_host

    @smtp_host.setter
    def smtp_host(self, smtp_host):
        """Sets the smtp_host of this EmailConfigUpdateReqEmailConfig.


        :param smtp_host: The smtp_host of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :type: str
        """

        self._smtp_host = smtp_host

    @property
    def smtp_password(self):
        """Gets the smtp_password of this EmailConfigUpdateReqEmailConfig.  # noqa: E501


        :return: The smtp_password of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :rtype: str
        """
        return self._smtp_password

    @smtp_password.setter
    def smtp_password(self, smtp_password):
        """Sets the smtp_password of this EmailConfigUpdateReqEmailConfig.


        :param smtp_password: The smtp_password of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :type: str
        """

        self._smtp_password = smtp_password

    @property
    def smtp_port(self):
        """Gets the smtp_port of this EmailConfigUpdateReqEmailConfig.  # noqa: E501


        :return: The smtp_port of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :rtype: int
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port):
        """Sets the smtp_port of this EmailConfigUpdateReqEmailConfig.


        :param smtp_port: The smtp_port of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :type: int
        """

        self._smtp_port = smtp_port

    @property
    def smtp_skip_tls_cert_verify(self):
        """Gets the smtp_skip_tls_cert_verify of this EmailConfigUpdateReqEmailConfig.  # noqa: E501


        :return: The smtp_skip_tls_cert_verify of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :rtype: bool
        """
        return self._smtp_skip_tls_cert_verify

    @smtp_skip_tls_cert_verify.setter
    def smtp_skip_tls_cert_verify(self, smtp_skip_tls_cert_verify):
        """Sets the smtp_skip_tls_cert_verify of this EmailConfigUpdateReqEmailConfig.


        :param smtp_skip_tls_cert_verify: The smtp_skip_tls_cert_verify of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :type: bool
        """

        self._smtp_skip_tls_cert_verify = smtp_skip_tls_cert_verify

    @property
    def smtp_user(self):
        """Gets the smtp_user of this EmailConfigUpdateReqEmailConfig.  # noqa: E501


        :return: The smtp_user of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :rtype: str
        """
        return self._smtp_user

    @smtp_user.setter
    def smtp_user(self, smtp_user):
        """Sets the smtp_user of this EmailConfigUpdateReqEmailConfig.


        :param smtp_user: The smtp_user of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :type: str
        """

        self._smtp_user = smtp_user

    @property
    def subject(self):
        """Gets the subject of this EmailConfigUpdateReqEmailConfig.  # noqa: E501


        :return: The subject of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailConfigUpdateReqEmailConfig.


        :param subject: The subject of this EmailConfigUpdateReqEmailConfig.  # noqa: E501
        :type: str
        """

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailConfigUpdateReqEmailConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
