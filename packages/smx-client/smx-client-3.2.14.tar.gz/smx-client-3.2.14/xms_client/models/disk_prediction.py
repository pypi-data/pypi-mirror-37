# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.prediction_point import PredictionPoint  # noqa: F401,E501


class DiskPrediction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'id': 'int',
        'used_kbyte_1day': 'int',
        'used_kbyte_30days': 'int',
        'used_kbyte_7days': 'int',
        'used_kbyte_points': 'list[PredictionPoint]'
    }

    attribute_map = {
        'create': 'create',
        'id': 'id',
        'used_kbyte_1day': 'used_kbyte_1day',
        'used_kbyte_30days': 'used_kbyte_30days',
        'used_kbyte_7days': 'used_kbyte_7days',
        'used_kbyte_points': 'used_kbyte_points'
    }

    def __init__(self, create=None, id=None, used_kbyte_1day=None, used_kbyte_30days=None, used_kbyte_7days=None, used_kbyte_points=None):  # noqa: E501
        """DiskPrediction - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._id = None
        self._used_kbyte_1day = None
        self._used_kbyte_30days = None
        self._used_kbyte_7days = None
        self._used_kbyte_points = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if id is not None:
            self.id = id
        if used_kbyte_1day is not None:
            self.used_kbyte_1day = used_kbyte_1day
        if used_kbyte_30days is not None:
            self.used_kbyte_30days = used_kbyte_30days
        if used_kbyte_7days is not None:
            self.used_kbyte_7days = used_kbyte_7days
        if used_kbyte_points is not None:
            self.used_kbyte_points = used_kbyte_points

    @property
    def create(self):
        """Gets the create of this DiskPrediction.  # noqa: E501


        :return: The create of this DiskPrediction.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DiskPrediction.


        :param create: The create of this DiskPrediction.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def id(self):
        """Gets the id of this DiskPrediction.  # noqa: E501


        :return: The id of this DiskPrediction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiskPrediction.


        :param id: The id of this DiskPrediction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def used_kbyte_1day(self):
        """Gets the used_kbyte_1day of this DiskPrediction.  # noqa: E501


        :return: The used_kbyte_1day of this DiskPrediction.  # noqa: E501
        :rtype: int
        """
        return self._used_kbyte_1day

    @used_kbyte_1day.setter
    def used_kbyte_1day(self, used_kbyte_1day):
        """Sets the used_kbyte_1day of this DiskPrediction.


        :param used_kbyte_1day: The used_kbyte_1day of this DiskPrediction.  # noqa: E501
        :type: int
        """

        self._used_kbyte_1day = used_kbyte_1day

    @property
    def used_kbyte_30days(self):
        """Gets the used_kbyte_30days of this DiskPrediction.  # noqa: E501


        :return: The used_kbyte_30days of this DiskPrediction.  # noqa: E501
        :rtype: int
        """
        return self._used_kbyte_30days

    @used_kbyte_30days.setter
    def used_kbyte_30days(self, used_kbyte_30days):
        """Sets the used_kbyte_30days of this DiskPrediction.


        :param used_kbyte_30days: The used_kbyte_30days of this DiskPrediction.  # noqa: E501
        :type: int
        """

        self._used_kbyte_30days = used_kbyte_30days

    @property
    def used_kbyte_7days(self):
        """Gets the used_kbyte_7days of this DiskPrediction.  # noqa: E501


        :return: The used_kbyte_7days of this DiskPrediction.  # noqa: E501
        :rtype: int
        """
        return self._used_kbyte_7days

    @used_kbyte_7days.setter
    def used_kbyte_7days(self, used_kbyte_7days):
        """Sets the used_kbyte_7days of this DiskPrediction.


        :param used_kbyte_7days: The used_kbyte_7days of this DiskPrediction.  # noqa: E501
        :type: int
        """

        self._used_kbyte_7days = used_kbyte_7days

    @property
    def used_kbyte_points(self):
        """Gets the used_kbyte_points of this DiskPrediction.  # noqa: E501


        :return: The used_kbyte_points of this DiskPrediction.  # noqa: E501
        :rtype: list[PredictionPoint]
        """
        return self._used_kbyte_points

    @used_kbyte_points.setter
    def used_kbyte_points(self, used_kbyte_points):
        """Sets the used_kbyte_points of this DiskPrediction.


        :param used_kbyte_points: The used_kbyte_points of this DiskPrediction.  # noqa: E501
        :type: list[PredictionPoint]
        """

        self._used_kbyte_points = used_kbyte_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskPrediction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
