# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.host_nestview import HostNestview  # noqa: F401,E501


class DpGateway(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_port': 'int',
        'create': 'datetime',
        'gateway_port': 'int',
        'host': 'HostNestview',
        'id': 'int',
        'name': 'str',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'admin_port': 'admin_port',
        'create': 'create',
        'gateway_port': 'gateway_port',
        'host': 'host',
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, admin_port=None, create=None, gateway_port=None, host=None, id=None, name=None, status=None, update=None):  # noqa: E501
        """DpGateway - a model defined in Swagger"""  # noqa: E501

        self._admin_port = None
        self._create = None
        self._gateway_port = None
        self._host = None
        self._id = None
        self._name = None
        self._status = None
        self._update = None
        self.discriminator = None

        if admin_port is not None:
            self.admin_port = admin_port
        if create is not None:
            self.create = create
        if gateway_port is not None:
            self.gateway_port = gateway_port
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def admin_port(self):
        """Gets the admin_port of this DpGateway.  # noqa: E501


        :return: The admin_port of this DpGateway.  # noqa: E501
        :rtype: int
        """
        return self._admin_port

    @admin_port.setter
    def admin_port(self, admin_port):
        """Sets the admin_port of this DpGateway.


        :param admin_port: The admin_port of this DpGateway.  # noqa: E501
        :type: int
        """

        self._admin_port = admin_port

    @property
    def create(self):
        """Gets the create of this DpGateway.  # noqa: E501


        :return: The create of this DpGateway.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DpGateway.


        :param create: The create of this DpGateway.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def gateway_port(self):
        """Gets the gateway_port of this DpGateway.  # noqa: E501


        :return: The gateway_port of this DpGateway.  # noqa: E501
        :rtype: int
        """
        return self._gateway_port

    @gateway_port.setter
    def gateway_port(self, gateway_port):
        """Sets the gateway_port of this DpGateway.


        :param gateway_port: The gateway_port of this DpGateway.  # noqa: E501
        :type: int
        """

        self._gateway_port = gateway_port

    @property
    def host(self):
        """Gets the host of this DpGateway.  # noqa: E501


        :return: The host of this DpGateway.  # noqa: E501
        :rtype: HostNestview
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this DpGateway.


        :param host: The host of this DpGateway.  # noqa: E501
        :type: HostNestview
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this DpGateway.  # noqa: E501


        :return: The id of this DpGateway.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DpGateway.


        :param id: The id of this DpGateway.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DpGateway.  # noqa: E501


        :return: The name of this DpGateway.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DpGateway.


        :param name: The name of this DpGateway.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this DpGateway.  # noqa: E501


        :return: The status of this DpGateway.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DpGateway.


        :param status: The status of this DpGateway.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this DpGateway.  # noqa: E501


        :return: The update of this DpGateway.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DpGateway.


        :param update: The update of this DpGateway.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DpGateway):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
