# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.volume_qos_spec import VolumeQosSpec  # noqa: F401,E501


class VolumeCreateReqVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_snapshot_id': 'int',
        'description': 'str',
        'flattened': 'bool',
        'format': 'int',
        'name': 'str',
        'performance_priority': 'int',
        'pool_id': 'int',
        'qos': 'VolumeQosSpec',
        'qos_enabled': 'bool',
        'remote_cluster_fs_id': 'str',
        'replication_pool': 'str',
        'replication_pool_id': 'int',
        'replication_pool_name': 'str',
        'replication_version': 'int',
        'replication_volume': 'str',
        'replication_volume_id': 'int',
        'replication_volume_name': 'str',
        'size': 'int',
        'sn': 'str',
        'snapshot_replication_pool': 'str',
        'snapshot_replication_pool_id': 'int',
        'snapshot_replication_volume': 'str',
        'snapshot_replication_volume_id': 'int'
    }

    attribute_map = {
        'block_snapshot_id': 'block_snapshot_id',
        'description': 'description',
        'flattened': 'flattened',
        'format': 'format',
        'name': 'name',
        'performance_priority': 'performance_priority',
        'pool_id': 'pool_id',
        'qos': 'qos',
        'qos_enabled': 'qos_enabled',
        'remote_cluster_fs_id': 'remote_cluster_fs_id',
        'replication_pool': 'replication_pool',
        'replication_pool_id': 'replication_pool_id',
        'replication_pool_name': 'replication_pool_name',
        'replication_version': 'replication_version',
        'replication_volume': 'replication_volume',
        'replication_volume_id': 'replication_volume_id',
        'replication_volume_name': 'replication_volume_name',
        'size': 'size',
        'sn': 'sn',
        'snapshot_replication_pool': 'snapshot_replication_pool',
        'snapshot_replication_pool_id': 'snapshot_replication_pool_id',
        'snapshot_replication_volume': 'snapshot_replication_volume',
        'snapshot_replication_volume_id': 'snapshot_replication_volume_id'
    }

    def __init__(self, block_snapshot_id=None, description=None, flattened=None, format=None, name=None, performance_priority=None, pool_id=None, qos=None, qos_enabled=None, remote_cluster_fs_id=None, replication_pool=None, replication_pool_id=None, replication_pool_name=None, replication_version=None, replication_volume=None, replication_volume_id=None, replication_volume_name=None, size=None, sn=None, snapshot_replication_pool=None, snapshot_replication_pool_id=None, snapshot_replication_volume=None, snapshot_replication_volume_id=None):  # noqa: E501
        """VolumeCreateReqVolume - a model defined in Swagger"""  # noqa: E501

        self._block_snapshot_id = None
        self._description = None
        self._flattened = None
        self._format = None
        self._name = None
        self._performance_priority = None
        self._pool_id = None
        self._qos = None
        self._qos_enabled = None
        self._remote_cluster_fs_id = None
        self._replication_pool = None
        self._replication_pool_id = None
        self._replication_pool_name = None
        self._replication_version = None
        self._replication_volume = None
        self._replication_volume_id = None
        self._replication_volume_name = None
        self._size = None
        self._sn = None
        self._snapshot_replication_pool = None
        self._snapshot_replication_pool_id = None
        self._snapshot_replication_volume = None
        self._snapshot_replication_volume_id = None
        self.discriminator = None

        if block_snapshot_id is not None:
            self.block_snapshot_id = block_snapshot_id
        if description is not None:
            self.description = description
        if flattened is not None:
            self.flattened = flattened
        if format is not None:
            self.format = format
        self.name = name
        if performance_priority is not None:
            self.performance_priority = performance_priority
        self.pool_id = pool_id
        if qos is not None:
            self.qos = qos
        if qos_enabled is not None:
            self.qos_enabled = qos_enabled
        if remote_cluster_fs_id is not None:
            self.remote_cluster_fs_id = remote_cluster_fs_id
        if replication_pool is not None:
            self.replication_pool = replication_pool
        if replication_pool_id is not None:
            self.replication_pool_id = replication_pool_id
        if replication_pool_name is not None:
            self.replication_pool_name = replication_pool_name
        if replication_version is not None:
            self.replication_version = replication_version
        if replication_volume is not None:
            self.replication_volume = replication_volume
        if replication_volume_id is not None:
            self.replication_volume_id = replication_volume_id
        if replication_volume_name is not None:
            self.replication_volume_name = replication_volume_name
        if size is not None:
            self.size = size
        if sn is not None:
            self.sn = sn
        if snapshot_replication_pool is not None:
            self.snapshot_replication_pool = snapshot_replication_pool
        if snapshot_replication_pool_id is not None:
            self.snapshot_replication_pool_id = snapshot_replication_pool_id
        if snapshot_replication_volume is not None:
            self.snapshot_replication_volume = snapshot_replication_volume
        if snapshot_replication_volume_id is not None:
            self.snapshot_replication_volume_id = snapshot_replication_volume_id

    @property
    def block_snapshot_id(self):
        """Gets the block_snapshot_id of this VolumeCreateReqVolume.  # noqa: E501

        id of related block volume snapshot  # noqa: E501

        :return: The block_snapshot_id of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._block_snapshot_id

    @block_snapshot_id.setter
    def block_snapshot_id(self, block_snapshot_id):
        """Sets the block_snapshot_id of this VolumeCreateReqVolume.

        id of related block volume snapshot  # noqa: E501

        :param block_snapshot_id: The block_snapshot_id of this VolumeCreateReqVolume.  # noqa: E501
        :type: int
        """

        self._block_snapshot_id = block_snapshot_id

    @property
    def description(self):
        """Gets the description of this VolumeCreateReqVolume.  # noqa: E501

        description of volume  # noqa: E501

        :return: The description of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeCreateReqVolume.

        description of volume  # noqa: E501

        :param description: The description of this VolumeCreateReqVolume.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def flattened(self):
        """Gets the flattened of this VolumeCreateReqVolume.  # noqa: E501

        flatten or not flatten  # noqa: E501

        :return: The flattened of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: bool
        """
        return self._flattened

    @flattened.setter
    def flattened(self, flattened):
        """Sets the flattened of this VolumeCreateReqVolume.

        flatten or not flatten  # noqa: E501

        :param flattened: The flattened of this VolumeCreateReqVolume.  # noqa: E501
        :type: bool
        """

        self._flattened = flattened

    @property
    def format(self):
        """Gets the format of this VolumeCreateReqVolume.  # noqa: E501

        volume format: { 128 | 129 (advanced) }, default 128  # noqa: E501

        :return: The format of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this VolumeCreateReqVolume.

        volume format: { 128 | 129 (advanced) }, default 128  # noqa: E501

        :param format: The format of this VolumeCreateReqVolume.  # noqa: E501
        :type: int
        """

        self._format = format

    @property
    def name(self):
        """Gets the name of this VolumeCreateReqVolume.  # noqa: E501

        name of volume  # noqa: E501

        :return: The name of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeCreateReqVolume.

        name of volume  # noqa: E501

        :param name: The name of this VolumeCreateReqVolume.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def performance_priority(self):
        """Gets the performance_priority of this VolumeCreateReqVolume.  # noqa: E501

        performance priority: { 0 | 1 }, default 0  # noqa: E501

        :return: The performance_priority of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._performance_priority

    @performance_priority.setter
    def performance_priority(self, performance_priority):
        """Sets the performance_priority of this VolumeCreateReqVolume.

        performance priority: { 0 | 1 }, default 0  # noqa: E501

        :param performance_priority: The performance_priority of this VolumeCreateReqVolume.  # noqa: E501
        :type: int
        """

        self._performance_priority = performance_priority

    @property
    def pool_id(self):
        """Gets the pool_id of this VolumeCreateReqVolume.  # noqa: E501

        id of pool belonged to  # noqa: E501

        :return: The pool_id of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this VolumeCreateReqVolume.

        id of pool belonged to  # noqa: E501

        :param pool_id: The pool_id of this VolumeCreateReqVolume.  # noqa: E501
        :type: int
        """
        if pool_id is None:
            raise ValueError("Invalid value for `pool_id`, must not be `None`")  # noqa: E501

        self._pool_id = pool_id

    @property
    def qos(self):
        """Gets the qos of this VolumeCreateReqVolume.  # noqa: E501

        qos of volume  # noqa: E501

        :return: The qos of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: VolumeQosSpec
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this VolumeCreateReqVolume.

        qos of volume  # noqa: E501

        :param qos: The qos of this VolumeCreateReqVolume.  # noqa: E501
        :type: VolumeQosSpec
        """

        self._qos = qos

    @property
    def qos_enabled(self):
        """Gets the qos_enabled of this VolumeCreateReqVolume.  # noqa: E501

        enable or disable the qos  # noqa: E501

        :return: The qos_enabled of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: bool
        """
        return self._qos_enabled

    @qos_enabled.setter
    def qos_enabled(self, qos_enabled):
        """Sets the qos_enabled of this VolumeCreateReqVolume.

        enable or disable the qos  # noqa: E501

        :param qos_enabled: The qos_enabled of this VolumeCreateReqVolume.  # noqa: E501
        :type: bool
        """

        self._qos_enabled = qos_enabled

    @property
    def remote_cluster_fs_id(self):
        """Gets the remote_cluster_fs_id of this VolumeCreateReqVolume.  # noqa: E501

        replication remote cluster fsid  # noqa: E501

        :return: The remote_cluster_fs_id of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._remote_cluster_fs_id

    @remote_cluster_fs_id.setter
    def remote_cluster_fs_id(self, remote_cluster_fs_id):
        """Sets the remote_cluster_fs_id of this VolumeCreateReqVolume.

        replication remote cluster fsid  # noqa: E501

        :param remote_cluster_fs_id: The remote_cluster_fs_id of this VolumeCreateReqVolume.  # noqa: E501
        :type: str
        """

        self._remote_cluster_fs_id = remote_cluster_fs_id

    @property
    def replication_pool(self):
        """Gets the replication_pool of this VolumeCreateReqVolume.  # noqa: E501

        replication peer pool  # noqa: E501

        :return: The replication_pool of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._replication_pool

    @replication_pool.setter
    def replication_pool(self, replication_pool):
        """Sets the replication_pool of this VolumeCreateReqVolume.

        replication peer pool  # noqa: E501

        :param replication_pool: The replication_pool of this VolumeCreateReqVolume.  # noqa: E501
        :type: str
        """

        self._replication_pool = replication_pool

    @property
    def replication_pool_id(self):
        """Gets the replication_pool_id of this VolumeCreateReqVolume.  # noqa: E501

        replication peer pool id  # noqa: E501

        :return: The replication_pool_id of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._replication_pool_id

    @replication_pool_id.setter
    def replication_pool_id(self, replication_pool_id):
        """Sets the replication_pool_id of this VolumeCreateReqVolume.

        replication peer pool id  # noqa: E501

        :param replication_pool_id: The replication_pool_id of this VolumeCreateReqVolume.  # noqa: E501
        :type: int
        """

        self._replication_pool_id = replication_pool_id

    @property
    def replication_pool_name(self):
        """Gets the replication_pool_name of this VolumeCreateReqVolume.  # noqa: E501

        replication peer pool name  # noqa: E501

        :return: The replication_pool_name of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._replication_pool_name

    @replication_pool_name.setter
    def replication_pool_name(self, replication_pool_name):
        """Sets the replication_pool_name of this VolumeCreateReqVolume.

        replication peer pool name  # noqa: E501

        :param replication_pool_name: The replication_pool_name of this VolumeCreateReqVolume.  # noqa: E501
        :type: str
        """

        self._replication_pool_name = replication_pool_name

    @property
    def replication_version(self):
        """Gets the replication_version of this VolumeCreateReqVolume.  # noqa: E501

        replication version  # noqa: E501

        :return: The replication_version of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._replication_version

    @replication_version.setter
    def replication_version(self, replication_version):
        """Sets the replication_version of this VolumeCreateReqVolume.

        replication version  # noqa: E501

        :param replication_version: The replication_version of this VolumeCreateReqVolume.  # noqa: E501
        :type: int
        """

        self._replication_version = replication_version

    @property
    def replication_volume(self):
        """Gets the replication_volume of this VolumeCreateReqVolume.  # noqa: E501

        replication peer volume  # noqa: E501

        :return: The replication_volume of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._replication_volume

    @replication_volume.setter
    def replication_volume(self, replication_volume):
        """Sets the replication_volume of this VolumeCreateReqVolume.

        replication peer volume  # noqa: E501

        :param replication_volume: The replication_volume of this VolumeCreateReqVolume.  # noqa: E501
        :type: str
        """

        self._replication_volume = replication_volume

    @property
    def replication_volume_id(self):
        """Gets the replication_volume_id of this VolumeCreateReqVolume.  # noqa: E501

        replication peer volume id  # noqa: E501

        :return: The replication_volume_id of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._replication_volume_id

    @replication_volume_id.setter
    def replication_volume_id(self, replication_volume_id):
        """Sets the replication_volume_id of this VolumeCreateReqVolume.

        replication peer volume id  # noqa: E501

        :param replication_volume_id: The replication_volume_id of this VolumeCreateReqVolume.  # noqa: E501
        :type: int
        """

        self._replication_volume_id = replication_volume_id

    @property
    def replication_volume_name(self):
        """Gets the replication_volume_name of this VolumeCreateReqVolume.  # noqa: E501

        replication peer volume name  # noqa: E501

        :return: The replication_volume_name of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._replication_volume_name

    @replication_volume_name.setter
    def replication_volume_name(self, replication_volume_name):
        """Sets the replication_volume_name of this VolumeCreateReqVolume.

        replication peer volume name  # noqa: E501

        :param replication_volume_name: The replication_volume_name of this VolumeCreateReqVolume.  # noqa: E501
        :type: str
        """

        self._replication_volume_name = replication_volume_name

    @property
    def size(self):
        """Gets the size of this VolumeCreateReqVolume.  # noqa: E501

        size of volume  # noqa: E501

        :return: The size of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VolumeCreateReqVolume.

        size of volume  # noqa: E501

        :param size: The size of this VolumeCreateReqVolume.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def sn(self):
        """Gets the sn of this VolumeCreateReqVolume.  # noqa: E501

        volume sn, used when creating replication volume  # noqa: E501

        :return: The sn of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this VolumeCreateReqVolume.

        volume sn, used when creating replication volume  # noqa: E501

        :param sn: The sn of this VolumeCreateReqVolume.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def snapshot_replication_pool(self):
        """Gets the snapshot_replication_pool of this VolumeCreateReqVolume.  # noqa: E501

        snapshot replication peer pool  # noqa: E501

        :return: The snapshot_replication_pool of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_replication_pool

    @snapshot_replication_pool.setter
    def snapshot_replication_pool(self, snapshot_replication_pool):
        """Sets the snapshot_replication_pool of this VolumeCreateReqVolume.

        snapshot replication peer pool  # noqa: E501

        :param snapshot_replication_pool: The snapshot_replication_pool of this VolumeCreateReqVolume.  # noqa: E501
        :type: str
        """

        self._snapshot_replication_pool = snapshot_replication_pool

    @property
    def snapshot_replication_pool_id(self):
        """Gets the snapshot_replication_pool_id of this VolumeCreateReqVolume.  # noqa: E501

        snapshot replication peer pool id  # noqa: E501

        :return: The snapshot_replication_pool_id of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_replication_pool_id

    @snapshot_replication_pool_id.setter
    def snapshot_replication_pool_id(self, snapshot_replication_pool_id):
        """Sets the snapshot_replication_pool_id of this VolumeCreateReqVolume.

        snapshot replication peer pool id  # noqa: E501

        :param snapshot_replication_pool_id: The snapshot_replication_pool_id of this VolumeCreateReqVolume.  # noqa: E501
        :type: int
        """

        self._snapshot_replication_pool_id = snapshot_replication_pool_id

    @property
    def snapshot_replication_volume(self):
        """Gets the snapshot_replication_volume of this VolumeCreateReqVolume.  # noqa: E501

        snapshot replication peer volume  # noqa: E501

        :return: The snapshot_replication_volume of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_replication_volume

    @snapshot_replication_volume.setter
    def snapshot_replication_volume(self, snapshot_replication_volume):
        """Sets the snapshot_replication_volume of this VolumeCreateReqVolume.

        snapshot replication peer volume  # noqa: E501

        :param snapshot_replication_volume: The snapshot_replication_volume of this VolumeCreateReqVolume.  # noqa: E501
        :type: str
        """

        self._snapshot_replication_volume = snapshot_replication_volume

    @property
    def snapshot_replication_volume_id(self):
        """Gets the snapshot_replication_volume_id of this VolumeCreateReqVolume.  # noqa: E501

        snapshot replication peer volume id  # noqa: E501

        :return: The snapshot_replication_volume_id of this VolumeCreateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_replication_volume_id

    @snapshot_replication_volume_id.setter
    def snapshot_replication_volume_id(self, snapshot_replication_volume_id):
        """Sets the snapshot_replication_volume_id of this VolumeCreateReqVolume.

        snapshot replication peer volume id  # noqa: E501

        :param snapshot_replication_volume_id: The snapshot_replication_volume_id of this VolumeCreateReqVolume.  # noqa: E501
        :type: int
        """

        self._snapshot_replication_volume_id = snapshot_replication_volume_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeCreateReqVolume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
