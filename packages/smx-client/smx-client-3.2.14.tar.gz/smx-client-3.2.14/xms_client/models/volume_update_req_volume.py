# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.volume_qos_spec import VolumeQosSpec  # noqa: F401,E501


class VolumeUpdateReqVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'block_snapshot_id': 'int',
        'description': 'str',
        'flattened': 'bool',
        'name': 'str',
        'performance_priority': 'int',
        'qos': 'VolumeQosSpec',
        'qos_enabled': 'bool',
        'size': 'int'
    }

    attribute_map = {
        'action': 'action',
        'block_snapshot_id': 'block_snapshot_id',
        'description': 'description',
        'flattened': 'flattened',
        'name': 'name',
        'performance_priority': 'performance_priority',
        'qos': 'qos',
        'qos_enabled': 'qos_enabled',
        'size': 'size'
    }

    def __init__(self, action=None, block_snapshot_id=None, description=None, flattened=None, name=None, performance_priority=None, qos=None, qos_enabled=None, size=None):  # noqa: E501
        """VolumeUpdateReqVolume - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._block_snapshot_id = None
        self._description = None
        self._flattened = None
        self._name = None
        self._performance_priority = None
        self._qos = None
        self._qos_enabled = None
        self._size = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if block_snapshot_id is not None:
            self.block_snapshot_id = block_snapshot_id
        if description is not None:
            self.description = description
        if flattened is not None:
            self.flattened = flattened
        if name is not None:
            self.name = name
        if performance_priority is not None:
            self.performance_priority = performance_priority
        if qos is not None:
            self.qos = qos
        if qos_enabled is not None:
            self.qos_enabled = qos_enabled
        if size is not None:
            self.size = size

    @property
    def action(self):
        """Gets the action of this VolumeUpdateReqVolume.  # noqa: E501


        :return: The action of this VolumeUpdateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this VolumeUpdateReqVolume.


        :param action: The action of this VolumeUpdateReqVolume.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def block_snapshot_id(self):
        """Gets the block_snapshot_id of this VolumeUpdateReqVolume.  # noqa: E501


        :return: The block_snapshot_id of this VolumeUpdateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._block_snapshot_id

    @block_snapshot_id.setter
    def block_snapshot_id(self, block_snapshot_id):
        """Sets the block_snapshot_id of this VolumeUpdateReqVolume.


        :param block_snapshot_id: The block_snapshot_id of this VolumeUpdateReqVolume.  # noqa: E501
        :type: int
        """

        self._block_snapshot_id = block_snapshot_id

    @property
    def description(self):
        """Gets the description of this VolumeUpdateReqVolume.  # noqa: E501


        :return: The description of this VolumeUpdateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeUpdateReqVolume.


        :param description: The description of this VolumeUpdateReqVolume.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def flattened(self):
        """Gets the flattened of this VolumeUpdateReqVolume.  # noqa: E501


        :return: The flattened of this VolumeUpdateReqVolume.  # noqa: E501
        :rtype: bool
        """
        return self._flattened

    @flattened.setter
    def flattened(self, flattened):
        """Sets the flattened of this VolumeUpdateReqVolume.


        :param flattened: The flattened of this VolumeUpdateReqVolume.  # noqa: E501
        :type: bool
        """

        self._flattened = flattened

    @property
    def name(self):
        """Gets the name of this VolumeUpdateReqVolume.  # noqa: E501


        :return: The name of this VolumeUpdateReqVolume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeUpdateReqVolume.


        :param name: The name of this VolumeUpdateReqVolume.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def performance_priority(self):
        """Gets the performance_priority of this VolumeUpdateReqVolume.  # noqa: E501


        :return: The performance_priority of this VolumeUpdateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._performance_priority

    @performance_priority.setter
    def performance_priority(self, performance_priority):
        """Sets the performance_priority of this VolumeUpdateReqVolume.


        :param performance_priority: The performance_priority of this VolumeUpdateReqVolume.  # noqa: E501
        :type: int
        """

        self._performance_priority = performance_priority

    @property
    def qos(self):
        """Gets the qos of this VolumeUpdateReqVolume.  # noqa: E501


        :return: The qos of this VolumeUpdateReqVolume.  # noqa: E501
        :rtype: VolumeQosSpec
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this VolumeUpdateReqVolume.


        :param qos: The qos of this VolumeUpdateReqVolume.  # noqa: E501
        :type: VolumeQosSpec
        """

        self._qos = qos

    @property
    def qos_enabled(self):
        """Gets the qos_enabled of this VolumeUpdateReqVolume.  # noqa: E501


        :return: The qos_enabled of this VolumeUpdateReqVolume.  # noqa: E501
        :rtype: bool
        """
        return self._qos_enabled

    @qos_enabled.setter
    def qos_enabled(self, qos_enabled):
        """Sets the qos_enabled of this VolumeUpdateReqVolume.


        :param qos_enabled: The qos_enabled of this VolumeUpdateReqVolume.  # noqa: E501
        :type: bool
        """

        self._qos_enabled = qos_enabled

    @property
    def size(self):
        """Gets the size of this VolumeUpdateReqVolume.  # noqa: E501


        :return: The size of this VolumeUpdateReqVolume.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VolumeUpdateReqVolume.


        :param size: The size of this VolumeUpdateReqVolume.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeUpdateReqVolume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
