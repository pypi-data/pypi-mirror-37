# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class CloudExtraProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_id': 'str',
        'domain_name': 'str',
        'regions': 'list[str]',
        'tenant_id': 'str',
        'tenant_name': 'str'
    }

    attribute_map = {
        'domain_id': 'domain_id',
        'domain_name': 'domain_name',
        'regions': 'regions',
        'tenant_id': 'tenant_id',
        'tenant_name': 'tenant_name'
    }

    def __init__(self, domain_id=None, domain_name=None, regions=None, tenant_id=None, tenant_name=None):  # noqa: E501
        """CloudExtraProperties - a model defined in Swagger"""  # noqa: E501

        self._domain_id = None
        self._domain_name = None
        self._regions = None
        self._tenant_id = None
        self._tenant_name = None
        self.discriminator = None

        if domain_id is not None:
            self.domain_id = domain_id
        if domain_name is not None:
            self.domain_name = domain_name
        if regions is not None:
            self.regions = regions
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if tenant_name is not None:
            self.tenant_name = tenant_name

    @property
    def domain_id(self):
        """Gets the domain_id of this CloudExtraProperties.  # noqa: E501

        domain id for openstack  # noqa: E501

        :return: The domain_id of this CloudExtraProperties.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this CloudExtraProperties.

        domain id for openstack  # noqa: E501

        :param domain_id: The domain_id of this CloudExtraProperties.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def domain_name(self):
        """Gets the domain_name of this CloudExtraProperties.  # noqa: E501

        domain name for openstack  # noqa: E501

        :return: The domain_name of this CloudExtraProperties.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CloudExtraProperties.

        domain name for openstack  # noqa: E501

        :param domain_name: The domain_name of this CloudExtraProperties.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def regions(self):
        """Gets the regions of this CloudExtraProperties.  # noqa: E501

        regions for openstack  # noqa: E501

        :return: The regions of this CloudExtraProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this CloudExtraProperties.

        regions for openstack  # noqa: E501

        :param regions: The regions of this CloudExtraProperties.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CloudExtraProperties.  # noqa: E501

        tenant id for openstack  # noqa: E501

        :return: The tenant_id of this CloudExtraProperties.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CloudExtraProperties.

        tenant id for openstack  # noqa: E501

        :param tenant_id: The tenant_id of this CloudExtraProperties.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def tenant_name(self):
        """Gets the tenant_name of this CloudExtraProperties.  # noqa: E501

        tenant name for openstack  # noqa: E501

        :return: The tenant_name of this CloudExtraProperties.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this CloudExtraProperties.

        tenant name for openstack  # noqa: E501

        :param tenant_name: The tenant_name of this CloudExtraProperties.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudExtraProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
