# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class FSLdapCreateReqInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_dn': 'str',
        'connection_timeout': 'int',
        'ip': 'str',
        'ips': 'list[str]',
        'name': 'str',
        'password': 'str',
        'port': 'int',
        'suffix': 'str',
        'timeout': 'int',
        'user_suffix': 'str'
    }

    attribute_map = {
        'admin_dn': 'admin_dn',
        'connection_timeout': 'connection_timeout',
        'ip': 'ip',
        'ips': 'ips',
        'name': 'name',
        'password': 'password',
        'port': 'port',
        'suffix': 'suffix',
        'timeout': 'timeout',
        'user_suffix': 'user_suffix'
    }

    def __init__(self, admin_dn=None, connection_timeout=None, ip=None, ips=None, name=None, password=None, port=None, suffix=None, timeout=None, user_suffix=None):  # noqa: E501
        """FSLdapCreateReqInfo - a model defined in Swagger"""  # noqa: E501

        self._admin_dn = None
        self._connection_timeout = None
        self._ip = None
        self._ips = None
        self._name = None
        self._password = None
        self._port = None
        self._suffix = None
        self._timeout = None
        self._user_suffix = None
        self.discriminator = None

        if admin_dn is not None:
            self.admin_dn = admin_dn
        if connection_timeout is not None:
            self.connection_timeout = connection_timeout
        self.ip = ip
        if ips is not None:
            self.ips = ips
        self.name = name
        if password is not None:
            self.password = password
        self.port = port
        self.suffix = suffix
        if timeout is not None:
            self.timeout = timeout
        if user_suffix is not None:
            self.user_suffix = user_suffix

    @property
    def admin_dn(self):
        """Gets the admin_dn of this FSLdapCreateReqInfo.  # noqa: E501

        ldap admin dn  # noqa: E501

        :return: The admin_dn of this FSLdapCreateReqInfo.  # noqa: E501
        :rtype: str
        """
        return self._admin_dn

    @admin_dn.setter
    def admin_dn(self, admin_dn):
        """Sets the admin_dn of this FSLdapCreateReqInfo.

        ldap admin dn  # noqa: E501

        :param admin_dn: The admin_dn of this FSLdapCreateReqInfo.  # noqa: E501
        :type: str
        """

        self._admin_dn = admin_dn

    @property
    def connection_timeout(self):
        """Gets the connection_timeout of this FSLdapCreateReqInfo.  # noqa: E501

        timeout for connection  # noqa: E501

        :return: The connection_timeout of this FSLdapCreateReqInfo.  # noqa: E501
        :rtype: int
        """
        return self._connection_timeout

    @connection_timeout.setter
    def connection_timeout(self, connection_timeout):
        """Sets the connection_timeout of this FSLdapCreateReqInfo.

        timeout for connection  # noqa: E501

        :param connection_timeout: The connection_timeout of this FSLdapCreateReqInfo.  # noqa: E501
        :type: int
        """

        self._connection_timeout = connection_timeout

    @property
    def ip(self):
        """Gets the ip of this FSLdapCreateReqInfo.  # noqa: E501

        ip of server  # noqa: E501

        :return: The ip of this FSLdapCreateReqInfo.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this FSLdapCreateReqInfo.

        ip of server  # noqa: E501

        :param ip: The ip of this FSLdapCreateReqInfo.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def ips(self):
        """Gets the ips of this FSLdapCreateReqInfo.  # noqa: E501

        ips of standby servers  # noqa: E501

        :return: The ips of this FSLdapCreateReqInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._ips

    @ips.setter
    def ips(self, ips):
        """Sets the ips of this FSLdapCreateReqInfo.

        ips of standby servers  # noqa: E501

        :param ips: The ips of this FSLdapCreateReqInfo.  # noqa: E501
        :type: list[str]
        """

        self._ips = ips

    @property
    def name(self):
        """Gets the name of this FSLdapCreateReqInfo.  # noqa: E501

        name of ldap  # noqa: E501

        :return: The name of this FSLdapCreateReqInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FSLdapCreateReqInfo.

        name of ldap  # noqa: E501

        :param name: The name of this FSLdapCreateReqInfo.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def password(self):
        """Gets the password of this FSLdapCreateReqInfo.  # noqa: E501

        bind password  # noqa: E501

        :return: The password of this FSLdapCreateReqInfo.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this FSLdapCreateReqInfo.

        bind password  # noqa: E501

        :param password: The password of this FSLdapCreateReqInfo.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this FSLdapCreateReqInfo.  # noqa: E501

        ldap service port  # noqa: E501

        :return: The port of this FSLdapCreateReqInfo.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this FSLdapCreateReqInfo.

        ldap service port  # noqa: E501

        :param port: The port of this FSLdapCreateReqInfo.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def suffix(self):
        """Gets the suffix of this FSLdapCreateReqInfo.  # noqa: E501

        ldap suffix  # noqa: E501

        :return: The suffix of this FSLdapCreateReqInfo.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this FSLdapCreateReqInfo.

        ldap suffix  # noqa: E501

        :param suffix: The suffix of this FSLdapCreateReqInfo.  # noqa: E501
        :type: str
        """
        if suffix is None:
            raise ValueError("Invalid value for `suffix`, must not be `None`")  # noqa: E501

        self._suffix = suffix

    @property
    def timeout(self):
        """Gets the timeout of this FSLdapCreateReqInfo.  # noqa: E501

        timeout for searching  # noqa: E501

        :return: The timeout of this FSLdapCreateReqInfo.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this FSLdapCreateReqInfo.

        timeout for searching  # noqa: E501

        :param timeout: The timeout of this FSLdapCreateReqInfo.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def user_suffix(self):
        """Gets the user_suffix of this FSLdapCreateReqInfo.  # noqa: E501

        user suffix  # noqa: E501

        :return: The user_suffix of this FSLdapCreateReqInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_suffix

    @user_suffix.setter
    def user_suffix(self, user_suffix):
        """Sets the user_suffix of this FSLdapCreateReqInfo.

        user suffix  # noqa: E501

        :param user_suffix: The user_suffix of this FSLdapCreateReqInfo.  # noqa: E501
        :type: str
        """

        self._user_suffix = user_suffix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSLdapCreateReqInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
