# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.nfs_gateway_nestview import NFSGatewayNestview  # noqa: F401,E501
# from xms_client.models.object_storage_bucket_nestview import ObjectStorageBucketNestview  # noqa: F401,E501
# from xms_client.models.object_storage_key_nestview import ObjectStorageKeyNestview  # noqa: F401,E501


class NFSGatewayBucketMap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket': 'ObjectStorageBucketNestview',
        'create': 'datetime',
        'id': 'int',
        'key': 'ObjectStorageKeyNestview',
        'mount_clients': 'str',
        'mount_num': 'int',
        'nfs_gateway': 'NFSGatewayNestview',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'bucket': 'bucket',
        'create': 'create',
        'id': 'id',
        'key': 'key',
        'mount_clients': 'mount_clients',
        'mount_num': 'mount_num',
        'nfs_gateway': 'nfs_gateway',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, bucket=None, create=None, id=None, key=None, mount_clients=None, mount_num=None, nfs_gateway=None, status=None, update=None):  # noqa: E501
        """NFSGatewayBucketMap - a model defined in Swagger"""  # noqa: E501

        self._bucket = None
        self._create = None
        self._id = None
        self._key = None
        self._mount_clients = None
        self._mount_num = None
        self._nfs_gateway = None
        self._status = None
        self._update = None
        self.discriminator = None

        if bucket is not None:
            self.bucket = bucket
        if create is not None:
            self.create = create
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if mount_clients is not None:
            self.mount_clients = mount_clients
        if mount_num is not None:
            self.mount_num = mount_num
        if nfs_gateway is not None:
            self.nfs_gateway = nfs_gateway
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def bucket(self):
        """Gets the bucket of this NFSGatewayBucketMap.  # noqa: E501


        :return: The bucket of this NFSGatewayBucketMap.  # noqa: E501
        :rtype: ObjectStorageBucketNestview
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this NFSGatewayBucketMap.


        :param bucket: The bucket of this NFSGatewayBucketMap.  # noqa: E501
        :type: ObjectStorageBucketNestview
        """

        self._bucket = bucket

    @property
    def create(self):
        """Gets the create of this NFSGatewayBucketMap.  # noqa: E501


        :return: The create of this NFSGatewayBucketMap.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this NFSGatewayBucketMap.


        :param create: The create of this NFSGatewayBucketMap.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def id(self):
        """Gets the id of this NFSGatewayBucketMap.  # noqa: E501


        :return: The id of this NFSGatewayBucketMap.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NFSGatewayBucketMap.


        :param id: The id of this NFSGatewayBucketMap.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this NFSGatewayBucketMap.  # noqa: E501


        :return: The key of this NFSGatewayBucketMap.  # noqa: E501
        :rtype: ObjectStorageKeyNestview
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NFSGatewayBucketMap.


        :param key: The key of this NFSGatewayBucketMap.  # noqa: E501
        :type: ObjectStorageKeyNestview
        """

        self._key = key

    @property
    def mount_clients(self):
        """Gets the mount_clients of this NFSGatewayBucketMap.  # noqa: E501


        :return: The mount_clients of this NFSGatewayBucketMap.  # noqa: E501
        :rtype: str
        """
        return self._mount_clients

    @mount_clients.setter
    def mount_clients(self, mount_clients):
        """Sets the mount_clients of this NFSGatewayBucketMap.


        :param mount_clients: The mount_clients of this NFSGatewayBucketMap.  # noqa: E501
        :type: str
        """

        self._mount_clients = mount_clients

    @property
    def mount_num(self):
        """Gets the mount_num of this NFSGatewayBucketMap.  # noqa: E501


        :return: The mount_num of this NFSGatewayBucketMap.  # noqa: E501
        :rtype: int
        """
        return self._mount_num

    @mount_num.setter
    def mount_num(self, mount_num):
        """Sets the mount_num of this NFSGatewayBucketMap.


        :param mount_num: The mount_num of this NFSGatewayBucketMap.  # noqa: E501
        :type: int
        """

        self._mount_num = mount_num

    @property
    def nfs_gateway(self):
        """Gets the nfs_gateway of this NFSGatewayBucketMap.  # noqa: E501


        :return: The nfs_gateway of this NFSGatewayBucketMap.  # noqa: E501
        :rtype: NFSGatewayNestview
        """
        return self._nfs_gateway

    @nfs_gateway.setter
    def nfs_gateway(self, nfs_gateway):
        """Sets the nfs_gateway of this NFSGatewayBucketMap.


        :param nfs_gateway: The nfs_gateway of this NFSGatewayBucketMap.  # noqa: E501
        :type: NFSGatewayNestview
        """

        self._nfs_gateway = nfs_gateway

    @property
    def status(self):
        """Gets the status of this NFSGatewayBucketMap.  # noqa: E501


        :return: The status of this NFSGatewayBucketMap.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NFSGatewayBucketMap.


        :param status: The status of this NFSGatewayBucketMap.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this NFSGatewayBucketMap.  # noqa: E501


        :return: The update of this NFSGatewayBucketMap.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this NFSGatewayBucketMap.


        :param update: The update of this NFSGatewayBucketMap.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NFSGatewayBucketMap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
