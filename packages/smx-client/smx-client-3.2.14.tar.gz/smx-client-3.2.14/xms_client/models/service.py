# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.host_nestview import HostNestview  # noqa: F401,E501
# from xms_client.models.ssl_certificate_nestview import SSLCertificateNestview  # noqa: F401,E501


class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'enabled': 'bool',
        'heartbeat': 'datetime',
        'host': 'HostNestview',
        'id': 'int',
        'name': 'str',
        'primary': 'bool',
        'ssl_certificate': 'SSLCertificateNestview',
        'started_time': 'datetime',
        'status': 'str',
        'type': 'str',
        'up': 'bool',
        'update': 'datetime'
    }

    attribute_map = {
        'create': 'create',
        'enabled': 'enabled',
        'heartbeat': 'heartbeat',
        'host': 'host',
        'id': 'id',
        'name': 'name',
        'primary': 'primary',
        'ssl_certificate': 'ssl_certificate',
        'started_time': 'started_time',
        'status': 'status',
        'type': 'type',
        'up': 'up',
        'update': 'update'
    }

    def __init__(self, create=None, enabled=None, heartbeat=None, host=None, id=None, name=None, primary=None, ssl_certificate=None, started_time=None, status=None, type=None, up=None, update=None):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._enabled = None
        self._heartbeat = None
        self._host = None
        self._id = None
        self._name = None
        self._primary = None
        self._ssl_certificate = None
        self._started_time = None
        self._status = None
        self._type = None
        self._up = None
        self._update = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if enabled is not None:
            self.enabled = enabled
        if heartbeat is not None:
            self.heartbeat = heartbeat
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if primary is not None:
            self.primary = primary
        if ssl_certificate is not None:
            self.ssl_certificate = ssl_certificate
        if started_time is not None:
            self.started_time = started_time
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if up is not None:
            self.up = up
        if update is not None:
            self.update = update

    @property
    def create(self):
        """Gets the create of this Service.  # noqa: E501


        :return: The create of this Service.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this Service.


        :param create: The create of this Service.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def enabled(self):
        """Gets the enabled of this Service.  # noqa: E501


        :return: The enabled of this Service.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Service.


        :param enabled: The enabled of this Service.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def heartbeat(self):
        """Gets the heartbeat of this Service.  # noqa: E501


        :return: The heartbeat of this Service.  # noqa: E501
        :rtype: datetime
        """
        return self._heartbeat

    @heartbeat.setter
    def heartbeat(self, heartbeat):
        """Sets the heartbeat of this Service.


        :param heartbeat: The heartbeat of this Service.  # noqa: E501
        :type: datetime
        """

        self._heartbeat = heartbeat

    @property
    def host(self):
        """Gets the host of this Service.  # noqa: E501


        :return: The host of this Service.  # noqa: E501
        :rtype: HostNestview
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Service.


        :param host: The host of this Service.  # noqa: E501
        :type: HostNestview
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this Service.  # noqa: E501


        :return: The id of this Service.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.


        :param id: The id of this Service.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Service.  # noqa: E501


        :return: The name of this Service.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.


        :param name: The name of this Service.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def primary(self):
        """Gets the primary of this Service.  # noqa: E501


        :return: The primary of this Service.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this Service.


        :param primary: The primary of this Service.  # noqa: E501
        :type: bool
        """

        self._primary = primary

    @property
    def ssl_certificate(self):
        """Gets the ssl_certificate of this Service.  # noqa: E501


        :return: The ssl_certificate of this Service.  # noqa: E501
        :rtype: SSLCertificateNestview
        """
        return self._ssl_certificate

    @ssl_certificate.setter
    def ssl_certificate(self, ssl_certificate):
        """Sets the ssl_certificate of this Service.


        :param ssl_certificate: The ssl_certificate of this Service.  # noqa: E501
        :type: SSLCertificateNestview
        """

        self._ssl_certificate = ssl_certificate

    @property
    def started_time(self):
        """Gets the started_time of this Service.  # noqa: E501


        :return: The started_time of this Service.  # noqa: E501
        :rtype: datetime
        """
        return self._started_time

    @started_time.setter
    def started_time(self, started_time):
        """Sets the started_time of this Service.


        :param started_time: The started_time of this Service.  # noqa: E501
        :type: datetime
        """

        self._started_time = started_time

    @property
    def status(self):
        """Gets the status of this Service.  # noqa: E501


        :return: The status of this Service.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Service.


        :param status: The status of this Service.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Service.  # noqa: E501


        :return: The type of this Service.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Service.


        :param type: The type of this Service.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def up(self):
        """Gets the up of this Service.  # noqa: E501


        :return: The up of this Service.  # noqa: E501
        :rtype: bool
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this Service.


        :param up: The up of this Service.  # noqa: E501
        :type: bool
        """

        self._up = up

    @property
    def update(self):
        """Gets the update of this Service.  # noqa: E501


        :return: The update of this Service.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this Service.


        :param update: The update of this Service.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
