# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.object_storage_replication_rule_item import ObjectStorageReplicationRuleItem  # noqa: F401,E501


class ObjectStorageReplicationPolicyCreateReqPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'rule': 'list[ObjectStorageReplicationRuleItem]'
    }

    attribute_map = {
        'name': 'name',
        'rule': 'rule'
    }

    def __init__(self, name=None, rule=None):  # noqa: E501
        """ObjectStorageReplicationPolicyCreateReqPolicy - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._rule = None
        self.discriminator = None

        self.name = name
        self.rule = rule

    @property
    def name(self):
        """Gets the name of this ObjectStorageReplicationPolicyCreateReqPolicy.  # noqa: E501

        name of pollicy  # noqa: E501

        :return: The name of this ObjectStorageReplicationPolicyCreateReqPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectStorageReplicationPolicyCreateReqPolicy.

        name of pollicy  # noqa: E501

        :param name: The name of this ObjectStorageReplicationPolicyCreateReqPolicy.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rule(self):
        """Gets the rule of this ObjectStorageReplicationPolicyCreateReqPolicy.  # noqa: E501

        replication rule  # noqa: E501

        :return: The rule of this ObjectStorageReplicationPolicyCreateReqPolicy.  # noqa: E501
        :rtype: list[ObjectStorageReplicationRuleItem]
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this ObjectStorageReplicationPolicyCreateReqPolicy.

        replication rule  # noqa: E501

        :param rule: The rule of this ObjectStorageReplicationPolicyCreateReqPolicy.  # noqa: E501
        :type: list[ObjectStorageReplicationRuleItem]
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")  # noqa: E501

        self._rule = rule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStorageReplicationPolicyCreateReqPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
