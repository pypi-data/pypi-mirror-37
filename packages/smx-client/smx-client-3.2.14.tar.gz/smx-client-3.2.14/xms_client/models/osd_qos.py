# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class OsdQos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth': 'int',
        'bandwidth_max': 'int',
        'client_threshold': 'int',
        'id': 'int',
        'mode': 'int',
        'recovery_rate_type': 'str'
    }

    attribute_map = {
        'bandwidth': 'bandwidth',
        'bandwidth_max': 'bandwidth_max',
        'client_threshold': 'client_threshold',
        'id': 'id',
        'mode': 'mode',
        'recovery_rate_type': 'recovery_rate_type'
    }

    def __init__(self, bandwidth=None, bandwidth_max=None, client_threshold=None, id=None, mode=None, recovery_rate_type=None):  # noqa: E501
        """OsdQos - a model defined in Swagger"""  # noqa: E501

        self._bandwidth = None
        self._bandwidth_max = None
        self._client_threshold = None
        self._id = None
        self._mode = None
        self._recovery_rate_type = None
        self.discriminator = None

        if bandwidth is not None:
            self.bandwidth = bandwidth
        if bandwidth_max is not None:
            self.bandwidth_max = bandwidth_max
        if client_threshold is not None:
            self.client_threshold = client_threshold
        if id is not None:
            self.id = id
        if mode is not None:
            self.mode = mode
        if recovery_rate_type is not None:
            self.recovery_rate_type = recovery_rate_type

    @property
    def bandwidth(self):
        """Gets the bandwidth of this OsdQos.  # noqa: E501


        :return: The bandwidth of this OsdQos.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this OsdQos.


        :param bandwidth: The bandwidth of this OsdQos.  # noqa: E501
        :type: int
        """

        self._bandwidth = bandwidth

    @property
    def bandwidth_max(self):
        """Gets the bandwidth_max of this OsdQos.  # noqa: E501


        :return: The bandwidth_max of this OsdQos.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth_max

    @bandwidth_max.setter
    def bandwidth_max(self, bandwidth_max):
        """Sets the bandwidth_max of this OsdQos.


        :param bandwidth_max: The bandwidth_max of this OsdQos.  # noqa: E501
        :type: int
        """

        self._bandwidth_max = bandwidth_max

    @property
    def client_threshold(self):
        """Gets the client_threshold of this OsdQos.  # noqa: E501


        :return: The client_threshold of this OsdQos.  # noqa: E501
        :rtype: int
        """
        return self._client_threshold

    @client_threshold.setter
    def client_threshold(self, client_threshold):
        """Sets the client_threshold of this OsdQos.


        :param client_threshold: The client_threshold of this OsdQos.  # noqa: E501
        :type: int
        """

        self._client_threshold = client_threshold

    @property
    def id(self):
        """Gets the id of this OsdQos.  # noqa: E501


        :return: The id of this OsdQos.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OsdQos.


        :param id: The id of this OsdQos.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mode(self):
        """Gets the mode of this OsdQos.  # noqa: E501


        :return: The mode of this OsdQos.  # noqa: E501
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this OsdQos.


        :param mode: The mode of this OsdQos.  # noqa: E501
        :type: int
        """

        self._mode = mode

    @property
    def recovery_rate_type(self):
        """Gets the recovery_rate_type of this OsdQos.  # noqa: E501


        :return: The recovery_rate_type of this OsdQos.  # noqa: E501
        :rtype: str
        """
        return self._recovery_rate_type

    @recovery_rate_type.setter
    def recovery_rate_type(self, recovery_rate_type):
        """Sets the recovery_rate_type of this OsdQos.


        :param recovery_rate_type: The recovery_rate_type of this OsdQos.  # noqa: E501
        :type: str
        """

        self._recovery_rate_type = recovery_rate_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OsdQos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
