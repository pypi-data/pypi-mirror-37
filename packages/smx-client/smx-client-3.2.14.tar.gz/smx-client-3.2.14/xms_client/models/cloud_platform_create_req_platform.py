# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cloud_extra_properties import CloudExtraProperties  # noqa: F401,E501


class CloudPlatformCreateReqPlatform(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'extra_properties': 'CloudExtraProperties',
        'name': 'str',
        'password': 'str',
        'type': 'str',
        'url': 'str',
        'username': 'str'
    }

    attribute_map = {
        'description': 'description',
        'extra_properties': 'extra_properties',
        'name': 'name',
        'password': 'password',
        'type': 'type',
        'url': 'url',
        'username': 'username'
    }

    def __init__(self, description=None, extra_properties=None, name=None, password=None, type=None, url=None, username=None):  # noqa: E501
        """CloudPlatformCreateReqPlatform - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._extra_properties = None
        self._name = None
        self._password = None
        self._type = None
        self._url = None
        self._username = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if extra_properties is not None:
            self.extra_properties = extra_properties
        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if username is not None:
            self.username = username

    @property
    def description(self):
        """Gets the description of this CloudPlatformCreateReqPlatform.  # noqa: E501

        description of cloud platform  # noqa: E501

        :return: The description of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CloudPlatformCreateReqPlatform.

        description of cloud platform  # noqa: E501

        :param description: The description of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def extra_properties(self):
        """Gets the extra_properties of this CloudPlatformCreateReqPlatform.  # noqa: E501

        extra properties of cloud platform  # noqa: E501

        :return: The extra_properties of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :rtype: CloudExtraProperties
        """
        return self._extra_properties

    @extra_properties.setter
    def extra_properties(self, extra_properties):
        """Sets the extra_properties of this CloudPlatformCreateReqPlatform.

        extra properties of cloud platform  # noqa: E501

        :param extra_properties: The extra_properties of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :type: CloudExtraProperties
        """

        self._extra_properties = extra_properties

    @property
    def name(self):
        """Gets the name of this CloudPlatformCreateReqPlatform.  # noqa: E501

        name of cloud platform  # noqa: E501

        :return: The name of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudPlatformCreateReqPlatform.

        name of cloud platform  # noqa: E501

        :param name: The name of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this CloudPlatformCreateReqPlatform.  # noqa: E501

        password of cloud platform user  # noqa: E501

        :return: The password of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CloudPlatformCreateReqPlatform.

        password of cloud platform user  # noqa: E501

        :param password: The password of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def type(self):
        """Gets the type of this CloudPlatformCreateReqPlatform.  # noqa: E501

        type of cloud platform  # noqa: E501

        :return: The type of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CloudPlatformCreateReqPlatform.

        type of cloud platform  # noqa: E501

        :param type: The type of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this CloudPlatformCreateReqPlatform.  # noqa: E501


        :return: The url of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CloudPlatformCreateReqPlatform.


        :param url: The url of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def username(self):
        """Gets the username of this CloudPlatformCreateReqPlatform.  # noqa: E501


        :return: The username of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CloudPlatformCreateReqPlatform.


        :param username: The username of this CloudPlatformCreateReqPlatform.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudPlatformCreateReqPlatform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
