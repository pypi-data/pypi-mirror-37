# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: 3.2.14
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class SnapshotBackupConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key': 'str',
        'app_id': 'str',
        'bucket': 'str',
        'mount_path': 'str',
        'password': 'str',
        'port': 'int',
        'region': 'str',
        'secret_key': 'str',
        'username': 'str'
    }

    attribute_map = {
        'access_key': 'access_key',
        'app_id': 'app_id',
        'bucket': 'bucket',
        'mount_path': 'mount_path',
        'password': 'password',
        'port': 'port',
        'region': 'region',
        'secret_key': 'secret_key',
        'username': 'username'
    }

    def __init__(self, access_key=None, app_id=None, bucket=None, mount_path=None, password=None, port=None, region=None, secret_key=None, username=None):  # noqa: E501
        """SnapshotBackupConfig - a model defined in Swagger"""  # noqa: E501

        self._access_key = None
        self._app_id = None
        self._bucket = None
        self._mount_path = None
        self._password = None
        self._port = None
        self._region = None
        self._secret_key = None
        self._username = None
        self.discriminator = None

        if access_key is not None:
            self.access_key = access_key
        if app_id is not None:
            self.app_id = app_id
        if bucket is not None:
            self.bucket = bucket
        if mount_path is not None:
            self.mount_path = mount_path
        if password is not None:
            self.password = password
        if port is not None:
            self.port = port
        if region is not None:
            self.region = region
        if secret_key is not None:
            self.secret_key = secret_key
        if username is not None:
            self.username = username

    @property
    def access_key(self):
        """Gets the access_key of this SnapshotBackupConfig.  # noqa: E501


        :return: The access_key of this SnapshotBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this SnapshotBackupConfig.


        :param access_key: The access_key of this SnapshotBackupConfig.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def app_id(self):
        """Gets the app_id of this SnapshotBackupConfig.  # noqa: E501


        :return: The app_id of this SnapshotBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SnapshotBackupConfig.


        :param app_id: The app_id of this SnapshotBackupConfig.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def bucket(self):
        """Gets the bucket of this SnapshotBackupConfig.  # noqa: E501


        :return: The bucket of this SnapshotBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this SnapshotBackupConfig.


        :param bucket: The bucket of this SnapshotBackupConfig.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def mount_path(self):
        """Gets the mount_path of this SnapshotBackupConfig.  # noqa: E501


        :return: The mount_path of this SnapshotBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this SnapshotBackupConfig.


        :param mount_path: The mount_path of this SnapshotBackupConfig.  # noqa: E501
        :type: str
        """

        self._mount_path = mount_path

    @property
    def password(self):
        """Gets the password of this SnapshotBackupConfig.  # noqa: E501


        :return: The password of this SnapshotBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SnapshotBackupConfig.


        :param password: The password of this SnapshotBackupConfig.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this SnapshotBackupConfig.  # noqa: E501


        :return: The port of this SnapshotBackupConfig.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SnapshotBackupConfig.


        :param port: The port of this SnapshotBackupConfig.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def region(self):
        """Gets the region of this SnapshotBackupConfig.  # noqa: E501


        :return: The region of this SnapshotBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SnapshotBackupConfig.


        :param region: The region of this SnapshotBackupConfig.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def secret_key(self):
        """Gets the secret_key of this SnapshotBackupConfig.  # noqa: E501


        :return: The secret_key of this SnapshotBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this SnapshotBackupConfig.


        :param secret_key: The secret_key of this SnapshotBackupConfig.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def username(self):
        """Gets the username of this SnapshotBackupConfig.  # noqa: E501


        :return: The username of this SnapshotBackupConfig.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SnapshotBackupConfig.


        :param username: The username of this SnapshotBackupConfig.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotBackupConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
