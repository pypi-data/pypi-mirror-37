#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
# Converter module.

This module contain a converter class to manage files.
"""

import sys

import lxml.etree

from . import parser as htmlparser
from . import yattag

__all__ = ("Converter", "convert2yattag")


class Converter(object):
    """Main converter class."""

    def __init__(self, stream, output, idenstr="\t", header=False, func=False):
        super(Converter, self).__init__()
        self.stream = stream
        if output == "-":
            self.output = sys.stdout
        else:
            self.output = open(output, "w")
        self.parser = htmlparser.HTMLParser()
        self.yf = yattag.YattagOutput(self.output, self.parser,
                                      identation=func, idenstr=idenstr,
                                      del_unused_spaces=True, doctype="<!doctype html>")
        self.header = header
        self.func = func

    def conver2yattag(self):
        """Convert and write to output stream."""
        if self.header:
            self.writeheader()
        if self.func:
            funciter = self.writefunction()
            next(funciter)
        self.process_tree()
        self.yf.apply()
        if self.func:
            next(funciter)

    def process_tree(self):
        """Process html tree."""
        tree = lxml.etree.HTML(self.stream.read())
        self.yf.process_tree(tree)

    def writeheader(self):
        """(Optional) Write header of output stream."""
        self.output.write("#!/usr/bin/env python3{0}# -*- coding: utf-8 -*-{0}{0}import yattag{0}{0}"
                          .format(yattag.YattagOutput.LINE_END))

    def writefunction(self):
        """(Optional) Write a function for wrap code of output stream."""
        line_end = yattag.YattagOutput.LINE_END
        idenstr = self.yf.idenstr
        name = self.output.name.split(".")[0]
        self.output.write("{1}def {0}():{1}".format(name, line_end))
        self.output.write('{}"""Funcion generated by html2py (trollodel/html2py)."""{}'
                          .format(idenstr, line_end))
        self.output.write("{}doc, tag, text, line = yattag.Doc().ttl(){}".format(idenstr, line_end))
        self.output.write("{}stag = doc.stag{}".format(idenstr, line_end))
        self.output.write("{}asis = doc.asis{}".format(idenstr, line_end))
        yield
        self.output.write("{}return doc.getvalue(){}".format(idenstr, line_end))
        yield


def convert2yattag(*args, **kwargs):
    """Simply function to convert directly."""
    Converter(*args, **kwargs).conver2yattag()
