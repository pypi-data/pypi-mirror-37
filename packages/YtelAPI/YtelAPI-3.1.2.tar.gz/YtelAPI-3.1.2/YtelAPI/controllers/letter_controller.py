# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class LetterController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def create_delete_letter(self,
                             lettersid):
        """Does a POST request to /letter/delete.json.

        Remove a letter object by its LetterId.

        Args:
            lettersid (string): The unique identifier for a letter object.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/letter/delete.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'lettersid': lettersid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_letter(self,
                           lettersid):
        """Does a POST request to /letter/viewletter.json.

        Retrieve a letter object by its LetterSid.

        Args:
            lettersid (string): The unique identifier for a letter object.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/letter/viewletter.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'lettersid': lettersid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_letter(self,
                      to,
                      mfrom,
                      attachbyid,
                      file,
                      color,
                      description=None,
                      extraservice=None,
                      doublesided=None,
                      template=None,
                      htmldata=None):
        """Does a POST request to /letter/create.json.

        Create, print, and mail a letter to an address. The letter file must
        be supplied as a PDF or an HTML string.

        Args:
            to (string): The AddressId or an object structured when creating
                an address by addresses/Create.
            mfrom (string): The AddressId or an object structured when
                creating an address by addresses/Create.
            attachbyid (string): Set an existing letter by attaching its
                LetterId.
            file (string): File can be a 8.5"x11" PDF uploaded file or URL
                that links to a file.
            color (string): Specify if letter should be printed in color.
            description (string, optional): A description for the letter.
            extraservice (string, optional): Add an extra service to your
                letter. Options are "certified" or "registered". Certified
                provides tracking and delivery confirmation for domestic
                destinations and is an additional $5.00. Registered provides
                tracking and confirmation for international addresses and is
                an additional $16.50.
            doublesided (string, optional): Specify if letter should be
                printed on both sides.
            template (string, optional): Boolean that defaults to true. When
                set to false, this specifies that your letter does not follow
                the m360 address template. In this case, a blank address page
                will be inserted at the beginning of your file and you will be
                charged for the extra page.
            htmldata (string, optional): A string value that contains HTML
                markup.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/letter/create.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'to': to,
            'from': mfrom,
            'attachbyid': attachbyid,
            'file': file,
            'color': color,
            'description': description,
            'extraservice': extraservice,
            'doublesided': doublesided,
            'template': template,
            'htmldata': htmldata
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_letters(self,
                            page=None,
                            pagesize=None,
                            lettersid=None,
                            date_created=None):
        """Does a POST request to /letter/listsletter.json.

        Retrieve a list of letter objects. The letter objects are sorted by
        creation date, with the most recently created letters appearing
        first.

        Args:
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            pagesize (int, optional): The count of objects to return per
                page.
            lettersid (string, optional): The unique identifier for a letter
                object.
            date_created (string, optional): The date the letter was created.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/letter/listsletter.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': page,
            'pagesize': pagesize,
            'lettersid': lettersid,
            'dateCreated': date_created
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
