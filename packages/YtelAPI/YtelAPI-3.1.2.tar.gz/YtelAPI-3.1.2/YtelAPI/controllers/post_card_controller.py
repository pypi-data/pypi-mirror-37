# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class PostCardController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def create_delete_postcard(self,
                               postcardid):
        """Does a POST request to /Postcard/deletepostcard.json.

        Remove a postcard object.

        Args:
            postcardid (string): The unique identifier of a postcard object.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/Postcard/deletepostcard.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'postcardid': postcardid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_postcard(self,
                             postcardid):
        """Does a POST request to /Postcard/viewpostcard.json.

        Retrieve a postcard object by its PostcardId.

        Args:
            postcardid (string): The unique identifier for a postcard object.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/Postcard/viewpostcard.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'postcardid': postcardid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_postcard(self,
                        to,
                        mfrom,
                        attachbyid,
                        front,
                        back,
                        message,
                        setting,
                        description=None,
                        htmldata=None):
        """Does a POST request to /Postcard/createpostcard.json.

        Create, print, and mail a postcard to an address. The postcard front
        must be supplied as a PDF, image, or an HTML string. The back can be a
        PDF, image, HTML string, or it can be automatically generated by
        supplying a custom message.

        Args:
            to (string): The AddressId or an object structured when creating
                an address by addresses/Create.
            mfrom (string): The AddressId or an object structured when
                creating an address by addresses/Create.
            attachbyid (string): Set an existing postcard by attaching its
                PostcardId.
            front (string): A 4.25"x6.25" or 6.25"x11.25" image to use as the
                front of the postcard.  This can be a URL, local file, or an
                HTML string. Supported file types are PDF, PNG, and JPEG.
            back (string): A 4.25"x6.25" or 6.25"x11.25" image to use as the
                back of the postcard, supplied as a URL, local file, or HTML
                string.  This allows you to customize your back design, but we
                will still insert the recipient address for you.
            message (string): The message for the back of the postcard with a
                maximum of 350 characters.
            setting (string): Code for the dimensions of the media to be
                printed.
            description (string, optional): A description for the postcard.
            htmldata (string, optional): A string value that contains HTML
                markup.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/Postcard/createpostcard.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'to': to,
            'from': mfrom,
            'attachbyid': attachbyid,
            'front': front,
            'back': back,
            'message': message,
            'setting': setting,
            'description': description,
            'htmldata': htmldata
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_postcards(self,
                              page=None,
                              pagesize=None,
                              postcardid=None,
                              date_created=None):
        """Does a POST request to /Postcard/listpostcard.json.

        Retrieve a list of postcard objects. The postcards objects are sorted
        by creation date, with the most recently created postcards appearing
        first.

        Args:
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            pagesize (int, optional): The count of objects to return per
                page.
            postcardid (string, optional): The unique identifier for a
                postcard object.
            date_created (string, optional): The date the postcard was
                created.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/Postcard/listpostcard.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': page,
            'pagesize': pagesize,
            'postcardid': postcardid,
            'dateCreated': date_created
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
