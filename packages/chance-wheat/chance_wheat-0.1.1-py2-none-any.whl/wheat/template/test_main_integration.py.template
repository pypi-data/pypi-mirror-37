#!/usr/bin/env python
# -*- coding: utf-8 -*-
# File: {FILE_NAME}
# Author: {AUTHOR_NAME}
import logging
import os
import sys

from chanconfig import MultipleConfig
from mock_logger import MockLoggingHandler
from nose.tools import assert_equals

from {PROJECT_NAME} import main
from {PROJECT_NAME}.constant import CONFIGS
from {PROJECT_NAME}.main import initialize_logger, read_arguments


HANDLER = MockLoggingHandler(level='DEBUG')


def test_initialize_logger():
    """Check if ``initialize_logger`` works
    """
    configs = MultipleConfig(*CONFIGS['logging'])
    logger = logging.getLogger(main.__name__)
    logger.addHandler(HANDLER)
    HANDLER.reset()
    initialize_logger(configs.dict)
    assert_equals(HANDLER.messages['info'], ['Initialize logger'])


def test_read_arguments():
    """Check if ``read_arguments`` works
    """
    sys.argv = ['', '--config', 'debug']

    expect_value_dict = {
        'kafka': {
            'host': 'test', 'consumer_timeout_ms': 100,
            'auto_offset_reset': 'test'
        }
    }

    os.environ['KAFKA_HOST'] = 'test'
    os.environ['{ENV_NAME}_CONSUMER_TIMEOUT_MS'] = '100'
    os.environ['{ENV_NAME}_AUTO_OFFSET_RESET'] = 'test'

    result = read_arguments()

    for key, value in expect_value_dict.items():
        assert_equals(value, result[key])


def test_read_arguments_timeout_ValueError():
    """Check if ``read_arguments`` when timeout is not correct value
    """
    sys.argv = ['', '--config', 'debug']

    expect_value_dict = {
        'kafka': {
            'host': 'test', 'consumer_timeout_ms': None,
            'auto_offset_reset': 'test'
        }
    }

    os.environ['{ENV_NAME}_CONSUMER_TIMEOUT_MS'] = 'test'
    result = read_arguments()

    for key, value in expect_value_dict.items():
        assert_equals(value, result[key])
