
Loading the model meshfile
==========================

Once the section longitude and latitude endpoints have been defined,
the next step is to "convert" them into the world of the model. This
is done by using the
:py:mod:`pypago.pypago_guis.gui_grid_model` Python program. This opens the GUI
that is shown in :numref:`fig_ihmgrid1`.

.. _fig_ihmgrid1:

.. figure:: ../../../figs/grid_1.png
   :scale: 40 %

   GUI of the :py:mod:`pypago.pypago_guis.gui_grid_model`  program

Menus
-----

The :py:mod:`pypago.pypago_guis.gui_grid_model` is made of a
:menuselection:`File` menu and
of a :menuselection:`Section` menu.
The :menuselection:`File` menu is made of a :menuselection:`Quit` item (quit
the application), an :menuselection:`Open` item and
:menuselection:`Save`/:menuselection:`Save As` items.
The :menuselection:`Open` item is used to load the model meshfile, containing
all the scale factors of the model configuration. It must be a |netcdf| file.
The :menuselection:`Save`/:menuselection:`Save As` items are used to save the
outputs of the |pypago| programs that convert the section endpoints into model
indices.

The :menuselection:`Section` menu only contains a
:guilabel:`Load section` item,
which is used to load section endpoints that have been generated by
the :py:mod:`pypago.pypago_guis.gui_sections_edition` program.
Note that is menu item is deactivated until a meshfile has been loaded.

Opening a meshfile
------------------

As a first step, the user must define the name of the model that is
going to be processed. This is done by setting the :guilabel:`Model`
ComboBox. Then, the user must load the |netcdf| meshfile of the model by
using the :menuselection:`Open` menu item. When this is done, the
mask of the model is plotted, as shown in
:numref:`fig_ihmgrid2`, and the default domain is plotted as a black
rectangle. The next step is to edit the domain, for instance by
reducing the size of the domain according to the section positions.

.. _fig_ihmgrid2:

.. figure:: ../../../figs/grid_2.png
   :scale: 40 %

   Example of the mask of a global model configuration (here,
   the CNRM model).

Domain edition
--------------

The domain edition is handled by the top-left widgets. The
:guilabel:`min_i`, :guilabel:`max_i`, :guilabel:`min_j` and :guilabel:`max_j`
widgets control the domain left, right i-indices and bottom, top
j-indices, respectively. Default values are set to the biggest
possible domain.

The section can be changed by "click and drag" on the corner
points (but not on the lines) or by a change in the TextControl
widgets. In the latter case, the changes are validated when the :kbd:`ENTER`
key is pressed. Such a change is shown in :numref:`fig_ihmgrid3`.

With this specific grid, the user interested in the Indian Ocean might
be a little disappointed, since the box domain does not cross it. In
order to overcome this issue, the user must set, in the TextControl
widgets, a value for :guilabel:`min_i` that is greater than the value of
:guilabel:`min_j`. This switches the previous box into two boxes, as shown
in :numref:`fig_ihmgrid4`. With this layout, the user can define
a domain that encompasses the Indian Ocean.

.. _fig_ihmgrid3:

.. figure:: ../../../figs/grid_3.png
   :scale: 40 %

   Example of a change in domain

.. _fig_ihmgrid4:

.. figure:: ../../../figs/grid_4.png
   :scale: 40 %

   Example of a change in domain, when the min\_i value is
   greater than the min\_j value.

Loading a section file
----------------------

When the meshfile is loaded and the subdomain selected, the user must
now the section endpoints that have been generated using the
:py:mod:`pypago.pypago_guis.gui_sections_edition`.
When this is done, the program
computes the model indices that are associated with the section
endpoints (these indices are model dependent) and draw the sections as
"stairs", as shown in :numref:`fig_ihmgrid5`.
When this is done, the top-left RadioBox activates and switches to
:guilabel:`Check sections`.

.. _fig_ihmgrid5:

.. figure:: ../../../figs/grid_5.png
   :scale: 40 %

   Section "stairs" that are drawn when loading a section file
   into the :py:mod:`pypago.pypago_guis.gui_grid_model` program.

Checking and editing the sections
---------------------------------

When these "stairs" are plotted, the user must verify that they are
well defined. The points that appear on the figure and which define
the direction where the transport is counted positive must all be on
the same side of the line, as in :numref:`fig_ihmgrid7`. If it is
the case, the user can save the model indices that are associated with
the sections into a file, by using the
:menuselection:`Save`/:menuselection:`Save As` menu items.

If they are not, the user must change the direction of the bad
segments. This is done by switching the RadioBox to
:guilabel:`Edit Sections`. This edition mode is similar to the one
described previously, except that the section edition can only be
achieved by modifying the point positions.  Furthermore, if the user
plans to perform budgets within closed domains, he needs to check that
the sections indeed define a closed domain.

If the domain is too large compared to the section positions, the user
may also be interested in reducing the size of the domain. This is
done by switching the RadioBox to :guilabel:`Edit Sections`.
Note that the :menuselection:`Save`/:menuselection:`Save As` menu item is only
activated when this RadioBox is set to :guilabel:`Check Sections`, in order to
force the user to check that the sections are well defined.

.. _fig_ihmgrid7:

.. figure:: ../../../figs/grid_7.png
   :scale: 40 %

   "Stairs"


.. _fig_ihmgrid6:

.. figure:: ../../../figs/grid_6.png
   :scale: 40 %

When the user is done, he can save the outputs of the program in a
:file:`.pygo` file. The output file contains a dictionary that contains
three variables, a :py:data:`MODEL_time`, a :py:data:`MODEL_grid` and a
:py:data:`MODEL_sections` variable. The :py:data:`MODEL_time` variable is a
numpy array containing a single missing value (model time-steps will be
concatenated to this list). The :py:data:`MODEL_grid` contains some
information about the model (such as the coordinates, the mask, the
bathymetry, etc) on the domain that has been selected on the
:py:mod:`pypago.pypago_guis.gui_grid_model`. The :py:data:`MODEL_sections` variables is a
list, with as many elements as sections. It contains informations
about the sections (their spatial indices, the area of the grid cell)
and it initialises the :py:data:`vecv`, :py:data:`vect` and :py:data:`vecs`
arrays, which will contain the velocity, temperature and salinity arrays of the
section along the section (the variables are initialised as missing values
array).

.. _definition_of_closed_domain:
