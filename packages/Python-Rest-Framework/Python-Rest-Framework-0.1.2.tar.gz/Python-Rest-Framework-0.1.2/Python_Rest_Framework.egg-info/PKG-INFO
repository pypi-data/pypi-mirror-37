Metadata-Version: 1.2
Name: Python-Rest-Framework
Version: 0.1.2
Summary: Python Rest Framework. Box utils for easy makes rest api on python
Home-page: https://github.com/nxexox/python-rest-framework
Author: Deys Timofey
Author-email: nxexox@gmail.com
Maintainer: Deys Timofey
Maintainer-email: nxexox@gmail.com
License: Apache 2.0
Description: # flask-rest-framework
        Flask Rest Framework
        
        ## Сделали:
        
        * Базовый филд, и пару филдов для тестирования.
        * Базовый сериалайзер.
        * Базовую логику взаимодействия филдов сериалайзеров и валидаторов.
        
        ## TODO:
        
        - [x] Сериалайзер должен вести себя как поле, что бы можно было делать вложенность
        - [x] Научить сериалайзер работать не с одним объектом а с множеством. many=True
        - [x] Научиться понимать что данные неверные до того, как мы пробрасываем их в валидаторы
        - [x] Сериалайзер должен вести себя как поле, что бы можно было делать вложенность
        - [x] Научить сериалайзер object -> dict
        - [x] Научиться вложенные сериалайзеры работать как обязательные.
        - [ ] Протестировать сериалайзеры, и дофиксить баги.
        - - [x] Протестировать юзер кейсы использования.
        - - [ ] Протестировать все методы и логику взаимодействия внутри сериалайзера.
        - [ ] Написать APIView, и все CRUDGenericView
        - [ ] Научиться парсить тело запроса что бы преобразовывать в валидный дикт и пробрасывать в сериалайзер
        - [ ] Научиться делать хэндлеры с ошибками и ывбрасывать их через self.fail или Исключение
        
        
        
        ```python
        >>> from rest_framework.serializers.serializers import Serializer
        >>> from rest_framework.serializers.fields import CharField, IntegerField
        
        class Test(Serializer):
            char_field = CharField(required=False, min_length=10)
            int_field = IntegerField(required=True)
        
        ser = Test(data={field_name: field_value,...})
        res_valid = ser.is_valid()  # ser.is_valid(raise_exception=True)
        
        if res_valid:
            print(ser.validated_data)
        else:
            print(ser.errors)
        
        ```
        
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
