# import pytest
import numpy as np
import os
import pyansys


class TestCyclicResultReader182(object):
    result = pyansys.Result(os.path.join(path, 'v182.rst'))
    ansys = pyansys.ANSYS(exec_file='/usr/ansys_inc/v182/ansys/bin/ansys182', override=True,
                          jobname='v182', loglevel='ERROR', run_location=path)

    # setup ansys for output without line breaks
    ansys.Post1()
    ansys.Set(1, 1)
    ansys.Header('OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF')
    ansys.Format('', 'E', 80, 20)
    ansys.Page(1E9, '', -1)

    def test_prnsol_u(self):
        # verify cyclic displacements
        self.ansys.Prnsol('u')
        msg = self.ansys.last_message().splitlines()
        array = np.genfromtxt(msg[10:])
        ansys_nnum = array[:, 0].astype(np.int)
        ansys_disp = array[:, 1:-1]

        nnum, disp = self.result.NodalSolution(0)

        # cyclic model will only output the master sector
        ansys_nnum = ansys_nnum[:nnum.size]
        ansys_disp = ansys_disp[:nnum.size]

        assert np.allclose(ansys_nnum, nnum)
        assert np.allclose(ansys_disp, disp)

    def test_presol_s(self):
        # verify element stress
        element_stress, elemnum, enode = self.result.ElementStress(0)
        element_stress = np.vstack(element_stress)
        enode = np.hstack(enode)

        self.ansys.Presol('S')
        msg = self.ansys.last_message().splitlines()
        ansys_element_stress = []
        for line in msg:
            if len(line) == 201:
                ansys_element_stress.append(line)
        ansys_element_stress = np.genfromtxt(ansys_element_stress)
        ansys_enode = ansys_element_stress[:, 0].astype(np.int)
        ansys_element_stress = ansys_element_stress[:, 1:]

        assert np.allclose(element_stress, ansys_element_stress)
        assert np.allclose(enode, ansys_enode)

    def test_prnsol_s(self):
        # verify cyclic displacements
        self.ansys.Prnsol('s')
        msg = self.ansys.last_message().splitlines()
        array = np.genfromtxt(msg[10:])
        ansys_nnum = array[:, 0].astype(np.int)
        ansys_stress = array[:, 1:]

        nnum, stress = self.result.NodalStress(0)

        # v150 includes nodes in the geometry that aren't in the result
        mask = np.in1d(nnum, ansys_nnum)
        nnum = nnum[mask]
        stress = stress[mask]

        assert np.allclose(ansys_nnum, nnum)
        assert np.allclose(ansys_stress, stress)

    def test_prnsol_prin(self):
        # verify principal stress
        self.ansys.Prnsol('prin')
        msg = self.ansys.last_message().splitlines()
        array = np.genfromtxt(msg[10:])
        ansys_nnum = array[:, 0].astype(np.int)
        ansys_stress = array[:, 1:]

        nnum, stress = self.result.PrincipalNodalStress(0)

        # v150 includes nodes in the geometry that aren't in the result
        mask = np.in1d(nnum, ansys_nnum)
        nnum = nnum[mask]
        stress = stress[mask]

        assert np.allclose(ansys_nnum, nnum)
        assert np.allclose(ansys_stress, stress, atol=1E-2)

    def test_plot(self):
        filename = '/tmp/temp.png'
        self.result.PlotNodalSolution(0, screenshot=filename, interactive=False)
        self.result.PlotNodalStress(0, 'Sx', screenshot=filename, interactive=False)
        self.result.PlotPrincipalNodalStress(0, 'SEQV', screenshot=filename, interactive=False)


class TestCyclicResultReader150(TestCyclicResultReader182):
    """ test if cyclic result reader works for v150 """

    result = pyansys.Result(os.path.join(path, 'v150.rst'))
    ansys = pyansys.ANSYS(exec_file='/usr/ansys_inc/v150/ansys/bin/ansys150',
                          override=True,
                          jobname='v150',
                          loglevel='ERROR',
                          run_location=path)

    # setup ansys for output without line breaks
    ansys.Post1()
    ansys.Set(1, 1)
    ansys.Header('OFF', 'OFF', 'OFF', 'OFF', 'OFF', 'OFF')
    ansys.Format('', 'E', 80, 20)
    ansys.Page(1E9, '', -1)


