# -*- coding: utf-8 -*-
KEYWORDS = {'waitForMultipleImages': {'arg': ['timeout', 'pollingInterval', 'expectedImages', 'notExpectedImages'], 'doc': 'Wait For Multiple Images\n\n Check if images exists in expectedImages or notExpectedImages list. If image appears that is listed in notExpectedImages list or timeout happened, throw exception If image appears that is listed in expectedImageslist return succesfully. \n\n @timeout: wait seconds\n\n @pollingInterval: time in seconds between screen checks\n\n @expectedImages: list of expected images in screen\n\n @notExpectedImages: list of not expected images in screen\n\n Example Usage:\n | @{wanted_images} =  | Create List | wanted_image1.png | wanted_image2.png |\n | @{not_wanted_images} =  | Create List | not_wanted_image1.png | not_wanted_image2.png | not_wanted_image3.png |\n | Wait For Multiple Images | 900 | 10 | ${wanted_images} | ${not_wanted_images} |'}, 'changeScreenId': {'arg': ['screenId'], 'doc': 'Change screen id\n\n For multi display, user could use this keyword to switch to the correct scrren'}, 'clickIn': {'arg': ['areaImage', 'targetImage'], 'doc': 'Click in. \nClick target image in area image.'}, 'mouseDown': {'arg': ['*mouseButtons'], 'doc': 'Press and hold the specified buttons\n\n @mouseButtons: Could be LEFT, MIDDLE, RIGHT\n\n Example Usage:\n | Mouse Move   | test.png | \n | Mouse Down   | LEFT     | RIGHT |\n | Mouse Up     |'}, 'getExtendedRegionFrom': {'arg': ['image', 'direction', 'number_of_times_to_repeat'], 'doc': 'Get extended region from\n Extended the given image creating a region above or below with the same width\n The height can change using the multiplier @number_of_times_to_repeat, if 2 is given the new region will have twice the height of the orignalge '}, 'dragAndDrop': {'arg': ['srcImage', 'targetImage'], 'doc': 'Drag the source image to target image.\nIf source image is empty, drag the last match and drop at given target'}, 'addImagePath': {'arg': ['path'], 'doc': 'Add image path'}, 'highlight': {'arg': ['image', 'secs='], 'doc': 'Highlight matched image.\n If secs is set, highlight will vanish automatically after setted seconds'}, 'wheelDown': {'arg': ['steps', 'image='], 'doc': 'Move mouse to the target, and wheel down with give steps\n\n Example Usage:\n | Wheel Down     | 5   | \n | Wheel Down     | 5   |  test.png   |'}, 'pressSpecialKey': {'arg': ['keyConstant'], 'doc': 'Presses a special keyboard key.\n\n For a list of possible Keys view docs for org.sikuli.script.Key .\n\n Example Usage:\n | Double Click | textFieldWithDefaultText.png | \n | Press Special Key | DELETE | '}, 'typeWithModifiers': {'arg': ['text', '*modifiers'], 'doc': 'Type with modifiers\n Example:\n |Type With Modifiers| A| CTRL |'}, 'rightClickIn': {'arg': ['areaImage', 'targetImage'], 'doc': 'Right click in. \nRight click target image in area image.'}, 'getCurrentScreenId': {'arg': [], 'doc': 'Get current screen number'}, 'clearAllHighlights': {'arg': [], 'doc': 'Clear all highlights from screen'}, 'waitForImage': {'arg': ['wantedImage', 'notWantedImage', 'timeout'], 'doc': 'Wait For Image\n\n Check wantedImage exist. If notWantedImage appear or timeout happened, throw exception\n\n @wantedImage: expected image in screen\n\n @notWantedImage: unexpected image in screen\n\n @timeout: wait seconds\n\n Example Usage:\n | Wait For Image  | wanted.png | notWanted.png | 5 |'}, 'mouseMove': {'arg': ['image='], 'doc': 'Move the mouse pointer to the target\n\n @image: if image is empty, will move mouse to the last matched.\n\n Example Usage:\n | Mouse Move              | test.png | \n | Screen Should Contain   | test.png | \n | Mouse Move |'}, 'getText': {'arg': ['image='], 'doc': 'Get text\n\n If image is not given, keyword will get text from whole Screen\n If image is given, keyword will get text from matched region\n Call keyword setOcrTextRead to set OcrTextRead as true, before using text recognition keywords\n\n Example Usage:\n | Set Ocr Text Read  | true       |\n | Get Text           |\n | Get Text           | test.png   |'}, 'waitUntilScreenContain': {'arg': ['image', 'timeout'], 'doc': 'Wait until image shown in screen'}, 'inputText': {'arg': ['image', 'text'], 'doc': 'Input text. Image could be empty'}, 'wheelUp': {'arg': ['steps', 'image='], 'doc': 'Move mouse to the target, and wheel up with give steps\n\n Example Usage:\n | Wheel Up     | 5   | \n | Wheel Up     | 5   |  test.png   |'}, 'waitUntilScreenNotContain': {'arg': ['image', 'timeout'], 'doc': 'Wait until image not in screen'}, 'doubleClickIn': {'arg': ['areaImage', 'targetImage'], 'doc': 'Double click in. \nDouble click target image in area image.'}, 'click': {'arg': ['image', 'xOffset=0', 'yOffset=0'], 'doc': 'Click image'}, 'captureScreen': {'arg': [], 'doc': 'Capture whole screen, file name is returned'}, 'rightClick': {'arg': ['image'], 'doc': 'Right click image'}, 'setTimeout': {'arg': ['timeout'], 'doc': 'Set Sikuli timeout(seconds)'}, 'clearHighlight': {'arg': ['image'], 'doc': 'Clear highlight from screen'}, 'doubleClick': {'arg': ['image', 'xOffset=0', 'yOffset=0'], 'doc': 'Double click image'}, 'screenShouldContain': {'arg': ['image'], 'doc': 'Screen should contain image'}, 'dragAndDropByOffset': {'arg': ['srcImage', 'xOffset', 'yOffset'], 'doc': 'Drag the source image to target by offset.\nIf source image is empty, drag the last match and drop at given target'}, 'screenShouldNotContain': {'arg': ['image'], 'doc': 'Screen should not contain image'}, 'mouseUp': {'arg': ['*mouseButtons'], 'doc': 'release the specified mouse buttons\n\n @mouseButtons: Could be LEFT, MIDDLE, RIGHT. If empty, all currently held buttons are released\n\n Example Usage:\n | Mouse Move   | test.png | \n | Mouse Down   | LEFT     | RIGHT |\n | Mouse Up     | LEFT     | RIGHT |'}, 'readTextFromRegion': {'arg': ['reg'], 'doc': 'Read text from given region'}, 'pasteText': {'arg': ['image', 'text'], 'doc': 'Paste text. Image could be empty'}, 'setCaptureFolder': {'arg': ['path'], 'doc': 'Set folder for captured images'}, 'exists': {'arg': ['image', 'timeout='], 'doc': 'Exists\n\n Check whether image exists in screen\n @image: expected image in screen\n @timeout: wait seconds\n\n Example Usage:\n | ${is_exist}  | Exists | image.png | 0 |'}, 'setCaptureMatchedImage': {'arg': ['value'], 'doc': 'Set capture matched images, the default value is true\nExample:\n| Set Capture Matched Image | false |'}, 'removeImagePath': {'arg': ['path'], 'doc': 'Remove image path'}, 'getMatchScore': {'arg': ['image'], 'doc': 'Tries to find the image on the screen, returns accuracy score (0-1)\n Example Usage:\n | ${score} = | Get Match Score |  somethingThatMayExist.png |\n | Run Keyword if | ${score} > 0.95 | keyword1 | ELSE | keyword2 |'}, 'setOcrTextRead': {'arg': ['ocrTextRead'], 'doc': 'Set Sikuli OCR text read(true/false)'}, 'setMinSimilarity': {'arg': ['minSimilarity'], 'doc': 'Set Sikuli minSimilarity(0-1)'}, 'stop_remote_server': {'arg': [], 'doc': 'Stops the remote server.\n\nThe server may be configured so that users cannot stop it.'}, 'start_sikuli_process': {'arg': ['port=None'], 'doc': '\n        This keyword is used to start sikuli java process.\n        If library is inited with mode "OLD", sikuli java process is started automatically.\n        If library is inited with mode "NEW", this keyword should be used.\n\n        :param port: port of sikuli java process, if value is None or 0, a random free port will be used\n        :return: None\n        '}}