#
# Generated by erpcgen 1.6.0 on Thu Jul 26 16:07:23 2018.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for DeviceSystem
class DeviceSystemService(erpc.server.Service):
    def __init__(self, handler):
        super(DeviceSystemService, self).__init__(interface.IDeviceSystem.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IDeviceSystem.SYS_FIRMWARE_VERSION_ID: self._handle_sys_firmware_version,
                interface.IDeviceSystem.SYS_SOFTWARE_RESET_ID: self._handle_sys_software_reset,
                interface.IDeviceSystem.SYS_HARDWARE_RESET_ID: self._handle_sys_hardware_reset,
            }

    def _handle_sys_firmware_version(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        major = erpc.Reference()
        minor = erpc.Reference()
        maintenance = erpc.Reference()
        crc = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.sys_firmware_version(major, minor, maintenance, crc)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceSystem.SERVICE_ID,
            request=interface.IDeviceSystem.SYS_FIRMWARE_VERSION_ID,
            sequence=sequence))
        if major.value is None:
            raise ValueError("major is None")
        codec.write_uint32(major.value)
        if minor.value is None:
            raise ValueError("minor is None")
        codec.write_uint32(minor.value)
        if maintenance.value is None:
            raise ValueError("maintenance is None")
        codec.write_uint32(maintenance.value)
        if crc.value is None:
            raise ValueError("crc is None")
        codec.write_uint32(crc.value)
        codec.write_string(_result)

    def _handle_sys_software_reset(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.sys_software_reset()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceSystem.SERVICE_ID,
            request=interface.IDeviceSystem.SYS_SOFTWARE_RESET_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_sys_hardware_reset(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.sys_hardware_reset()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceSystem.SERVICE_ID,
            request=interface.IDeviceSystem.SYS_HARDWARE_RESET_ID,
            sequence=sequence))
        codec.write_int8(_result)


# Client for DeviceButton
class DeviceButtonService(erpc.server.Service):
    def __init__(self, handler):
        super(DeviceButtonService, self).__init__(interface.IDeviceButton.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IDeviceButton.BTN_GET_PRESSED_ID: self._handle_btn_get_pressed,
                interface.IDeviceButton.BTN_GET_PRESS_TIME_ID: self._handle_btn_get_press_time,
                interface.IDeviceButton.BTN_SET_ENABLED_ID: self._handle_btn_set_enabled,
                interface.IDeviceButton.BTN_GET_ENABLED_ID: self._handle_btn_get_enabled,
            }

    def _handle_btn_get_pressed(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        pressed = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.btn_get_pressed(pressed)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceButton.SERVICE_ID,
            request=interface.IDeviceButton.BTN_GET_PRESSED_ID,
            sequence=sequence))
        if pressed.value is None:
            raise ValueError("pressed is None")
        codec.write_bool(pressed.value)
        codec.write_int8(_result)

    def _handle_btn_get_press_time(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        press_time = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.btn_get_press_time(press_time)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceButton.SERVICE_ID,
            request=interface.IDeviceButton.BTN_GET_PRESS_TIME_ID,
            sequence=sequence))
        if press_time.value is None:
            raise ValueError("press_time is None")
        codec.write_uint32(press_time.value)
        codec.write_int8(_result)

    def _handle_btn_set_enabled(self, sequence, codec):
        # Read incoming parameters.
        enable = codec.read_bool()

        # Invoke user implementation of remote function.
        _result = self._handler.btn_set_enabled(enable)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceButton.SERVICE_ID,
            request=interface.IDeviceButton.BTN_SET_ENABLED_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_btn_get_enabled(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        enabled = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.btn_get_enabled(enabled)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceButton.SERVICE_ID,
            request=interface.IDeviceButton.BTN_GET_ENABLED_ID,
            sequence=sequence))
        if enabled.value is None:
            raise ValueError("enabled is None")
        codec.write_bool(enabled.value)
        codec.write_int8(_result)


# Client for DeviceRGB
class DeviceRGBService(erpc.server.Service):
    def __init__(self, handler):
        super(DeviceRGBService, self).__init__(interface.IDeviceRGB.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IDeviceRGB.RGB_SET_COLOUR_ID: self._handle_rgb_set_colour,
                interface.IDeviceRGB.RGB_GET_COLOUR_ID: self._handle_rgb_get_colour,
                interface.IDeviceRGB.RGB_SET_TIMINGS_ID: self._handle_rgb_set_timings,
                interface.IDeviceRGB.RGB_GET_TIMINGS_ID: self._handle_rgb_get_timings,
                interface.IDeviceRGB.RGB_SET_MODE_ID: self._handle_rgb_set_mode,
                interface.IDeviceRGB.RGB_GET_MODE_ID: self._handle_rgb_get_mode,
                interface.IDeviceRGB.RGB_SET_COEFFICIENTS_ID: self._handle_rgb_set_coefficients,
                interface.IDeviceRGB.RGB_GET_COEFFICIENTS_ID: self._handle_rgb_get_coefficients,
                interface.IDeviceRGB.RGB_SET_CONFIG_ID: self._handle_rgb_set_config,
                interface.IDeviceRGB.RGB_GET_CONFIG_ID: self._handle_rgb_get_config,
            }

    def _handle_rgb_set_colour(self, sequence, codec):
        # Read incoming parameters.
        colour = common.Colour()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_set_colour(colour)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceRGB.SERVICE_ID,
            request=interface.IDeviceRGB.RGB_SET_COLOUR_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_rgb_get_colour(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        colour = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_get_colour(colour)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceRGB.SERVICE_ID,
            request=interface.IDeviceRGB.RGB_GET_COLOUR_ID,
            sequence=sequence))
        if colour.value is None:
            raise ValueError("colour is None")
        colour.value._write(codec)
        codec.write_int8(_result)

    def _handle_rgb_set_timings(self, sequence, codec):
        # Read incoming parameters.
        timings = common.Timings()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_set_timings(timings)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceRGB.SERVICE_ID,
            request=interface.IDeviceRGB.RGB_SET_TIMINGS_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_rgb_get_timings(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        timings = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_get_timings(timings)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceRGB.SERVICE_ID,
            request=interface.IDeviceRGB.RGB_GET_TIMINGS_ID,
            sequence=sequence))
        if timings.value is None:
            raise ValueError("timings is None")
        timings.value._write(codec)
        codec.write_int8(_result)

    def _handle_rgb_set_mode(self, sequence, codec):
        # Read incoming parameters.
        mode = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_set_mode(mode)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceRGB.SERVICE_ID,
            request=interface.IDeviceRGB.RGB_SET_MODE_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_rgb_get_mode(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        mode = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_get_mode(mode)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceRGB.SERVICE_ID,
            request=interface.IDeviceRGB.RGB_GET_MODE_ID,
            sequence=sequence))
        if mode.value is None:
            raise ValueError("mode is None")
        codec.write_uint32(mode.value)
        codec.write_int8(_result)

    def _handle_rgb_set_coefficients(self, sequence, codec):
        # Read incoming parameters.
        coeffs = common.Coefficients()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_set_coefficients(coeffs)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceRGB.SERVICE_ID,
            request=interface.IDeviceRGB.RGB_SET_COEFFICIENTS_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_rgb_get_coefficients(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        coeffs = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_get_coefficients(coeffs)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceRGB.SERVICE_ID,
            request=interface.IDeviceRGB.RGB_GET_COEFFICIENTS_ID,
            sequence=sequence))
        if coeffs.value is None:
            raise ValueError("coeffs is None")
        coeffs.value._write(codec)
        codec.write_int8(_result)

    def _handle_rgb_set_config(self, sequence, codec):
        # Read incoming parameters.
        mode = codec.read_uint32()
        timings = common.Timings()._read(codec)
        colour = common.Colour()._read(codec)
        coeffs = common.Coefficients()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_set_config(mode, timings, colour, coeffs)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceRGB.SERVICE_ID,
            request=interface.IDeviceRGB.RGB_SET_CONFIG_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_rgb_get_config(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        mode = erpc.Reference()
        timings = erpc.Reference()
        colour = erpc.Reference()
        coeffs = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.rgb_get_config(mode, timings, colour, coeffs)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceRGB.SERVICE_ID,
            request=interface.IDeviceRGB.RGB_GET_CONFIG_ID,
            sequence=sequence))
        if mode.value is None:
            raise ValueError("mode is None")
        codec.write_uint32(mode.value)
        if timings.value is None:
            raise ValueError("timings is None")
        timings.value._write(codec)
        if colour.value is None:
            raise ValueError("colour is None")
        colour.value._write(codec)
        if coeffs.value is None:
            raise ValueError("coeffs is None")
        coeffs.value._write(codec)
        codec.write_int8(_result)


# Client for DevicePath
class DevicePathService(erpc.server.Service):
    def __init__(self, handler):
        super(DevicePathService, self).__init__(interface.IDevicePath.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IDevicePath.PATH_GET_STATUS_ID: self._handle_path_get_status,
                interface.IDevicePath.PATH_GET_RESULT_ID: self._handle_path_get_result,
                interface.IDevicePath.PATH_CLEAR_RESULT_ID: self._handle_path_clear_result,
                interface.IDevicePath.PATH_OPEN_ID: self._handle_path_open,
                interface.IDevicePath.PATH_CLOSE_ID: self._handle_path_close,
                interface.IDevicePath.PATH_GET_BARRIER_TIMEOUT_ID: self._handle_path_get_barrier_timeout,
                interface.IDevicePath.PATH_GET_LOOPS_TIMEOUT_ID: self._handle_path_get_loops_timeout,
                interface.IDevicePath.PATH_GET_LOOPS_HOLD_ID: self._handle_path_get_loops_hold,
                interface.IDevicePath.PATH_GET_CONFIG_ID: self._handle_path_get_config,
            }

    def _handle_path_get_status(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        status = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_get_status(status)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevicePath.SERVICE_ID,
            request=interface.IDevicePath.PATH_GET_STATUS_ID,
            sequence=sequence))
        if status.value is None:
            raise ValueError("status is None")
        status.value._write(codec)
        codec.write_int8(_result)

    def _handle_path_get_result(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        result = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_get_result(result)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevicePath.SERVICE_ID,
            request=interface.IDevicePath.PATH_GET_RESULT_ID,
            sequence=sequence))
        if result.value is None:
            raise ValueError("result is None")
        codec.write_uint32(result.value)
        codec.write_int8(_result)

    def _handle_path_clear_result(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_clear_result()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevicePath.SERVICE_ID,
            request=interface.IDevicePath.PATH_CLEAR_RESULT_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_path_open(self, sequence, codec):
        # Read incoming parameters.
        force = codec.read_bool()
        autoClose = codec.read_bool()

        # Invoke user implementation of remote function.
        _result = self._handler.path_open(force, autoClose)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevicePath.SERVICE_ID,
            request=interface.IDevicePath.PATH_OPEN_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_path_close(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_close()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevicePath.SERVICE_ID,
            request=interface.IDevicePath.PATH_CLOSE_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_path_get_barrier_timeout(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        timeout = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_get_barrier_timeout(timeout)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevicePath.SERVICE_ID,
            request=interface.IDevicePath.PATH_GET_BARRIER_TIMEOUT_ID,
            sequence=sequence))
        if timeout.value is None:
            raise ValueError("timeout is None")
        codec.write_uint16(timeout.value)
        codec.write_int8(_result)

    def _handle_path_get_loops_timeout(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        timeout = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_get_loops_timeout(timeout)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevicePath.SERVICE_ID,
            request=interface.IDevicePath.PATH_GET_LOOPS_TIMEOUT_ID,
            sequence=sequence))
        if timeout.value is None:
            raise ValueError("timeout is None")
        codec.write_uint16(timeout.value)
        codec.write_int8(_result)

    def _handle_path_get_loops_hold(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        hold_time = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_get_loops_hold(hold_time)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevicePath.SERVICE_ID,
            request=interface.IDevicePath.PATH_GET_LOOPS_HOLD_ID,
            sequence=sequence))
        if hold_time.value is None:
            raise ValueError("hold_time is None")
        codec.write_uint16(hold_time.value)
        codec.write_int8(_result)

    def _handle_path_get_config(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        barrier_timeout = erpc.Reference()
        loops_timeout = erpc.Reference()
        loops_hold = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.path_get_config(barrier_timeout, loops_timeout, loops_hold)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDevicePath.SERVICE_ID,
            request=interface.IDevicePath.PATH_GET_CONFIG_ID,
            sequence=sequence))
        if barrier_timeout.value is None:
            raise ValueError("barrier_timeout is None")
        codec.write_uint16(barrier_timeout.value)
        if loops_timeout.value is None:
            raise ValueError("loops_timeout is None")
        codec.write_uint16(loops_timeout.value)
        if loops_hold.value is None:
            raise ValueError("loops_hold is None")
        codec.write_uint16(loops_hold.value)
        codec.write_int8(_result)


# Client for DeviceBuzzer
class DeviceBuzzerService(erpc.server.Service):
    def __init__(self, handler):
        super(DeviceBuzzerService, self).__init__(interface.IDeviceBuzzer.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IDeviceBuzzer.BUZZER_SET_FREQUENCY_ID: self._handle_buzzer_set_frequency,
                interface.IDeviceBuzzer.BUZZER_GET_FREQUENCY_ID: self._handle_buzzer_get_frequency,
                interface.IDeviceBuzzer.BUZZER_ENABLE_ID: self._handle_buzzer_enable,
                interface.IDeviceBuzzer.BUZZER_ENABLE_ACK_ID: self._handle_buzzer_enable_ACK,
                interface.IDeviceBuzzer.BUZZER_ENABLE_NAK_ID: self._handle_buzzer_enable_NAK,
            }

    def _handle_buzzer_set_frequency(self, sequence, codec):
        # Read incoming parameters.
        frequency = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.buzzer_set_frequency(frequency)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceBuzzer.SERVICE_ID,
            request=interface.IDeviceBuzzer.BUZZER_SET_FREQUENCY_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_buzzer_get_frequency(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        frequency = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.buzzer_get_frequency(frequency)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceBuzzer.SERVICE_ID,
            request=interface.IDeviceBuzzer.BUZZER_GET_FREQUENCY_ID,
            sequence=sequence))
        if frequency.value is None:
            raise ValueError("frequency is None")
        codec.write_uint16(frequency.value)
        codec.write_int8(_result)

    def _handle_buzzer_enable(self, sequence, codec):
        # Read incoming parameters.
        onTime = codec.read_uint16()
        offTime = codec.read_uint16()
        repeat = codec.read_int16()

        # Invoke user implementation of remote function.
        _result = self._handler.buzzer_enable(onTime, offTime, repeat)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceBuzzer.SERVICE_ID,
            request=interface.IDeviceBuzzer.BUZZER_ENABLE_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_buzzer_enable_ACK(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.buzzer_enable_ACK()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceBuzzer.SERVICE_ID,
            request=interface.IDeviceBuzzer.BUZZER_ENABLE_ACK_ID,
            sequence=sequence))
        codec.write_int8(_result)

    def _handle_buzzer_enable_NAK(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.buzzer_enable_NAK()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IDeviceBuzzer.SERVICE_ID,
            request=interface.IDeviceBuzzer.BUZZER_ENABLE_NAK_ID,
            sequence=sequence))
        codec.write_int8(_result)


# Client for HostPins
class HostPinsService(erpc.server.Service):
    def __init__(self, handler):
        super(HostPinsService, self).__init__(interface.IHostPins.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IHostPins.INTERCOM_GET_ID: self._handle_intercom_get,
                interface.IHostPins.BREACH_GET_ID: self._handle_breach_get,
                interface.IHostPins.GPIO_GET_ID: self._handle_gpio_get,
                interface.IHostPins.GPIO_SET_ID: self._handle_gpio_set,
            }

    def _handle_intercom_get(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        pressed = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.intercom_get(pressed)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IHostPins.SERVICE_ID,
            request=interface.IHostPins.INTERCOM_GET_ID,
            sequence=sequence))
        if pressed.value is None:
            raise ValueError("pressed is None")
        codec.write_bool(pressed.value)
        codec.write_int8(_result)

    def _handle_breach_get(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        active = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.breach_get(active)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IHostPins.SERVICE_ID,
            request=interface.IHostPins.BREACH_GET_ID,
            sequence=sequence))
        if active.value is None:
            raise ValueError("active is None")
        codec.write_bool(active.value)
        codec.write_int8(_result)

    def _handle_gpio_get(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        active = erpc.Reference()

        # Read incoming parameters.
        idx = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.gpio_get(idx, active)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IHostPins.SERVICE_ID,
            request=interface.IHostPins.GPIO_GET_ID,
            sequence=sequence))
        if active.value is None:
            raise ValueError("active is None")
        codec.write_bool(active.value)
        codec.write_int8(_result)

    def _handle_gpio_set(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()
        active = codec.read_bool()

        # Invoke user implementation of remote function.
        _result = self._handler.gpio_set(idx, active)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IHostPins.SERVICE_ID,
            request=interface.IHostPins.GPIO_SET_ID,
            sequence=sequence))
        codec.write_int8(_result)


# Client for ClientNotifications
class ClientNotificationsService(erpc.server.Service):
    def __init__(self, handler):
        super(ClientNotificationsService, self).__init__(interface.IClientNotifications.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IClientNotifications.BUTTON_CHANGED_ID: self._handle_button_changed,
                interface.IClientNotifications.VEHICLE_CHANGED_ID: self._handle_vehicle_changed,
                interface.IClientNotifications.BARRIER_CHANGED_ID: self._handle_barrier_changed,
                interface.IClientNotifications.INTERCOM_CHANGED_ID: self._handle_intercom_changed,
                interface.IClientNotifications.BREACH_CHANGED_ID: self._handle_breach_changed,
                interface.IClientNotifications.GPIO_CHANGED_ID: self._handle_gpio_changed,
            }

    def _handle_button_changed(self, sequence, codec):
        # Read incoming parameters.
        pressed = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.button_changed(pressed)

    def _handle_vehicle_changed(self, sequence, codec):
        # Read incoming parameters.
        status = common.PathStatus()._read(codec)

        # Invoke user implementation of remote function.
        self._handler.vehicle_changed(status)

    def _handle_barrier_changed(self, sequence, codec):
        # Read incoming parameters.
        status = common.PathStatus()._read(codec)

        # Invoke user implementation of remote function.
        self._handler.barrier_changed(status)

    def _handle_intercom_changed(self, sequence, codec):
        # Read incoming parameters.
        active = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.intercom_changed(active)

    def _handle_breach_changed(self, sequence, codec):
        # Read incoming parameters.
        active = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.breach_changed(active)

    def _handle_gpio_changed(self, sequence, codec):
        # Read incoming parameters.
        idx = codec.read_uint8()
        active = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.gpio_changed(idx, active)


