#
# Generated by erpcgen 1.6.0 on Thu Jul 26 16:07:23 2018.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc

# Abstract base class for DeviceSystem
class IDeviceSystem(object):
    SERVICE_ID = 1
    SYS_FIRMWARE_VERSION_ID = 1
    SYS_SOFTWARE_RESET_ID = 2
    SYS_HARDWARE_RESET_ID = 3

    def sys_firmware_version(self, major, minor, maintenance, crc):
        raise NotImplementedError()

    def sys_software_reset(self):
        raise NotImplementedError()

    def sys_hardware_reset(self):
        raise NotImplementedError()


# Abstract base class for DeviceButton
class IDeviceButton(object):
    SERVICE_ID = 2
    BTN_GET_PRESSED_ID = 1
    BTN_GET_PRESS_TIME_ID = 2
    BTN_SET_ENABLED_ID = 3
    BTN_GET_ENABLED_ID = 4

    def btn_get_pressed(self, pressed):
        raise NotImplementedError()

    def btn_get_press_time(self, press_time):
        raise NotImplementedError()

    def btn_set_enabled(self, enable):
        raise NotImplementedError()

    def btn_get_enabled(self, enabled):
        raise NotImplementedError()


# Abstract base class for DeviceRGB
class IDeviceRGB(object):
    SERVICE_ID = 3
    RGB_SET_COLOUR_ID = 1
    RGB_GET_COLOUR_ID = 2
    RGB_SET_TIMINGS_ID = 3
    RGB_GET_TIMINGS_ID = 4
    RGB_SET_MODE_ID = 5
    RGB_GET_MODE_ID = 6
    RGB_SET_COEFFICIENTS_ID = 7
    RGB_GET_COEFFICIENTS_ID = 8
    RGB_SET_CONFIG_ID = 9
    RGB_GET_CONFIG_ID = 10

    def rgb_set_colour(self, colour):
        raise NotImplementedError()

    def rgb_get_colour(self, colour):
        raise NotImplementedError()

    def rgb_set_timings(self, timings):
        raise NotImplementedError()

    def rgb_get_timings(self, timings):
        raise NotImplementedError()

    def rgb_set_mode(self, mode):
        raise NotImplementedError()

    def rgb_get_mode(self, mode):
        raise NotImplementedError()

    def rgb_set_coefficients(self, coeffs):
        raise NotImplementedError()

    def rgb_get_coefficients(self, coeffs):
        raise NotImplementedError()

    def rgb_set_config(self, mode, timings, colour, coeffs):
        raise NotImplementedError()

    def rgb_get_config(self, mode, timings, colour, coeffs):
        raise NotImplementedError()


# Abstract base class for DevicePath
class IDevicePath(object):
    SERVICE_ID = 4
    PATH_GET_STATUS_ID = 1
    PATH_GET_RESULT_ID = 2
    PATH_CLEAR_RESULT_ID = 3
    PATH_OPEN_ID = 4
    PATH_CLOSE_ID = 5
    PATH_GET_BARRIER_TIMEOUT_ID = 6
    PATH_GET_LOOPS_TIMEOUT_ID = 7
    PATH_GET_LOOPS_HOLD_ID = 8
    PATH_GET_CONFIG_ID = 9

    def path_get_status(self, status):
        raise NotImplementedError()

    def path_get_result(self, result):
        raise NotImplementedError()

    def path_clear_result(self):
        raise NotImplementedError()

    def path_open(self, force, autoClose):
        raise NotImplementedError()

    def path_close(self):
        raise NotImplementedError()

    def path_get_barrier_timeout(self, timeout):
        raise NotImplementedError()

    def path_get_loops_timeout(self, timeout):
        raise NotImplementedError()

    def path_get_loops_hold(self, hold_time):
        raise NotImplementedError()

    def path_get_config(self, barrier_timeout, loops_timeout, loops_hold):
        raise NotImplementedError()


# Abstract base class for DeviceBuzzer
class IDeviceBuzzer(object):
    SERVICE_ID = 5
    BUZZER_SET_FREQUENCY_ID = 1
    BUZZER_GET_FREQUENCY_ID = 2
    BUZZER_ENABLE_ID = 3
    BUZZER_ENABLE_ACK_ID = 4
    BUZZER_ENABLE_NAK_ID = 5

    def buzzer_set_frequency(self, frequency):
        raise NotImplementedError()

    def buzzer_get_frequency(self, frequency):
        raise NotImplementedError()

    def buzzer_enable(self, onTime, offTime, repeat):
        raise NotImplementedError()

    def buzzer_enable_ACK(self):
        raise NotImplementedError()

    def buzzer_enable_NAK(self):
        raise NotImplementedError()


# Abstract base class for HostPins
class IHostPins(object):
    SERVICE_ID = 6
    INTERCOM_GET_ID = 1
    BREACH_GET_ID = 2
    GPIO_GET_ID = 3
    GPIO_SET_ID = 4

    def intercom_get(self, pressed):
        raise NotImplementedError()

    def breach_get(self, active):
        raise NotImplementedError()

    def gpio_get(self, idx, active):
        raise NotImplementedError()

    def gpio_set(self, idx, active):
        raise NotImplementedError()


# Abstract base class for ClientNotifications
class IClientNotifications(object):
    SERVICE_ID = 128
    BUTTON_CHANGED_ID = 1
    VEHICLE_CHANGED_ID = 2
    BARRIER_CHANGED_ID = 3
    INTERCOM_CHANGED_ID = 4
    BREACH_CHANGED_ID = 5
    GPIO_CHANGED_ID = 6

    def button_changed(self, pressed):
        raise NotImplementedError()

    def vehicle_changed(self, status):
        raise NotImplementedError()

    def barrier_changed(self, status):
        raise NotImplementedError()

    def intercom_changed(self, active):
        raise NotImplementedError()

    def breach_changed(self, active):
        raise NotImplementedError()

    def gpio_changed(self, idx, active):
        raise NotImplementedError()


