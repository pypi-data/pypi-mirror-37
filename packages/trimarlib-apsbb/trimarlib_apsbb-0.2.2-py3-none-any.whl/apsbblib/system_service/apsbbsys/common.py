#
# Generated by erpcgen 1.6.0 on Tue Aug 28 09:07:55 2018.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc

# Enumerators data types declarations
class LightMode:
    eLightOff = 0
    eLightOn = 1
    eLightPulsing = 2

class BarrierPosition:
    eBarPosOpen = 1
    eBarPosClosed = 2
    eBarPosUnknown = 0
    eBarPosError = 3

class BarrierAction:
    eBarActIdle = 0
    eBarActOpening = 1
    eBarActWaiting = 5
    eBarActClosing = 2
    eBarActAutoStopped = 6

class VehiclePosition:
    eVehicleNone = 0
    eVehicleA = 1
    eVehicleB = 2
    eVehicleAB = 3

class TrackerResult:
    ePassthroughOK = 1
    ePassthroughWrongWay = 2
    ePassthroughRetreated = 3

class CoinChangerStatus:
    eCoinChangerOffline = 255
    eCoinChangerIdle = 0
    eCoinChangerEscrowRequest = 1
    eCoinChangerPayoutBusy = 2
    eCoinChangerNoCredit = 3
    eCoinChangerDefectiveTubeSensor = 4
    eCoinChangerDoubleArrival = 5
    eCoinChangerAcceptorUnplugged = 6
    eCoinChangerTubeJam = 7
    eCoinChangerROMChecksumError = 8
    eCoinChangerRoutingError = 9
    eCoinChangerBusy = 10
    eCoinChangerJustReset = 11
    eCoinChangerJam = 12
    eCoinChangerPossibleCreditedCoinRemoval = 13

class PinDirection:
    ePinInput = 0
    ePinOutput = 1


# Structures data types declarations
class Colour(object):
    def __init__(self, r=None, g=None, b=None):
        self.r = r # uint8
        self.g = g # uint8
        self.b = b # uint8

    def _read(self, codec):
        self.r = codec.read_uint8()
        self.g = codec.read_uint8()
        self.b = codec.read_uint8()
        return self

    def _write(self, codec):
        if self.r is None:
            raise ValueError("r is None")
        codec.write_uint8(self.r)
        if self.g is None:
            raise ValueError("g is None")
        codec.write_uint8(self.g)
        if self.b is None:
            raise ValueError("b is None")
        codec.write_uint8(self.b)

    def __str__(self):
        return "<%s@%x r=%s g=%s b=%s>" % (self.__class__.__name__, id(self), self.r, self.g, self.b)

    def __repr__(self):
        return self.__str__()
        
class Timings(object):
    def __init__(self, onTime=None, offTime=None, stepTime=None):
        self.onTime = onTime # uint16
        self.offTime = offTime # uint16
        self.stepTime = stepTime # uint8

    def _read(self, codec):
        self.onTime = codec.read_uint16()
        self.offTime = codec.read_uint16()
        self.stepTime = codec.read_uint8()
        return self

    def _write(self, codec):
        if self.onTime is None:
            raise ValueError("onTime is None")
        codec.write_uint16(self.onTime)
        if self.offTime is None:
            raise ValueError("offTime is None")
        codec.write_uint16(self.offTime)
        if self.stepTime is None:
            raise ValueError("stepTime is None")
        codec.write_uint8(self.stepTime)

    def __str__(self):
        return "<%s@%x onTime=%s offTime=%s stepTime=%s>" % (self.__class__.__name__, id(self), self.onTime, self.offTime, self.stepTime)

    def __repr__(self):
        return self.__str__()
        
class Coefficients(object):
    def __init__(self, A=None, B=None):
        self.A = A # float
        self.B = B # float

    def _read(self, codec):
        self.A = codec.read_float()
        self.B = codec.read_float()
        return self

    def _write(self, codec):
        if self.A is None:
            raise ValueError("A is None")
        codec.write_float(self.A)
        if self.B is None:
            raise ValueError("B is None")
        codec.write_float(self.B)

    def __str__(self):
        return "<%s@%x A=%s B=%s>" % (self.__class__.__name__, id(self), self.A, self.B)

    def __repr__(self):
        return self.__str__()
        
class PathStatus(object):
    def __init__(self, vehicle_position=None, loopA_timeout=None, loopB_timeout=None, barrier_timeout=None, barrier_position=None, barrier_action=None, tracker_result=None):
        self.vehicle_position = vehicle_position # VehiclePosition
        self.loopA_timeout = loopA_timeout # bool
        self.loopB_timeout = loopB_timeout # bool
        self.barrier_timeout = barrier_timeout # bool
        self.barrier_position = barrier_position # BarrierPosition
        self.barrier_action = barrier_action # BarrierAction
        self.tracker_result = tracker_result # TrackerResult

    def _read(self, codec):
        self.vehicle_position = codec.read_uint32()
        self.loopA_timeout = codec.read_bool()
        self.loopB_timeout = codec.read_bool()
        self.barrier_timeout = codec.read_bool()
        self.barrier_position = codec.read_uint32()
        self.barrier_action = codec.read_uint32()
        self.tracker_result = codec.read_uint32()
        return self

    def _write(self, codec):
        if self.vehicle_position is None:
            raise ValueError("vehicle_position is None")
        codec.write_uint32(self.vehicle_position)
        if self.loopA_timeout is None:
            raise ValueError("loopA_timeout is None")
        codec.write_bool(self.loopA_timeout)
        if self.loopB_timeout is None:
            raise ValueError("loopB_timeout is None")
        codec.write_bool(self.loopB_timeout)
        if self.barrier_timeout is None:
            raise ValueError("barrier_timeout is None")
        codec.write_bool(self.barrier_timeout)
        if self.barrier_position is None:
            raise ValueError("barrier_position is None")
        codec.write_uint32(self.barrier_position)
        if self.barrier_action is None:
            raise ValueError("barrier_action is None")
        codec.write_uint32(self.barrier_action)
        if self.tracker_result is None:
            raise ValueError("tracker_result is None")
        codec.write_uint32(self.tracker_result)

    def __str__(self):
        return "<%s@%x vehicle_position=%s loopA_timeout=%s loopB_timeout=%s barrier_timeout=%s barrier_position=%s barrier_action=%s tracker_result=%s>" % (self.__class__.__name__, id(self), self.vehicle_position, self.loopA_timeout, self.loopB_timeout, self.barrier_timeout, self.barrier_position, self.barrier_action, self.tracker_result)

    def __repr__(self):
        return self.__str__()
        
class CoinChangerSetupData(object):
    def __init__(self, feature_level=None, currency_code=None, scaling_factor=None, decimal_places=None, coin_routing=None, coin_credit=None):
        self.feature_level = feature_level # uint8
        self.currency_code = currency_code # uint16
        self.scaling_factor = scaling_factor # uint8
        self.decimal_places = decimal_places # uint8
        self.coin_routing = coin_routing # uint16
        self.coin_credit = coin_credit # uint8[16]


    def _read(self, codec):
        self.feature_level = codec.read_uint8()
        self.currency_code = codec.read_uint16()
        self.scaling_factor = codec.read_uint8()
        self.decimal_places = codec.read_uint8()
        self.coin_routing = codec.read_uint16()
        self.coin_credit = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            self.coin_credit.append(_v0)

        return self

    def _write(self, codec):
        if self.feature_level is None:
            raise ValueError("feature_level is None")
        codec.write_uint8(self.feature_level)
        if self.currency_code is None:
            raise ValueError("currency_code is None")
        codec.write_uint16(self.currency_code)
        if self.scaling_factor is None:
            raise ValueError("scaling_factor is None")
        codec.write_uint8(self.scaling_factor)
        if self.decimal_places is None:
            raise ValueError("decimal_places is None")
        codec.write_uint8(self.decimal_places)
        if self.coin_routing is None:
            raise ValueError("coin_routing is None")
        codec.write_uint16(self.coin_routing)
        if self.coin_credit is None:
            raise ValueError("coin_credit is None")
        for _i0 in self.coin_credit:
            codec.write_uint8(_i0)


    def __str__(self):
        return "<%s@%x feature_level=%s currency_code=%s scaling_factor=%s decimal_places=%s coin_routing=%s coin_credit=%s>" % (self.__class__.__name__, id(self), self.feature_level, self.currency_code, self.scaling_factor, self.decimal_places, self.coin_routing, self.coin_credit)

    def __repr__(self):
        return self.__str__()
        
class CoinChangerExpansionData(object):
    def __init__(self, manufacturer_code=None, serial_no=None, model_no=None, software_ver=None, optional_features=None):
        self.manufacturer_code = manufacturer_code # uint8[4]

        self.serial_no = serial_no # uint8[13]

        self.model_no = model_no # uint8[13]

        self.software_ver = software_ver # uint8[2]

        self.optional_features = optional_features # uint32

    def _read(self, codec):
        self.manufacturer_code = []
        for _i0 in range(4):
            _v0 = codec.read_uint8()
            self.manufacturer_code.append(_v0)

        self.serial_no = []
        for _i0 in range(13):
            _v0 = codec.read_uint8()
            self.serial_no.append(_v0)

        self.model_no = []
        for _i0 in range(13):
            _v0 = codec.read_uint8()
            self.model_no.append(_v0)

        self.software_ver = []
        for _i0 in range(2):
            _v0 = codec.read_uint8()
            self.software_ver.append(_v0)

        self.optional_features = codec.read_uint32()
        return self

    def _write(self, codec):
        if self.manufacturer_code is None:
            raise ValueError("manufacturer_code is None")
        for _i0 in self.manufacturer_code:
            codec.write_uint8(_i0)

        if self.serial_no is None:
            raise ValueError("serial_no is None")
        for _i0 in self.serial_no:
            codec.write_uint8(_i0)

        if self.model_no is None:
            raise ValueError("model_no is None")
        for _i0 in self.model_no:
            codec.write_uint8(_i0)

        if self.software_ver is None:
            raise ValueError("software_ver is None")
        for _i0 in self.software_ver:
            codec.write_uint8(_i0)

        if self.optional_features is None:
            raise ValueError("optional_features is None")
        codec.write_uint32(self.optional_features)

    def __str__(self):
        return "<%s@%x manufacturer_code=%s serial_no=%s model_no=%s software_ver=%s optional_features=%s>" % (self.__class__.__name__, id(self), self.manufacturer_code, self.serial_no, self.model_no, self.software_ver, self.optional_features)

    def __repr__(self):
        return self.__str__()
        

