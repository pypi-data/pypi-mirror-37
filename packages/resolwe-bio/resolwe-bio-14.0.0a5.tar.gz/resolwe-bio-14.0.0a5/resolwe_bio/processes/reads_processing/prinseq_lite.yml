# =============================================
# Processors for reads procesing - Prinseq-lite
# =============================================
#
# Processors for NGS reads filtering/trimming
---

- slug: prinseq-lite-single
  name: PRINSEQ (single-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/legacy:1.0.0
  data_name: '{{ reads.fastq.0.file|default("?") }}'
  version: 1.1.3
  type: data:reads:fastq:single:prinseq
  category: Trim
  flow_collection: sample
  persistence: CACHED
  description: >
    PReprocessing and INformation of SEQuence data (PRINSEQ) is a
    pre-processing tool that can be used to filter, reformat, and/or trim
    genomic and metagenomic sequence data. It generates summary statistics
    of sequences in graphical and tabular format. More information can be
    found [here](http://prinseq.sourceforge.net/).
  input:
    - name: reads
      label: Reads
      type: data:reads:fastq:single
    - name: trimming
      label: Trimming options
      group:
      - name: left_trim
        label: Trim bases from 5'-end
        type: basic:integer
        default: 0
      - name: right_trim
        label: Trim bases from 3'-end
        type: basic:integer
        default: 0
      - name: trim_qual_left
        label: Threshold score from 5'-end trimming (Phred value)
        type: basic:integer
        default: 5
      - name: trim_qual_right
        label: Threshold score from 3'-end trimming (Phred value)
        type: basic:integer
        default: 5
    - name: filtering
      label: Filtering options
      group:
      - name: min_len
        label: Filter sequences shorter than
        type: basic:integer
        default: 30
      - name: max_len
        label: Filter sequences longer than
        type: basic:integer
        default: 100000
      - name: min_qual_mean
        label: Threshold mean sequence quality score
        type: basic:integer
        default: 10
      - name: min_qual_score
        label: Threshold single base quality score
        type: basic:integer
        default: 5
  output:
    - name: fastq
      label: Reads file
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      echo "Reads processing"
      NAME=`basename {{ reads.fastq.0.file }} .fastq.gz`
      re-progress 0.1

      READS=()
      {% for r in reads.fastq %}
        READS+=({{ r.file }})
      {% endfor %}

      cat "${READS[@]}" > "${NAME}.fastq.gz"
      gzip -c -d "${NAME}.fastq.gz" > prinseq_input.fastq

      prinseq-lite.pl -fastq prinseq_input.fastq -out_good out_good -out_bad out_bad -trim_left {{trimming.left_trim}} -trim_right {{trimming.right_trim}} -trim_qual_left {{trimming.trim_qual_left}} -trim_qual_right {{trimming.trim_qual_right}} -max_len {{filtering.max_len}} -min_len {{filtering.min_len}} -min_qual_score {{filtering.min_qual_score}} -min_qual_mean {{filtering.min_qual_mean}} > /dev/null
      re-checkrc "Failed while processing with PRINSEQ."
      re-progress 0.6

      gzip -c -n out_good.fastq > "${NAME}.fastq.gz"
      re-save-file-list fastq "${NAME}.fastq.gz"
      re-progress 0.8

      echo "Postprocessing FastQC..."
      # http://www.bioinformatics.babraham.ac.uk/projects/fastqc/
      mkdir "fastqc" && fastqc "${NAME}.fastq.gz" --extract --outdir="fastqc" >&2
      re-checkrc "Failed while processing with FastQC."
      re-progress 0.9

      FASTQC_URL="{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]}"

      mv "fastqc/${NAME}_fastqc.zip" .
      re-progress 0.95

      re-save-file-list fastqc_archive "${NAME}_fastqc.zip"
      re-save-list fastqc_url "${FASTQC_URL}"

- slug: prinseq-lite-paired
  name: PRINSEQ (paired-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/legacy:1.0.0
  data_name: '{{ reads.fastq.0.file|default("?") }}'
  version: 1.1.3
  type: data:reads:fastq:paired:prinseq
  category: Trim
  flow_collection: sample
  persistence: CACHED
  description: >
    PReprocessing and INformation of SEQuence data (PRINSEQ) is a
    pre-processing tool that can be used to filter, reformat, and/or trim
    genomic and metagenomic sequence data. It generates summary statistics
    of sequences in graphical and tabular format. More information can be
    found [here](http://prinseq.sourceforge.net/).
  input:
    - name: reads
      label: Reads
      type: data:reads:fastq:paired
    - name: trimming
      label: Trimming options
      group:
      - name: left_trim
        label: Trim bases from 5'-end
        type: basic:integer
        default: 0
      - name: right_trim
        label: Trim bases from 3'-end
        type: basic:integer
        default: 0
      - name: trim_qual_left
        label: Threshold score from 5'-end trimming (Phred value)
        type: basic:integer
        default: 5
      - name: trim_qual_right
        label: Threshold score from 3'-end trimming (Phred value)
        type: basic:integer
        default: 5
    - name: filtering
      label: Filtering options
      group:
      - name: min_len
        label: Filter sequences shorter than
        type: basic:integer
        default: 30
      - name: max_len
        label: Filter sequences longer than
        type: basic:integer
        default: 100000
      - name: min_qual_mean
        label: Threshold mean sequence quality score
        type: basic:integer
        default: 10
      - name: min_qual_score
        label: Threshold single base quality score
        type: basic:integer
        default: 5
  output:
    - name: fastq
      label: Reads file (mate 1)
      type: list:basic:file
    - name: fastq2
      label: Reads file (mate 2)
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC (Upstream)
      type: list:basic:file:html
    - name: fastqc_url2
      label: Quality control with FastQC (Downstream)
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive (Upstream)
      type: list:basic:file
    - name: fastqc_archive2
      label: Download FastQC archive (Downstream)
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      echo "Reads processing"

      NAME1=`basename {{ reads.fastq.0.file }} .fastq.gz`
      NAME2=`basename {{ reads.fastq2.0.file }} .fastq.gz`

      FW_READS=()
      {% for r in reads.fastq %}
        FW_READS+=({{ r.file }})
      {% endfor %}

      cat "${FW_READS[@]}" > "${NAME1}.fastq.gz"
      gzip -c -d "${NAME1}.fastq.gz" > prinseq_input_mate_1.fastq

      RW_READS=()
      {% for r in reads.fastq2 %}
        RW_READS+=({{ r.file }})
      {% endfor %}

      cat "${RW_READS[@]}" > "${NAME2}.fastq.gz"
      gzip -c -d "${NAME2}.fastq.gz" > prinseq_input_mate_2.fastq

      ## sort paired-end data
      paste - - - - < "prinseq_input_mate_1.fastq" | sort -k1,1 -t " " | tr "\t" "\n" > prinseq_input_mate_1_sorted.fastq
      paste - - - - < "prinseq_input_mate_2.fastq" | sort -k1,1 -t " " | tr "\t" "\n" > prinseq_input_mate_2_sorted.fastq
      re-progress 0.4

      prinseq-lite.pl -fastq prinseq_input_mate_1_sorted.fastq -fastq2 prinseq_input_mate_2_sorted.fastq -out_good out_good -out_bad out_bad -trim_left {{trimming.left_trim}} -trim_right {{trimming.right_trim}} -trim_qual_left {{trimming.trim_qual_left}} -trim_qual_right {{trimming.trim_qual_right}} -max_len {{filtering.max_len}} -min_len {{filtering.min_len}} -min_qual_score {{filtering.min_qual_score}} -min_qual_mean {{filtering.min_qual_mean}} > /dev/null
      re-checkrc "Failed while processing with PRINSEQ."
      re-progress 0.7

      gzip -c -n out_good_1.fastq > "${NAME1}.fastq.gz"
      gzip -c -n out_good_2.fastq > "${NAME2}.fastq.gz"
      re-save-file-list fastq "${NAME1}.fastq.gz"
      re-save-file-list fastq2 "${NAME2}.fastq.gz"
      re-progress 0.8

      echo "Postprocessing FastQC..."
      # http://www.bioinformatics.babraham.ac.uk/projects/fastqc/
      mkdir "fastqc" && fastqc "${NAME1}.fastq.gz" "${NAME2}.fastq.gz" --extract --outdir="fastqc" >&2
      re-checkrc "Failed while processing with FastQC."
      re-progress 0.9

      FASTQC_URL="{\"file\":\"fastqc/${NAME1}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME1}_fastqc\"]}"
      FASTQC_URL2="{\"file\":\"fastqc/${NAME2}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME2}_fastqc\"]}"
      mv "fastqc/${NAME1}_fastqc.zip" .
      mv "fastqc/${NAME2}_fastqc.zip" .

      re-save-file-list fastqc_archive "${NAME1}_fastqc.zip"
      re-save-file-list fastqc_archive2 "${NAME2}_fastqc.zip"
      re-save-list fastqc_url "${FASTQC_URL}"
      re-save-list fastqc_url2 "${FASTQC_URL2}"
