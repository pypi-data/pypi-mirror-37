# ====================
# SortMeRNA processors
# ====================
#
# Processors for NGS reads filtering/trimming
---

- slug: sortmerna-single
  name: SortMeRNA 2.0 (single-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/legacy:1.0.0
  data_name: '{{ reads.fastq.0.file|default("?") }}'
  version: 1.1.3
  type: data:reads:fastq:single:sortmerna
  category: Other
  flow_collection: sample
  persistence: CACHED
  description: >
    SortMeRNA is a biological sequence analysis tool for filtering, mapping and OTU-picking NGS reads. The main application of SortMeRNA is filtering rRNA from metatranscriptomic data. Additional applications include OTU-picking and taxonomy assignation available through QIIME v1.9+
  input:
    - name: reads
      label: Reads
      type: data:reads:fastq:single
    - name: database_selection
      label: rRNA database(s) (fasta)
      type: list:data:seq:nucleotide
      description: >
        There are eight rRNA representative databases included with SortMeRNA. All databases were derived from the SILVA SSU and LSU databases (release 119) and the RFAM databases using HMMER 3.1b1 and SumaClust v1.0.00.
    - name: options
      label: Options
      group:
      - name: sam
        label: Output alignments in sam format
        type: basic:boolean
        required: false
        default: false
      - name: threads
        label: Use this many processor threads
        type: basic:integer
        default: 2
        description: >
          Number of processor threads to use
  output:
    - name: fastq
      label: Filtered sequences (w/o rRNA)
      type: list:basic:file
    - name: fastq_rRNA
      label: rRNA sequences
      type: basic:file
    - name: fastq_rRNA_sam
      label: rRNA sequences (sam)
      type: basic:file
      required: false
    - name: stats
      label: Filter statistics
      type: basic:file
    - name: fastqc_url
      label: Quality control with FastQC
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      NAME=`basename {{reads.fastq.0.file}} .fastq.gz`

      READS=()
      {% for r in reads.fastq %}
        READS+=({{ r.file }})
      {% endfor %}

      cat "${READS[@]}" > reads.fastq.gz
      gzip -d reads.fastq.gz

      {% for d in database_selection %}
        DB_NAME=`basename {{d.fasta.file}} .fasta.gz`
        gzip -cd {{d.fasta.file}} > ${DB_NAME}.fasta
        rRNAdb=$rRNAdb"${DB_NAME}.fasta,${DB_NAME}-db:"
      {% endfor %}

      rRNAdb=${rRNAdb%?}
      re-progress 0.05

      echo "Index rRNA databases"
      indexdb_rna --ref "${rRNAdb}" -v
      re-checkrc "Failed while indexing rRNA database."
      re-progress 0.1

      echo "RUN SortMeRNA"
      sortmerna --reads reads.fastq --ref ${rRNAdb} --aligned "${NAME}_rRNA" --other "${NAME}_filtered" --fastx -v --log -a {{ options.threads }} {% if options.sam %} --sam {% endif %}
      re-checkrc "Failed while processing with SortMeRNA."
      re-progress 0.9

      gzip "${NAME}_rRNA.fastq"
      mv "${NAME}_rRNA.log" stats.log

      echo "Postprocessing FastQC..."
      # http://www.bioinformatics.babraham.ac.uk/projects/fastqc/
      mkdir "fastqc" && fastqc "${NAME}_filtered.fastq" --extract --outdir="fastqc" >&2
      re-checkrc "Failed while processing with FastQC."
      re-progress 0.9

      mv "fastqc/${NAME}_filtered_fastqc.zip" .
      FASTQC_URL="{\"file\":\"fastqc/${NAME}_filtered_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_filtered_fastqc\"]}"

      gzip "${NAME}_filtered.fastq"

      re-progress 0.95

      {% if options.sam %}
        re-save-file fastq_rRNA_sam "${NAME}_rRNA.sam"
      {% endif %}

      re-save-file-list fastq "${NAME}_filtered.fastq.gz"
      re-save-file fastq_rRNA "${NAME}_rRNA.fastq.gz"
      re-save-file stats stats.log
      re-save-file-list fastqc_archive "${NAME}_filtered_fastqc.zip"
      re-save-list fastqc_url "${FASTQC_URL}"


- slug: sortmerna-paired
  version: 1.1.3
  name: SortMeRNA 2.0 (paired-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/legacy:1.0.0
  data_name: '{{ reads.fastq.0.file|default("?") }}'
  type: data:reads:fastq:paired:sortmerna
  category: Other
  flow_collection: sample
  persistence: CACHED
  description: >
    SortMeRNA is a biological sequence analysis tool for filtering, mapping and OTU-picking NGS reads. The main application of SortMeRNA is filtering rRNA from metatranscriptomic data. Additional applications include OTU-picking and taxonomy assignation available through QIIME v1.9+
  input:
    - name: reads
      label: Reads
      type: data:reads:fastq:paired
    - name: database_selection
      label: rRNA database(s) (fasta)
      type: list:data:seq:nucleotide
      description: >
        There are eight rRNA representative databases included with SortMeRNA. All databases were derived from the SILVA SSU and LSU databases (release 119) and the RFAM databases using HMMER 3.1b1 and SumaClust v1.0.00.
    - name: options
      label: Options
      group:
      - name: sort_paired_end
        label: Data sorting
        type: basic:string
        description: >
          When writing aligned and non-aligned reads to FASTA/Q files, sometimes the situation arises where one of the paired-end reads aligns and the other one doesn't. Since SortMeRNA looks at each read individually, by default the reads will be split into two separate files. That is, the read that aligned will go into the --aligned FASTA/Q file and the pair that didn't align will go into the --other FASTA/Q file. --paired-in will put both reads into the file specified by --aligned (rRNA reads). --paired-out will put both reads into the file specified by --other (non-rRNA reads).
        default: --paired_in
        choices:
          - label: paired_in
            value: --paired_in
          - label: paired_out
            value: --paired_out
      - name: sam
        label: Output alignments in sam format
        type: basic:boolean
        required: false
        default: false
      - name: threads
        label: Use this many processor threads
        type: basic:integer
        default: 2
        description: >
          Number of processor threads to use
  output:
    - name: fastq
      label: Filtered sequences (w/o rRNA) (mate 1)
      type: list:basic:file
    - name: fastq2
      label: Filtered sequences (w/o rRNA) (mate 2)
      type: list:basic:file
    - name: fastq_rRNA
      label: rRNA sequences
      type: basic:file
    - name: fastq_rRNA_sam
      label: rRNA sequences (sam)
      type: basic:file
      required: false
    - name: stats
      label: Filter statistics
      type: basic:file
    - name: fastqc_url
      label: Quality control with FastQC (Upstream)
      type: list:basic:file:html
    - name: fastqc_url2
      label: Quality control with FastQC (Downstream)
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive (Upstream)
      type: list:basic:file
    - name: fastqc_archive2
      label: Download FastQC archive (Downstream)
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      NAME1=`basename {{reads.fastq.0.file}} .fastq.gz`
      NAME2=`basename {{reads.fastq2.0.file}} .fastq.gz`

      FW_READS=()
      {% for r in reads.fastq %}
        FW_READS+=({{ r.file }})
      {% endfor %}

      cat "${FW_READS[@]}" > reads_fw.fastq.gz
      gzip -d reads_fw.fastq.gz

      RW_READS=()
      {% for r in reads.fastq2 %}
        RW_READS+=({{ r.file }})
      {% endfor %}

      cat ${RW_READS} > reads_rw.fastq.gz
      gzip -d reads_rw.fastq.gz

      {% for d in database_selection %}
        DB_NAME=`basename {{d.fasta.file}} .fasta.gz`
        gzip -cd {{d.fasta.file}} > "${DB_NAME}.fasta"
        rRNAdb=$rRNAdb"${DB_NAME}.fasta,${DB_NAME}-db:"
      {% endfor %}

      rRNAdb=${rRNAdb%?}
      re-progress 0.05

      echo "Index rRNA databases"
      indexdb_rna --ref ${rRNAdb} -v
      re-checkrc "Failed while indexing rRNA database."
      re-progress 0.1

      echo "Merge paired-end sequencing files"
      merge-paired-reads.sh reads_fw.fastq reads_rw.fastq reads_interlieved.fastq
      re-checkrc "Error while merging paired-end sequencing files"
      re-progress 0.4

      echo "RUN SortMeRNA"
      sortmerna --reads reads_interlieved.fastq --ref ${rRNAdb} --aligned "${NAME1}_rRNA" --other "${NAME1}_wo_rRNA_interlieved" --fastx -v --log -a {{ options.threads }} {% if options.sam %} --sam {% endif %} {{ options.sort_paired_end}}
      re-checkrc "Failed while processing with SortMeRNA."
      re-progress 0.8

      echo "Unmerge interlieved sequencing file that contains no rRNA-derived reads"
      unmerge-paired-reads.sh "${NAME1}_wo_rRNA_interlieved.fastq" "${NAME1}_filtered.fastq" "${NAME2}_filtered.fastq"
      re-checkrc "Error while unmerging interlieved sequencing file"
      re-progress 0.9

      gzip "${NAME1}_rRNA.fastq"
      mv "${NAME1}_rRNA.log" stats.log

      echo "Postprocessing FastQC..."
      # http://www.bioinformatics.babraham.ac.uk/projects/fastqc/
      mkdir "fastqc" && fastqc "${NAME1}_filtered.fastq" "${NAME2}_filtered.fastq" --extract --outdir="fastqc" >&2
      re-checkrc "Failed while processing with FastQC."
      re-progress 0.9

      gzip "${NAME1}_filtered.fastq"
      gzip "${NAME2}_filtered.fastq"

      FASTQC_URL="{\"file\":\"fastqc/${NAME1}_filtered_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME1}_filtered_fastqc\"]}"
      FASTQC_URL2="{\"file\":\"fastqc/${NAME2}_filtered_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME2}_filtered_fastqc\"]}"
      mv "fastqc/${NAME1}_filtered_fastqc.zip" .
      mv "fastqc/${NAME2}_filtered_fastqc.zip" .

      {% if options.sam %}
        re-save-file fastq_rRNA_sam "${NAME1}_rRNA.sam"
      {% endif %}

      re-save-file-list fastq "${NAME1}_filtered.fastq.gz"
      re-save-file-list fastq2 "${NAME2}_filtered.fastq.gz"
      re-save-file fastq_rRNA "${NAME1}_rRNA.fastq.gz"
      re-save-file stats stats.log
      re-save-file-list fastqc_archive "${NAME1}_filtered_fastqc.zip"
      re-save-file-list fastqc_archive2 "${NAME2}_filtered_fastqc.zip"
      re-save-list fastqc_url "${FASTQC_URL}"
      re-save-list fastqc_url2 "${FASTQC_URL2}"
