# ==========================================
# Processors for reads procesing - Fastq-mcf
# ==========================================
#
# Processors for NGS reads filtering/trimming
---

- slug: fastq-mcf-single
  name: Fastq-mcf (single-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/legacy:1.0.0
  data_name: '{{ reads.fastq.0.file|default("?") }}'
  version: 1.1.3
  type: data:reads:fastq:single:fastqmcf
  category: Trim
  flow_collection: sample
  persistence: CACHED
  description: >
    Fastq-mcf detects and removes sequencing adapters and primers from FASTQ
    files, detects limited skewing at the ends of reads and clip, detects poor
    quality at the ends of reads and clip, detect Ns and remove from ends,
    removes reads with CASAVA 'Y' flag (purity filtering), discards sequences
    that are too short, and keeps multiple mate-reads in sync.  See
    [here](https://github.com/ExpressionAnalysis/ea-utils/blob/wiki/FastqMcf.md)
    for more information.
  input:
    - name: reads
      label: NGS reads
      type: data:reads:fastq:single
    - name: adapters
      label: Adapter sequences (FASTA)
      type: data:seq:nucleotide
      required: false
    - name: f_parameters
      label: Filtering parameters
      group:
      - name: adapter_min_len_match
        label: Adapter minimum-length match
        type: basic:decimal
        default: 2.2
        description: >
          Log scale for adapter minimum-length match.
      - name: occurance_threshold
        label: Occurance threshold before adapter clipping
        type: basic:decimal
        default: 0.25
        description: >
          % occurance threshold before adapter clipping.
      - name: min_clip_length
        label: Minimum clip length
        type: basic:integer
        default: 1
        description: >
          Minimum clip length, overrides scaled auto.
      - name: max_adap_diff_perc
        label: Maximum adapter difference percentage
        type: basic:integer
        default: 10
        description: >
          Maximum adapter difference percentage.
      - name: min_seq_len
        label: Minimum sequence length
        type: basic:integer
        default: 19
        description: >
          Minimum remaining sequence length
      - name: quality_threshold
        label: Quality threshold causing base removal
        type: basic:integer
        default: 10
        description: >
          Quality threshold causing base removal.
  output:
    - name: fastq
      label: Reads file
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      echo "Removing adapters and filtering data..."

      {% if adapters %}

        echo "Preparing adapter file..."
        ADAPTERS=`basename {{adapters.fasta.file}} .fasta.gz`
        gzip -cd {{ adapters.fasta.file }} > "${ADAPTERS}.fasta"
        re-progress 0.1

      {% endif %}

      NAME=`basename {{reads.fastq.0.file}} .fastq.gz`

      READS=()
      {% for r in reads.fastq %}
        READS+=({{ r.file }})
      {% endfor %}

      cat "${READS[@]}" > "${NAME}.fastq.gz"
      gzip -c -d "${NAME}.fastq.gz" > "${NAME}.fastq"
      re-progress 0.2

      echo "Adapter trimming..."

      fastq-mcf {% if adapters %} -s {{ f_parameters.adapter_min_len_match }} -t {{ f_parameters.occurance_threshold }} -m {{ f_parameters.min_clip_length }} -p {{ f_parameters.max_adap_diff_perc }} -l {{ f_parameters.min_seq_len }} -q {{ f_parameters.quality_threshold }} "${ADAPTERS}.fasta" {{ reads.fastq.file }} -o "${NAME}_filtered.fastq" {% else %} -s {{ f_parameters.adapter_min_len_match }} -t {{ f_parameters.occurance_threshold }} -m {{ f_parameters.min_clip_length }} -p {{ f_parameters.max_adap_diff_perc }} -l {{ f_parameters.min_seq_len }} -q {{ f_parameters.quality_threshold }} n/a "${NAME}.fastq.gz" -o "${NAME}_filtered.fastq" {% endif %}
      re-checkrc "Failed while processing with FastqMcf."
      re-progress 0.7

      echo "Postprocessing FastQC..."
      # http://www.bioinformatics.babraham.ac.uk/projects/fastqc/
      mkdir "fastqc" && fastqc "${NAME}_filtered.fastq" --extract --outdir="fastqc" >&2
      re-checkrc "Failed while processing with FastQC."
      re-progress 0.9

      mv "fastqc/${NAME}_filtered_fastqc" "fastqc/${NAME}_fastqc"
      mv "fastqc/${NAME}_filtered_fastqc.zip" "${NAME}_fastqc.zip"

      FASTQC_URL="{\"file\":\"fastqc/${NAME}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME}_fastqc\"]}"

      re-progress 0.95

      gzip -c "${NAME}_filtered.fastq" > "${NAME}.fastq.gz"
      re-save-file-list fastq "${NAME}.fastq.gz"

      re-save-file-list fastqc_archive "${NAME}_fastqc.zip"
      re-save-list fastqc_url "${FASTQC_URL}"

- slug: fastq-mcf-paired
  name: Fastq-mcf (paired-end)
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/legacy:1.0.0
  data_name: '{{ reads.fastq.0.file|default("?") }}'
  version: 1.1.3
  type: data:reads:fastq:paired:fastqmcf
  category: Trim
  flow_collection: sample
  persistence: CACHED
  description: >
    Fastq-mcf detects and removes sequencing adapters and primers from FASTQ
    files, detects limited skewing at the ends of reads and clip, detects poor
    quality at the ends of reads and clip, detect Ns and remove from ends,
    removes reads with CASAVA 'Y' flag (purity filtering), discards sequences
    that are too short, and keeps multiple mate-reads in sync.  See
    [here](https://github.com/ExpressionAnalysis/ea-utils/blob/wiki/FastqMcf.md)
    for more information.
  input:
    - name: reads
      label: NGS reads
      type: data:reads:fastq:paired
    - name: adapters
      label: Adapter sequences (FASTA)
      type: data:seq:nucleotide
      required: false
    - name: f_parameters
      label: Filtering parameters
      group:
      - name: adapter_min_len_match
        label: Adapter minimum-length match
        type: basic:decimal
        default: 2.2
        description: >
          Log scale for adapter minimum-length match.
      - name: occurance_threshold
        label: Occurance threshold before adapter clipping
        type: basic:decimal
        default: 0.25
        description: >
          % occurance threshold before adapter clipping.
      - name: min_clip_length
        label: Minimum clip length
        type: basic:integer
        default: 1
        description: >
          Minimum clip length, overrides scaled auto.
      - name: max_adap_diff_perc
        label: Maximum adapter difference percentage
        type: basic:integer
        default: 10
        description: >
          Maximum adapter difference percentage.
      - name: min_seq_len
        label: Minimum sequence length
        type: basic:integer
        default: 19
        description: >
          Minimum remaining sequence length
      - name: quality_threshold
        label: Quality threshold causing base removal
        type: basic:integer
        default: 10
        description: >
          Quality threshold causing base removal.
  output:
    - name: fastq
      label: Reads file (mate 1)
      type: list:basic:file
    - name: fastq2
      label: Reads file (mate 2)
      type: list:basic:file
    - name: fastqc_url
      label: Quality control with FastQC (Upstream)
      type: list:basic:file:html
    - name: fastqc_url2
      label: Quality control with FastQC (Downstream)
      type: list:basic:file:html
    - name: fastqc_archive
      label: Download FastQC archive (Upstream)
      type: list:basic:file
    - name: fastqc_archive2
      label: Download FastQC archive (Downstream)
      type: list:basic:file
  run:
    runtime: polyglot
    language: bash
    program: |
      echo "Removing adapters and filtering data..."

      {% if adapters %}

        echo "Preparing adapter file..."
        ADAPTERS=`basename {{adapters.fasta.file}} .fasta.gz`
        gzip -cd {{ adapters.fasta.file }} > "${ADAPTERS}.fasta"
        re-progress 0.1

      {% endif %}

      NAME1=`basename {{reads.fastq.0.file}} .fastq.gz`
      NAME2=`basename {{reads.fastq2.0.file}} .fastq.gz`

      FW_READS=()
      {% for r in reads.fastq %}
        FW_READS+=({{ r.file }})
      {% endfor %}

      cat "${FW_READS[@]}" > "${NAME1}.fastq.gz"

      RW_READS=()
      {% for r in reads.fastq2 %}
        RW_READS+=({{ r.file }})
      {% endfor %}

      cat "${RW_READS}" > "${NAME2}.fastq.gz"

      re-progress 0.2

      fastq-mcf {% if adapters %} -s {{ f_parameters.adapter_min_len_match }} -t {{ f_parameters.occurance_threshold }} -m {{ f_parameters.min_clip_length }} -p {{ f_parameters.max_adap_diff_perc }} -l {{ f_parameters.min_seq_len }} -q {{ f_parameters.quality_threshold }} "${ADAPTERS}.fasta" {{ reads.fastq.file }} {{ reads.fastq2.file }} -o "${NAME1}_filtered.fastq"  -o "${NAME2}_filtered.fastq"  {% else %} -s {{ f_parameters.adapter_min_len_match }} -t {{ f_parameters.occurance_threshold }} -m {{ f_parameters.min_clip_length }} -p {{ f_parameters.max_adap_diff_perc }} -l {{ f_parameters.min_seq_len }} -q {{ f_parameters.quality_threshold }} n/a "${NAME1}.fastq.gz" "${NAME2}.fastq.gz" -o "${NAME1}_filtered.fastq"  -o "${NAME2}_filtered.fastq"  {% endif %}
      re-checkrc "Failed while processing with FastqMcf."
      re-progress 0.7

      echo "Postprocessing FastQC..."
      # http://www.bioinformatics.babraham.ac.uk/projects/fastqc/
      mkdir "fastqc" && fastqc "${NAME1}_filtered.fastq" "${NAME2}_filtered.fastq" --extract --outdir="fastqc" >&2
      re-checkrc "Failed while processing with FastQC."
      re-progress 0.9

      mv "fastqc/${NAME1}_filtered_fastqc" "fastqc/${NAME1}_fastqc"
      mv "fastqc/${NAME2}_filtered_fastqc" "fastqc/${NAME2}_fastqc"
      mv "fastqc/${NAME1}_filtered_fastqc.zip" "${NAME1}_fastqc.zip"
      mv "fastqc/${NAME2}_filtered_fastqc.zip" "${NAME2}_fastqc.zip"

      FASTQC_URL="{\"file\":\"fastqc/${NAME1}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME1}_fastqc\"]}"
      FASTQC_URL2="{\"file\":\"fastqc/${NAME2}_fastqc/fastqc_report.html\",\"refs\":[\"fastqc/${NAME2}_fastqc\"]}"

      gzip -c "${NAME1}_filtered.fastq" > "${NAME1}.fastq.gz"
      gzip -c "${NAME2}_filtered.fastq" > "${NAME2}.fastq.gz"
      re-save-file-list fastq "${NAME1}.fastq.gz"
      re-save-file-list fastq2 "${NAME2}.fastq.gz"

      re-save-file-list fastqc_archive "${NAME1}_fastqc.zip"
      re-save-file-list fastqc_archive2 "${NAME2}_fastqc.zip"
      re-save-list fastqc_url "${FASTQC_URL}"
      re-save-list fastqc_url2 "${FASTQC_URL2}"
