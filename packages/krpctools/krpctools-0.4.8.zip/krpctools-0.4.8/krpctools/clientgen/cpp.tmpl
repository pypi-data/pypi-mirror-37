#pragma once
{% macro args(parameters) %}
std::vector<std::string> _args;
{% for x in parameters %}
_args.push_back(encoder::encode({{x.name}}));
{% endfor %}
{% endmacro %}
{% macro call(service, procedure, has_return, has_args, is_static=False) %}
{% if has_return %}std::string _data = {% endif %}{% if is_static %}_client.{% else %}this->_client->{% endif %}invoke("{{service}}", "{{procedure}}"{% if has_args %}, _args{% endif %});
{% endmacro %}
{% macro return(type, set_client, is_static=False) %}
{{type}} _result;
decoder::decode(_result, _data, {% if is_static %}&_client{% else %}this->_client{% endif %});
return _result;
{% endmacro %}
{% macro stream(service, procedure, type, has_args, is_static=False) %}
return ::krpc::Stream<{{ type }}>({% if is_static %}&_client{% else %}this->_client{% endif %}, {% if is_static %}_client.{% else %}this->_client->{% endif %}build_call("{{service}}", "{{procedure}}"{% if has_args %}, _args{% endif %}));
{% endmacro %}
{% macro procedure_call(service, procedure, type, has_args, is_static=False) %}
return {% if is_static %}_client.{% else %}this->_client->{% endif %}build_call("{{service}}", "{{procedure}}"{% if has_args %}, _args{% endif %});
{% endmacro %}
{% macro sig_parameters(parameters) %}
{% for x in parameters %}{{x.type}} {{x.name}}{% if not loop.last %}, {% endif %}{% endfor %}
{% endmacro %}
{% macro impl_parameters(parameters) %}
{% for x in parameters %}{{x.type}} {{x.name}}{% if 'default_value' in x %} = {{x.default_value}}{%- endif %}{% if not loop.last %}, {% endif %}{% endfor %}
{% endmacro %}

#include <map>
#include <set>
#include <string>
#include <tuple>
#include <vector>

#include <krpc/decoder.hpp>
#include <krpc/encoder.hpp>
#include <krpc/error.hpp>
#include <krpc/event.hpp>
#include <krpc/object.hpp>
#include <krpc/service.hpp>
#include <krpc/stream.hpp>

namespace krpc {
namespace services {

class {{ service_name }} : public Service {
 public:
  explicit {{ service_name }}(Client* client);
  {% if classes | length > 0 %}

  // Class forward declarations
  {% for class_name in classes.keys() %}
  class {{ class_name }};
  {% endfor %}
  {% endif %}
  {% if exceptions | length > 0 %}
  {% for exception_name,exception in exceptions.items() %}

{% if exception.documentation %}{{ exception.documentation | indent(width=2) }}
{% endif %}
  class {{ exception_name }} : public ::krpc::RPCError {
   public:
    inline explicit {{ exception_name }}(const std::string& msg) : ::krpc::RPCError(msg) {}
  };
  {% endfor %}
  {% endif %}
  {% for enum_name,enm in enumerations.items() %}

{% if enm.documentation %}{{ enm.documentation | indent(width=2) }}
{% endif %}
  enum struct {{ enum_name }} {
    {% for value in enm['values'] %}
{% if value.documentation %}{{ value.documentation | indent(width=4) }}
{% endif %}
    {{ value.name }} = {{ value.value }}{% if not loop.last %},{% endif %}

    {% endfor %}
  };
  {% endfor %}
  {% for procedure_name,procedure in procedures.items() %}

{% if procedure.documentation %}{{ procedure.documentation | indent(width=2) }}
{% endif %}
  {{ procedure.return_type }} {{ procedure_name }}({{ sig_parameters(procedure.parameters) }});
  {% endfor %}
  {% for property_name,property in properties.items() %}

{% if property.documentation %}{{ property.documentation | indent(width=2) }}
{% endif %}
  {{ property.return_type }} {{ property_name }}({{ sig_parameters(property.parameters) }});
  {% endfor %}
  {% for procedure_name,procedure in procedures.items() %}
  {% if procedure.return_type != 'void' %}

  ::krpc::Stream<{{ procedure.return_type }}> {{ procedure_name }}_stream({{ sig_parameters(procedure.parameters) }});
  {% endif %}
  {% endfor %}
  {% for property_name,property in properties.items() %}
  {% if property.return_type != 'void' %}

  ::krpc::Stream<{{ property.return_type }}> {{ property_name }}_stream({{ sig_parameters(property.parameters) }});
  {% endif %}
  {% endfor %}
  {% for procedure_name,procedure in procedures.items() %}

  ::krpc::schema::ProcedureCall {{ procedure_name }}_call({{ sig_parameters(procedure.parameters) }});
  {% endfor %}
  {% for property_name,property in properties.items() %}

  ::krpc::schema::ProcedureCall {{ property_name }}_call({{ sig_parameters(property.parameters) }});
  {% endfor %}
  {% for class_name,cls in classes.items() %}

{% if cls.documentation %}{{ cls.documentation | indent(width=2) }}
{% endif %}
  class {{ class_name }} : public krpc::Object<{{ class_name }}> {
   public:
    explicit {{ class_name }}(Client* client = nullptr, uint64_t id = 0);
    {% for method_name,method in cls.methods.items() %}

{% if method.documentation %}{{ method.documentation | indent(width=4) }}
{% endif %}
    {{ method.return_type }} {{ method_name }}({{ sig_parameters(method.parameters) }});
    {% endfor %}
    {% for method_name,method in cls.static_methods.items() %}

{% if method.documentation %}{{ method.documentation | indent(width=4) }}
{% endif %}
    static {{ method.return_type }} {{ method_name }}({{ sig_parameters([{'type': 'Client&', 'name': 'client'}] + method.parameters) }});
    {% endfor %}
    {% for property_name,property in cls.properties.items() %}

{% if property.documentation %}{{ property.documentation | indent(width=4) }}
{% endif %}
    {{ property.return_type }} {{ property_name }}({{ sig_parameters(property.parameters) }});
    {% endfor %}
    {% for method_name,method in cls.methods.items() %}
    {% if method.return_type != 'void' %}

    ::krpc::Stream<{{ method.return_type }}> {{ method_name }}_stream({{ sig_parameters(method.parameters) }});
    {% endif %}
    {% endfor %}
    {% for method_name,method in cls.static_methods.items() %}
    {% if method.return_type != 'void' %}

    static ::krpc::Stream<{{ method.return_type }}> {{ method_name }}_stream({{ sig_parameters([{'type': 'Client&', 'name': 'client'}] + method.parameters) }});
    {% endif %}
    {% endfor %}
    {% for property_name,property in cls.properties.items() %}
    {% if property.return_type != 'void' %}

    ::krpc::Stream<{{ property.return_type }}> {{ property_name }}_stream({{ sig_parameters(property.parameters) }});
    {% endif %}
    {% endfor %}
    {% for method_name,method in cls.methods.items() %}

    ::krpc::schema::ProcedureCall {{ method_name }}_call({{ sig_parameters(method.parameters) }});
    {% endfor %}
    {% for method_name,method in cls.static_methods.items() %}

    static ::krpc::schema::ProcedureCall {{ method_name }}_call({{ sig_parameters([{'type': 'Client&', 'name': 'client'}] + method.parameters) }});
    {% endfor %}
    {% for property_name,property in cls.properties.items() %}

    ::krpc::schema::ProcedureCall {{ property_name }}_call({{ sig_parameters(property.parameters) }});
    {% endfor %}
  };
  {% endfor %}
};

}  // namespace services
{% if enumerations | length > 0 %}

namespace encoder {
  {% for enum_name,values in enumerations.items() %}

  inline std::string encode(const services::{{ service_name }}::{{ enum_name }}& value) {
    return krpc::encoder::encode(static_cast<int32_t>(value));
  }
  {% endfor %}

}  // namespace encoder

namespace decoder {
  {% for enum_name,values in enumerations.items() %}

  inline void decode(services::{{ service_name }}::{{ enum_name }}& value, const std::string& data, Client* client) {
    int32_t x;
    decode(x, data, client);
    value = static_cast<services::{{ service_name }}::{{ enum_name }}>(x);
  }
  {% endfor %}

}  // namespace decoder
{% endif %}

namespace services {

inline {{ service_name }}::{{ service_name }}(Client* client):
  Service(client) {
  {% for exception_name in exceptions.keys() %}
  client->add_exception_thrower(
    "{{ service_name }}", "{{ exception_name }}",
    [] (const std::string& msg) { throw {{ exception_name }}(msg); });
  {% endfor %}
}
{% for procedure_name,procedure in procedures.items()|list + properties.items()|list %}

inline {{ procedure.return_type }} {{ service_name }}::{{ procedure_name }}({{ impl_parameters(procedure.parameters) }}) {
{% if procedure.parameters | length > 0 %}{{ args(procedure.parameters) | indent(width=2) }}
{% endif %}
{{ call(service_name, procedure.remote_name, procedure.return_type != 'void', procedure.parameters | length > 0) | indent(width=2) }}
{% if procedure.return_type != 'void' %}{{ return(procedure.return_type, procedure.return_set_client) | indent(width=2) }}
{% endif %}
}
{% endfor %}
{% for procedure_name,procedure in procedures.items()|list + properties.items()|list %}
{% if procedure.return_type != 'void' %}

inline ::krpc::Stream<{{ procedure.return_type }}> {{ service_name }}::{{ procedure_name }}_stream({{ impl_parameters(procedure.parameters) }}) {
{% if procedure.parameters | length > 0 %}{{ args(procedure.parameters) | indent(width=2) }}
{% endif %}
{{ stream(service_name, procedure.remote_name, procedure.return_type, procedure.parameters | length > 0) | indent(width=2) }}
}
{% endif %}
{% endfor %}
{% for procedure_name,procedure in procedures.items()|list + properties.items()|list %}

inline ::krpc::schema::ProcedureCall {{ service_name }}::{{ procedure_name }}_call({{ impl_parameters(procedure.parameters) }}) {
{% if procedure.parameters | length > 0 %}{{ args(procedure.parameters) | indent(width=2) }}
{% endif %}
{{ procedure_call(service_name, procedure.remote_name, procedure.return_type, procedure.parameters | length > 0) | indent(width=2) }}
}
{% endfor %}
{% for class_name,cls in classes.items() %}

inline {{ service_name }}::{{ class_name }}::{{ class_name }}(Client* client, uint64_t id):
  Object(client, "{{ service_name }}::{{ class_name }}", id) {}
{% for method_name,method in cls.methods.items()|list + cls.properties.items()|list %}

inline {{ method.return_type }} {{ service_name }}::{{ class_name }}::{{ method_name }}({{ impl_parameters(method.parameters) }}) {
{{ args([{'name': '*this'}] + method.parameters) | indent(width=2) }}
{{ call(service_name, method.remote_name, method.return_type != 'void', True) | indent(width=2) }}
{% if method.return_type != 'void' %}{{ return(method.return_type, method.return_set_client) | indent(width=2) }}
{% endif %}
}
{% endfor %}
{% for method_name,method in cls.static_methods.items() %}

inline {{ method.return_type }} {{ service_name }}::{{ class_name }}::{{ method_name }}({{ impl_parameters([{'type': 'Client&', 'name': '_client'}] + method.parameters) }}) {
{% if method.parameters | length > 0 %}  {{ args(method.parameters) | indent(width=2) }}
{% endif %}
{{ call(service_name, method.remote_name, method.return_type != 'void', method.parameters | length > 0, True) | indent(width=2) }}
{% if method.return_type != 'void' %}  {{ return(method.return_type, method.return_set_client, True) | indent(width=2) }}
{% endif %}
}
{% endfor %}
{% for method_name,method in cls.methods.items()|list + cls.properties.items()|list %}
{% if method.return_type != 'void' %}

inline ::krpc::Stream<{{ method.return_type }}> {{ service_name }}::{{ class_name }}::{{ method_name }}_stream({{ impl_parameters(method.parameters) }}) {
{{ args([{'name': '*this'}] + method.parameters) | indent(width=2) }}
{{ stream(service_name, method.remote_name, method.return_type, True) | indent(width=2) }}
}
{% endif %}
{% endfor %}
{% for method_name,method in cls.static_methods.items() %}
{% if method.return_type != 'void' %}

inline ::krpc::Stream<{{ method.return_type }}> {{ service_name }}::{{ class_name }}::{{ method_name }}_stream({{ impl_parameters([{'type': 'Client&', 'name': '_client'}] + method.parameters) }}) {
{% if method.parameters | length > 0 %}{{ args(method.parameters) | indent(width=2) }}
{% endif %}
{{ stream(service_name, method.remote_name, method.return_type, method.parameters | length > 0, True) | indent(width=2) }}
}
{% endif %}
{% endfor %}
{% for method_name,method in cls.methods.items()|list + cls.properties.items()|list %}

inline ::krpc::schema::ProcedureCall {{ service_name }}::{{ class_name }}::{{ method_name }}_call({{ impl_parameters(method.parameters) }}) {
{{ args([{'name': '*this'}] + method.parameters) | indent(width=2) }}
{{ procedure_call(service_name, method.remote_name, method.return_type, True) | indent(width=2) }}
}
{% endfor %}
{% for method_name,method in cls.static_methods.items() %}

inline ::krpc::schema::ProcedureCall {{ service_name }}::{{ class_name }}::{{ method_name }}_call({{ impl_parameters([{'type': 'Client&', 'name': '_client'}] + method.parameters) }}) {
{% if method.parameters | length > 0 %}{{ args(method.parameters) | indent(width=2) }}
{% endif %}
{{ procedure_call(service_name, method.remote_name, method.return_type, method.parameters | length > 0, True) | indent(width=2) }}
}
{% endfor %}
{% endfor %}
}  // namespace services

}  // namespace krpc
