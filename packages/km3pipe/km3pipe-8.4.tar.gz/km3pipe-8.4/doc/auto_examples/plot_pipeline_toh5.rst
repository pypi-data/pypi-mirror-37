

.. _sphx_glr_auto_examples_plot_pipeline_toh5.py:


======================
ToHDF5 Pipeline example
======================




.. code-block:: python


    # Authors: Moritz Lotze <mlotze@km3net.de>
    # License: BSD-3
    # Date: 2018-07-12
    # Status: Under construction...

    from __future__ import absolute_import, print_function, division

    import tables as tb

    from km3pipe import Pipeline
    from km3pipe.io import EvtPump, HDF5Sink

    from km3modules.common import StatusBar







Preparation
-----------
Let's define the inputs / outputs first -- those would be coming from a CLI
parser in practice.



.. code-block:: python


    N_EVENTS = 200000
    IN_FNAME = 'data/numu_cc.evt'
    OUT_FNAME = 'data/numu_cc.h5'







Also, in this case we don't really want to dump the data onto disk, so we
create an in-memory-ony file, and pass it as the ``h5file`` arg to the
hdf5sink. to actually write out a file, just specify an outfile name
(commented out here).



.. code-block:: python


    OUTFILE = tb.open_file(
        # create the file in memory only
        OUT_FNAME,
        'w',
        driver="H5FD_CORE",
        driver_core_backing_store=0,
    )







Setting up the pipeline
-----------------------



.. code-block:: python


    pipe = Pipeline(timeit=True)
    pipe.attach(EvtPump, filename=IN_FNAME)
    pipe.attach(StatusBar, every=25)
    pipe.attach(
        HDF5Sink,
        # filename=OUT_FNAME,
        h5file=OUTFILE,
    )





.. rst-class:: sphx-glr-script-out

 Out::

    km3pipe.io.evt.EvtPump: Automatic tag parsing enabled.
    km3pipe.io.evt.EvtPump: Opening data/numu_cc.evt


Draining the pipeline
---------------------



.. code-block:: python


    pipe.drain(N_EVENTS)




.. rst-class:: sphx-glr-script-out

 Out::

    Pipeline and module initialisation took 0.003s (CPU 0.002s).
    --------------------------[ Blob      25 ]---------------------------
    --------------------------[ Blob      50 ]---------------------------
    --------------------------[ Blob      75 ]---------------------------
    --------------------------[ Blob     100 ]---------------------------
    ================================[ . ]================================
    km3pipe.io.hdf5.HDF5Sink: HDF5 file written to: dump.h5
    ============================================================
    109 cycles drained in 2.438181s (CPU 2.362151s). Memory peak: 240.95 MB
      wall  mean: 0.022155s  medi: 0.021257s  min: 0.018637s  max: 0.038642s  std: 0.003306s
      CPU   mean: 0.021483s  medi: 0.020622s  min: 0.018044s  max: 0.037610s  std: 0.003230s
    EvtPump - process: 2.263s (CPU 2.191s) - finish: 0.000s (CPU 0.000s)
      wall  mean: 0.020762s  medi: 0.019977s  min: 0.017385s  max: 0.036426s  std: 0.003180s
      CPU   mean: 0.020102s  medi: 0.019266s  min: 0.016794s  max: 0.035398s  std: 0.003109s
    StatusBar - process: 0.000s (CPU 0.000s) - finish: 0.000s (CPU 0.000s)
      wall  mean: 0.000027s  medi: 0.000026s  min: 0.000026s  max: 0.000029s  std: 0.000001s
      CPU   mean: 0.000027s  medi: 0.000027s  min: 0.000026s  max: 0.000029s  std: 0.000001s
    HDF5Sink - process: 0.127s (CPU 0.126s) - finish: 0.016s (CPU 0.015s)
      wall  mean: 0.001162s  medi: 0.001061s  min: 0.001026s  max: 0.003803s  std: 0.000335s
      CPU   mean: 0.001156s  medi: 0.001062s  min: 0.001028s  max: 0.003718s  std: 0.000326s


**Total running time of the script:** ( 0 minutes  2.441 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_pipeline_toh5.py <plot_pipeline_toh5.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_pipeline_toh5.ipynb <plot_pipeline_toh5.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
