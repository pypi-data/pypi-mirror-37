# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'job_type': 'str',
        'status': 'str',
        'key': 'str',
        'dt_expire': 'str',
        'dt_created': 'str',
        'error': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'job_type': 'job_type',
        'status': 'status',
        'key': 'key',
        'dt_expire': 'dt_expire',
        'dt_created': 'dt_created',
        'error': 'error'
    }

    def __init__(self, client_id=None, job_type=None, status=None, key=None, dt_expire=None, dt_created=None, error=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._job_type = None
        self._status = None
        self._key = None
        self._dt_expire = None
        self._dt_created = None
        self._error = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if job_type is not None:
            self.job_type = job_type
        if status is not None:
            self.status = status
        if key is not None:
            self.key = key
        if dt_expire is not None:
            self.dt_expire = dt_expire
        if dt_created is not None:
            self.dt_created = dt_created
        if error is not None:
            self.error = error

    @property
    def client_id(self):
        """Gets the client_id of this Job.  # noqa: E501


        :return: The client_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Job.


        :param client_id: The client_id of this Job.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def job_type(self):
        """Gets the job_type of this Job.  # noqa: E501


        :return: The job_type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this Job.


        :param job_type: The job_type of this Job.  # noqa: E501
        :type: str
        """

        self._job_type = job_type

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501


        :return: The status of this Job.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def key(self):
        """Gets the key of this Job.  # noqa: E501


        :return: The key of this Job.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Job.


        :param key: The key of this Job.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def dt_expire(self):
        """Gets the dt_expire of this Job.  # noqa: E501


        :return: The dt_expire of this Job.  # noqa: E501
        :rtype: str
        """
        return self._dt_expire

    @dt_expire.setter
    def dt_expire(self, dt_expire):
        """Sets the dt_expire of this Job.


        :param dt_expire: The dt_expire of this Job.  # noqa: E501
        :type: str
        """

        self._dt_expire = dt_expire

    @property
    def dt_created(self):
        """Gets the dt_created of this Job.  # noqa: E501


        :return: The dt_created of this Job.  # noqa: E501
        :rtype: str
        """
        return self._dt_created

    @dt_created.setter
    def dt_created(self, dt_created):
        """Sets the dt_created of this Job.


        :param dt_created: The dt_created of this Job.  # noqa: E501
        :type: str
        """

        self._dt_created = dt_created

    @property
    def error(self):
        """Gets the error of this Job.  # noqa: E501


        :return: The error of this Job.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Job.


        :param error: The error of this Job.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
