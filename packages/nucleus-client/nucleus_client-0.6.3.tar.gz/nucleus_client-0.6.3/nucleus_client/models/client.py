# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_client.models.client_refresh_schedule import ClientRefreshSchedule  # noqa: F401,E501
from nucleus_client.models.integration import Integration  # noqa: F401,E501


class Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'code': 'str',
        'amity_key': 'str',
        'null_default_value': 'str',
        'status': 'str',
        'integrations': 'list[Integration]',
        'schedule': 'ClientRefreshSchedule',
        'client_ids': 'list[str]',
        'nav_page_ids': 'list[str]',
        'dt_u': 'str',
        'field_metadata': 'object',
        'colors': 'object',
        'dataset_metadata': 'object',
        'spark_conf': 'object'
    }

    attribute_map = {
        'id': '_id',
        'name': 'name',
        'code': 'code',
        'amity_key': 'amity_key',
        'null_default_value': 'null_default_value',
        'status': 'status',
        'integrations': 'integrations',
        'schedule': 'schedule',
        'client_ids': 'client_ids',
        'nav_page_ids': 'nav_page_ids',
        'dt_u': 'dt_u',
        'field_metadata': 'field_metadata',
        'colors': 'colors',
        'dataset_metadata': 'dataset_metadata',
        'spark_conf': 'spark_conf'
    }

    def __init__(self, id=None, name=None, code=None, amity_key=None, null_default_value=None, status=None, integrations=None, schedule=None, client_ids=None, nav_page_ids=None, dt_u=None, field_metadata=None, colors=None, dataset_metadata=None, spark_conf=None):  # noqa: E501
        """Client - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._code = None
        self._amity_key = None
        self._null_default_value = None
        self._status = None
        self._integrations = None
        self._schedule = None
        self._client_ids = None
        self._nav_page_ids = None
        self._dt_u = None
        self._field_metadata = None
        self._colors = None
        self._dataset_metadata = None
        self._spark_conf = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if code is not None:
            self.code = code
        if amity_key is not None:
            self.amity_key = amity_key
        if null_default_value is not None:
            self.null_default_value = null_default_value
        if status is not None:
            self.status = status
        if integrations is not None:
            self.integrations = integrations
        if schedule is not None:
            self.schedule = schedule
        if client_ids is not None:
            self.client_ids = client_ids
        if nav_page_ids is not None:
            self.nav_page_ids = nav_page_ids
        if dt_u is not None:
            self.dt_u = dt_u
        if field_metadata is not None:
            self.field_metadata = field_metadata
        if colors is not None:
            self.colors = colors
        if dataset_metadata is not None:
            self.dataset_metadata = dataset_metadata
        if spark_conf is not None:
            self.spark_conf = spark_conf

    @property
    def id(self):
        """Gets the id of this Client.  # noqa: E501


        :return: The id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Client.


        :param id: The id of this Client.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Client.  # noqa: E501

        Long name for the client.  # noqa: E501

        :return: The name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Client.

        Long name for the client.  # noqa: E501

        :param name: The name of this Client.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this Client.  # noqa: E501

        Short name of the client.  # noqa: E501

        :return: The code of this Client.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Client.

        Short name of the client.  # noqa: E501

        :param code: The code of this Client.  # noqa: E501
        :type: str
        """
        if code is not None and not re.search('^[A-Za-z0-9]{1,30}$', code, flags=re.IGNORECASE):  # noqa: E501
            raise ValueError("Invalid value for `code`, must be a follow pattern or equal to `/^[A-Za-z0-9]{1,30}$/i`")  # noqa: E501

        self._code = code

    @property
    def amity_key(self):
        """Gets the amity_key of this Client.  # noqa: E501

        Amity ID of the client.  # noqa: E501

        :return: The amity_key of this Client.  # noqa: E501
        :rtype: str
        """
        return self._amity_key

    @amity_key.setter
    def amity_key(self, amity_key):
        """Sets the amity_key of this Client.

        Amity ID of the client.  # noqa: E501

        :param amity_key: The amity_key of this Client.  # noqa: E501
        :type: str
        """

        self._amity_key = amity_key

    @property
    def null_default_value(self):
        """Gets the null_default_value of this Client.  # noqa: E501

        Client-side null replacement value for client.  # noqa: E501

        :return: The null_default_value of this Client.  # noqa: E501
        :rtype: str
        """
        return self._null_default_value

    @null_default_value.setter
    def null_default_value(self, null_default_value):
        """Sets the null_default_value of this Client.

        Client-side null replacement value for client.  # noqa: E501

        :param null_default_value: The null_default_value of this Client.  # noqa: E501
        :type: str
        """

        self._null_default_value = null_default_value

    @property
    def status(self):
        """Gets the status of this Client.  # noqa: E501

        Status of the client.  # noqa: E501

        :return: The status of this Client.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Client.

        Status of the client.  # noqa: E501

        :param status: The status of this Client.  # noqa: E501
        :type: str
        """
        allowed_values = ["new", "active", "suspended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def integrations(self):
        """Gets the integrations of this Client.  # noqa: E501

        A list of integrations the client consumes.  # noqa: E501

        :return: The integrations of this Client.  # noqa: E501
        :rtype: list[Integration]
        """
        return self._integrations

    @integrations.setter
    def integrations(self, integrations):
        """Sets the integrations of this Client.

        A list of integrations the client consumes.  # noqa: E501

        :param integrations: The integrations of this Client.  # noqa: E501
        :type: list[Integration]
        """

        self._integrations = integrations

    @property
    def schedule(self):
        """Gets the schedule of this Client.  # noqa: E501


        :return: The schedule of this Client.  # noqa: E501
        :rtype: ClientRefreshSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Client.


        :param schedule: The schedule of this Client.  # noqa: E501
        :type: ClientRefreshSchedule
        """

        self._schedule = schedule

    @property
    def client_ids(self):
        """Gets the client_ids of this Client.  # noqa: E501

        A list of ids of parent clients.  # noqa: E501

        :return: The client_ids of this Client.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_ids

    @client_ids.setter
    def client_ids(self, client_ids):
        """Sets the client_ids of this Client.

        A list of ids of parent clients.  # noqa: E501

        :param client_ids: The client_ids of this Client.  # noqa: E501
        :type: list[str]
        """

        self._client_ids = client_ids

    @property
    def nav_page_ids(self):
        """Gets the nav_page_ids of this Client.  # noqa: E501

        A list of page ids to show in the navigation  # noqa: E501

        :return: The nav_page_ids of this Client.  # noqa: E501
        :rtype: list[str]
        """
        return self._nav_page_ids

    @nav_page_ids.setter
    def nav_page_ids(self, nav_page_ids):
        """Sets the nav_page_ids of this Client.

        A list of page ids to show in the navigation  # noqa: E501

        :param nav_page_ids: The nav_page_ids of this Client.  # noqa: E501
        :type: list[str]
        """

        self._nav_page_ids = nav_page_ids

    @property
    def dt_u(self):
        """Gets the dt_u of this Client.  # noqa: E501


        :return: The dt_u of this Client.  # noqa: E501
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this Client.


        :param dt_u: The dt_u of this Client.  # noqa: E501
        :type: str
        """

        self._dt_u = dt_u

    @property
    def field_metadata(self):
        """Gets the field_metadata of this Client.  # noqa: E501


        :return: The field_metadata of this Client.  # noqa: E501
        :rtype: object
        """
        return self._field_metadata

    @field_metadata.setter
    def field_metadata(self, field_metadata):
        """Sets the field_metadata of this Client.


        :param field_metadata: The field_metadata of this Client.  # noqa: E501
        :type: object
        """

        self._field_metadata = field_metadata

    @property
    def colors(self):
        """Gets the colors of this Client.  # noqa: E501


        :return: The colors of this Client.  # noqa: E501
        :rtype: object
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this Client.


        :param colors: The colors of this Client.  # noqa: E501
        :type: object
        """

        self._colors = colors

    @property
    def dataset_metadata(self):
        """Gets the dataset_metadata of this Client.  # noqa: E501


        :return: The dataset_metadata of this Client.  # noqa: E501
        :rtype: object
        """
        return self._dataset_metadata

    @dataset_metadata.setter
    def dataset_metadata(self, dataset_metadata):
        """Sets the dataset_metadata of this Client.


        :param dataset_metadata: The dataset_metadata of this Client.  # noqa: E501
        :type: object
        """

        self._dataset_metadata = dataset_metadata

    @property
    def spark_conf(self):
        """Gets the spark_conf of this Client.  # noqa: E501


        :return: The spark_conf of this Client.  # noqa: E501
        :rtype: object
        """
        return self._spark_conf

    @spark_conf.setter
    def spark_conf(self, spark_conf):
        """Sets the spark_conf of this Client.


        :param spark_conf: The spark_conf of this Client.  # noqa: E501
        :type: object
        """

        self._spark_conf = spark_conf

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
