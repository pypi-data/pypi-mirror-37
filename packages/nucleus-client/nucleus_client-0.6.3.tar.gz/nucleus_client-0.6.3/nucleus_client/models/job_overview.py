# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'running_jobs': 'str',
        'pending_jobs': 'str',
        'successful_jobs': 'str',
        'failed_jobs': 'str',
        'dt_created': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'running_jobs': 'running_jobs',
        'pending_jobs': 'pending_jobs',
        'successful_jobs': 'successful_jobs',
        'failed_jobs': 'failed_jobs',
        'dt_created': 'dt_created'
    }

    def __init__(self, client_id=None, running_jobs=None, pending_jobs=None, successful_jobs=None, failed_jobs=None, dt_created=None):  # noqa: E501
        """JobOverview - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._running_jobs = None
        self._pending_jobs = None
        self._successful_jobs = None
        self._failed_jobs = None
        self._dt_created = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if running_jobs is not None:
            self.running_jobs = running_jobs
        if pending_jobs is not None:
            self.pending_jobs = pending_jobs
        if successful_jobs is not None:
            self.successful_jobs = successful_jobs
        if failed_jobs is not None:
            self.failed_jobs = failed_jobs
        if dt_created is not None:
            self.dt_created = dt_created

    @property
    def client_id(self):
        """Gets the client_id of this JobOverview.  # noqa: E501


        :return: The client_id of this JobOverview.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this JobOverview.


        :param client_id: The client_id of this JobOverview.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def running_jobs(self):
        """Gets the running_jobs of this JobOverview.  # noqa: E501


        :return: The running_jobs of this JobOverview.  # noqa: E501
        :rtype: str
        """
        return self._running_jobs

    @running_jobs.setter
    def running_jobs(self, running_jobs):
        """Sets the running_jobs of this JobOverview.


        :param running_jobs: The running_jobs of this JobOverview.  # noqa: E501
        :type: str
        """

        self._running_jobs = running_jobs

    @property
    def pending_jobs(self):
        """Gets the pending_jobs of this JobOverview.  # noqa: E501


        :return: The pending_jobs of this JobOverview.  # noqa: E501
        :rtype: str
        """
        return self._pending_jobs

    @pending_jobs.setter
    def pending_jobs(self, pending_jobs):
        """Sets the pending_jobs of this JobOverview.


        :param pending_jobs: The pending_jobs of this JobOverview.  # noqa: E501
        :type: str
        """

        self._pending_jobs = pending_jobs

    @property
    def successful_jobs(self):
        """Gets the successful_jobs of this JobOverview.  # noqa: E501


        :return: The successful_jobs of this JobOverview.  # noqa: E501
        :rtype: str
        """
        return self._successful_jobs

    @successful_jobs.setter
    def successful_jobs(self, successful_jobs):
        """Sets the successful_jobs of this JobOverview.


        :param successful_jobs: The successful_jobs of this JobOverview.  # noqa: E501
        :type: str
        """

        self._successful_jobs = successful_jobs

    @property
    def failed_jobs(self):
        """Gets the failed_jobs of this JobOverview.  # noqa: E501


        :return: The failed_jobs of this JobOverview.  # noqa: E501
        :rtype: str
        """
        return self._failed_jobs

    @failed_jobs.setter
    def failed_jobs(self, failed_jobs):
        """Sets the failed_jobs of this JobOverview.


        :param failed_jobs: The failed_jobs of this JobOverview.  # noqa: E501
        :type: str
        """

        self._failed_jobs = failed_jobs

    @property
    def dt_created(self):
        """Gets the dt_created of this JobOverview.  # noqa: E501


        :return: The dt_created of this JobOverview.  # noqa: E501
        :rtype: str
        """
        return self._dt_created

    @dt_created.setter
    def dt_created(self, dt_created):
        """Sets the dt_created of this JobOverview.


        :param dt_created: The dt_created of this JobOverview.  # noqa: E501
        :type: str
        """

        self._dt_created = dt_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
