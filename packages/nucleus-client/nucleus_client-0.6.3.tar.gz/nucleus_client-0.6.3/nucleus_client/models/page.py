# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_client.models.block import Block  # noqa: F401,E501
from nucleus_client.models.nav_settings import NavSettings  # noqa: F401,E501
from nucleus_client.models.page_view import PageView  # noqa: F401,E501
from nucleus_client.models.widget import Widget  # noqa: F401,E501


class Page(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_id': 'str',
        'user_id': 'str',
        'title': 'str',
        'slug': 'str',
        'blocks': 'dict(str, Block)',
        'block_order': 'list[str]',
        'nav_settings': 'NavSettings',
        'views': 'dict(str, PageView)',
        'widgets': 'dict(str, Widget)',
        'dt_u': 'str'
    }

    attribute_map = {
        'id': '_id',
        'client_id': 'client_id',
        'user_id': 'user_id',
        'title': 'title',
        'slug': 'slug',
        'blocks': 'blocks',
        'block_order': 'block_order',
        'nav_settings': 'nav_settings',
        'views': 'views',
        'widgets': 'widgets',
        'dt_u': 'dt_u'
    }

    def __init__(self, id=None, client_id=None, user_id=None, title=None, slug=None, blocks=None, block_order=None, nav_settings=None, views=None, widgets=None, dt_u=None):  # noqa: E501
        """Page - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._user_id = None
        self._title = None
        self._slug = None
        self._blocks = None
        self._block_order = None
        self._nav_settings = None
        self._views = None
        self._widgets = None
        self._dt_u = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if user_id is not None:
            self.user_id = user_id
        if title is not None:
            self.title = title
        if slug is not None:
            self.slug = slug
        if blocks is not None:
            self.blocks = blocks
        if block_order is not None:
            self.block_order = block_order
        if nav_settings is not None:
            self.nav_settings = nav_settings
        if views is not None:
            self.views = views
        if widgets is not None:
            self.widgets = widgets
        if dt_u is not None:
            self.dt_u = dt_u

    @property
    def id(self):
        """Gets the id of this Page.  # noqa: E501


        :return: The id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Page.


        :param id: The id of this Page.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this Page.  # noqa: E501


        :return: The client_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Page.


        :param client_id: The client_id of this Page.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def user_id(self):
        """Gets the user_id of this Page.  # noqa: E501


        :return: The user_id of this Page.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Page.


        :param user_id: The user_id of this Page.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def title(self):
        """Gets the title of this Page.  # noqa: E501


        :return: The title of this Page.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Page.


        :param title: The title of this Page.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def slug(self):
        """Gets the slug of this Page.  # noqa: E501


        :return: The slug of this Page.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Page.


        :param slug: The slug of this Page.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def blocks(self):
        """Gets the blocks of this Page.  # noqa: E501


        :return: The blocks of this Page.  # noqa: E501
        :rtype: dict(str, Block)
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this Page.


        :param blocks: The blocks of this Page.  # noqa: E501
        :type: dict(str, Block)
        """

        self._blocks = blocks

    @property
    def block_order(self):
        """Gets the block_order of this Page.  # noqa: E501


        :return: The block_order of this Page.  # noqa: E501
        :rtype: list[str]
        """
        return self._block_order

    @block_order.setter
    def block_order(self, block_order):
        """Sets the block_order of this Page.


        :param block_order: The block_order of this Page.  # noqa: E501
        :type: list[str]
        """

        self._block_order = block_order

    @property
    def nav_settings(self):
        """Gets the nav_settings of this Page.  # noqa: E501


        :return: The nav_settings of this Page.  # noqa: E501
        :rtype: NavSettings
        """
        return self._nav_settings

    @nav_settings.setter
    def nav_settings(self, nav_settings):
        """Sets the nav_settings of this Page.


        :param nav_settings: The nav_settings of this Page.  # noqa: E501
        :type: NavSettings
        """

        self._nav_settings = nav_settings

    @property
    def views(self):
        """Gets the views of this Page.  # noqa: E501


        :return: The views of this Page.  # noqa: E501
        :rtype: dict(str, PageView)
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this Page.


        :param views: The views of this Page.  # noqa: E501
        :type: dict(str, PageView)
        """

        self._views = views

    @property
    def widgets(self):
        """Gets the widgets of this Page.  # noqa: E501


        :return: The widgets of this Page.  # noqa: E501
        :rtype: dict(str, Widget)
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this Page.


        :param widgets: The widgets of this Page.  # noqa: E501
        :type: dict(str, Widget)
        """

        self._widgets = widgets

    @property
    def dt_u(self):
        """Gets the dt_u of this Page.  # noqa: E501


        :return: The dt_u of this Page.  # noqa: E501
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this Page.


        :param dt_u: The dt_u of this Page.  # noqa: E501
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Page):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
