# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_client.models.entity_batch_post_data import EntityBatchPostData  # noqa: F401,E501


class EntityBatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'integration_id': 'str',
        'entity_type': 'str',
        'existing_integration_id': 'str',
        'dt_u': 'str',
        'record_count': 'int',
        'post_data': 'list[EntityBatchPostData]'
    }

    attribute_map = {
        'client_id': 'client_id',
        'integration_id': 'integration_id',
        'entity_type': 'entity_type',
        'existing_integration_id': 'existing_integration_id',
        'dt_u': 'dt_u',
        'record_count': 'record_count',
        'post_data': 'post_data'
    }

    def __init__(self, client_id=None, integration_id=None, entity_type=None, existing_integration_id=None, dt_u=None, record_count=None, post_data=None):  # noqa: E501
        """EntityBatch - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._integration_id = None
        self._entity_type = None
        self._existing_integration_id = None
        self._dt_u = None
        self._record_count = None
        self._post_data = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if integration_id is not None:
            self.integration_id = integration_id
        if entity_type is not None:
            self.entity_type = entity_type
        if existing_integration_id is not None:
            self.existing_integration_id = existing_integration_id
        if dt_u is not None:
            self.dt_u = dt_u
        if record_count is not None:
            self.record_count = record_count
        if post_data is not None:
            self.post_data = post_data

    @property
    def client_id(self):
        """Gets the client_id of this EntityBatch.  # noqa: E501


        :return: The client_id of this EntityBatch.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this EntityBatch.


        :param client_id: The client_id of this EntityBatch.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def integration_id(self):
        """Gets the integration_id of this EntityBatch.  # noqa: E501


        :return: The integration_id of this EntityBatch.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this EntityBatch.


        :param integration_id: The integration_id of this EntityBatch.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def entity_type(self):
        """Gets the entity_type of this EntityBatch.  # noqa: E501


        :return: The entity_type of this EntityBatch.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EntityBatch.


        :param entity_type: The entity_type of this EntityBatch.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def existing_integration_id(self):
        """Gets the existing_integration_id of this EntityBatch.  # noqa: E501


        :return: The existing_integration_id of this EntityBatch.  # noqa: E501
        :rtype: str
        """
        return self._existing_integration_id

    @existing_integration_id.setter
    def existing_integration_id(self, existing_integration_id):
        """Sets the existing_integration_id of this EntityBatch.


        :param existing_integration_id: The existing_integration_id of this EntityBatch.  # noqa: E501
        :type: str
        """

        self._existing_integration_id = existing_integration_id

    @property
    def dt_u(self):
        """Gets the dt_u of this EntityBatch.  # noqa: E501


        :return: The dt_u of this EntityBatch.  # noqa: E501
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this EntityBatch.


        :param dt_u: The dt_u of this EntityBatch.  # noqa: E501
        :type: str
        """

        self._dt_u = dt_u

    @property
    def record_count(self):
        """Gets the record_count of this EntityBatch.  # noqa: E501


        :return: The record_count of this EntityBatch.  # noqa: E501
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """Sets the record_count of this EntityBatch.


        :param record_count: The record_count of this EntityBatch.  # noqa: E501
        :type: int
        """

        self._record_count = record_count

    @property
    def post_data(self):
        """Gets the post_data of this EntityBatch.  # noqa: E501


        :return: The post_data of this EntityBatch.  # noqa: E501
        :rtype: list[EntityBatchPostData]
        """
        return self._post_data

    @post_data.setter
    def post_data(self, post_data):
        """Sets the post_data of this EntityBatch.


        :param post_data: The post_data of this EntityBatch.  # noqa: E501
        :type: list[EntityBatchPostData]
        """

        self._post_data = post_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityBatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
