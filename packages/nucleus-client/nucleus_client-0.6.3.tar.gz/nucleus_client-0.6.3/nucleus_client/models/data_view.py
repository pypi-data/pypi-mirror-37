# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_client.models.data_view_dimension import DataViewDimension  # noqa: F401,E501
from nucleus_client.models.data_view_filter import DataViewFilter  # noqa: F401,E501
from nucleus_client.models.data_view_interval import DataViewInterval  # noqa: F401,E501
from nucleus_client.models.data_view_metric import DataViewMetric  # noqa: F401,E501


class DataView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'dataset': 'str',
        'intervals': 'list[DataViewInterval]',
        'granularity': 'str',
        'filters': 'list[DataViewFilter]',
        'dimensions': 'list[DataViewDimension]',
        'metrics': 'list[DataViewMetric]'
    }

    attribute_map = {
        'client_id': 'client_id',
        'dataset': 'dataset',
        'intervals': 'intervals',
        'granularity': 'granularity',
        'filters': 'filters',
        'dimensions': 'dimensions',
        'metrics': 'metrics'
    }

    def __init__(self, client_id=None, dataset=None, intervals=None, granularity=None, filters=None, dimensions=None, metrics=None):  # noqa: E501
        """DataView - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._dataset = None
        self._intervals = None
        self._granularity = None
        self._filters = None
        self._dimensions = None
        self._metrics = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if dataset is not None:
            self.dataset = dataset
        if intervals is not None:
            self.intervals = intervals
        if granularity is not None:
            self.granularity = granularity
        if filters is not None:
            self.filters = filters
        if dimensions is not None:
            self.dimensions = dimensions
        if metrics is not None:
            self.metrics = metrics

    @property
    def client_id(self):
        """Gets the client_id of this DataView.  # noqa: E501


        :return: The client_id of this DataView.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this DataView.


        :param client_id: The client_id of this DataView.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def dataset(self):
        """Gets the dataset of this DataView.  # noqa: E501


        :return: The dataset of this DataView.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DataView.


        :param dataset: The dataset of this DataView.  # noqa: E501
        :type: str
        """

        self._dataset = dataset

    @property
    def intervals(self):
        """Gets the intervals of this DataView.  # noqa: E501


        :return: The intervals of this DataView.  # noqa: E501
        :rtype: list[DataViewInterval]
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals):
        """Sets the intervals of this DataView.


        :param intervals: The intervals of this DataView.  # noqa: E501
        :type: list[DataViewInterval]
        """

        self._intervals = intervals

    @property
    def granularity(self):
        """Gets the granularity of this DataView.  # noqa: E501


        :return: The granularity of this DataView.  # noqa: E501
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this DataView.


        :param granularity: The granularity of this DataView.  # noqa: E501
        :type: str
        """

        self._granularity = granularity

    @property
    def filters(self):
        """Gets the filters of this DataView.  # noqa: E501


        :return: The filters of this DataView.  # noqa: E501
        :rtype: list[DataViewFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DataView.


        :param filters: The filters of this DataView.  # noqa: E501
        :type: list[DataViewFilter]
        """

        self._filters = filters

    @property
    def dimensions(self):
        """Gets the dimensions of this DataView.  # noqa: E501


        :return: The dimensions of this DataView.  # noqa: E501
        :rtype: list[DataViewDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this DataView.


        :param dimensions: The dimensions of this DataView.  # noqa: E501
        :type: list[DataViewDimension]
        """

        self._dimensions = dimensions

    @property
    def metrics(self):
        """Gets the metrics of this DataView.  # noqa: E501


        :return: The metrics of this DataView.  # noqa: E501
        :rtype: list[DataViewMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this DataView.


        :param metrics: The metrics of this DataView.  # noqa: E501
        :type: list[DataViewMetric]
        """

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
