# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_client.models.integration_loader_settings import IntegrationLoaderSettings  # noqa: F401,E501
from nucleus_client.models.settings import Settings  # noqa: F401,E501


class IntegrationUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'settings': 'Settings',
        'loader_settings': 'IntegrationLoaderSettings'
    }

    attribute_map = {
        'name': 'name',
        'settings': 'settings',
        'loader_settings': 'loader_settings'
    }

    def __init__(self, name=None, settings=None, loader_settings=None):  # noqa: E501
        """IntegrationUpdate - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._settings = None
        self._loader_settings = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if settings is not None:
            self.settings = settings
        if loader_settings is not None:
            self.loader_settings = loader_settings

    @property
    def name(self):
        """Gets the name of this IntegrationUpdate.  # noqa: E501


        :return: The name of this IntegrationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntegrationUpdate.


        :param name: The name of this IntegrationUpdate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def settings(self):
        """Gets the settings of this IntegrationUpdate.  # noqa: E501


        :return: The settings of this IntegrationUpdate.  # noqa: E501
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this IntegrationUpdate.


        :param settings: The settings of this IntegrationUpdate.  # noqa: E501
        :type: Settings
        """

        self._settings = settings

    @property
    def loader_settings(self):
        """Gets the loader_settings of this IntegrationUpdate.  # noqa: E501


        :return: The loader_settings of this IntegrationUpdate.  # noqa: E501
        :rtype: IntegrationLoaderSettings
        """
        return self._loader_settings

    @loader_settings.setter
    def loader_settings(self, loader_settings):
        """Sets the loader_settings of this IntegrationUpdate.


        :param loader_settings: The loader_settings of this IntegrationUpdate.  # noqa: E501
        :type: IntegrationLoaderSettings
        """

        self._loader_settings = loader_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
