# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_client.models.entity_identity import EntityIdentity  # noqa: F401,E501


class Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_id': 'str',
        'entity_type': 'str',
        'name': 'str',
        'identities': 'list[EntityIdentity]',
        'dt_u': 'str'
    }

    attribute_map = {
        'id': '_id',
        'client_id': 'client_id',
        'entity_type': 'entity_type',
        'name': 'name',
        'identities': 'identities',
        'dt_u': 'dt_u'
    }

    def __init__(self, id=None, client_id=None, entity_type=None, name=None, identities=None, dt_u=None):  # noqa: E501
        """Entity - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._entity_type = None
        self._name = None
        self._identities = None
        self._dt_u = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if entity_type is not None:
            self.entity_type = entity_type
        if name is not None:
            self.name = name
        if identities is not None:
            self.identities = identities
        if dt_u is not None:
            self.dt_u = dt_u

    @property
    def id(self):
        """Gets the id of this Entity.  # noqa: E501


        :return: The id of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Entity.


        :param id: The id of this Entity.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this Entity.  # noqa: E501


        :return: The client_id of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Entity.


        :param client_id: The client_id of this Entity.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def entity_type(self):
        """Gets the entity_type of this Entity.  # noqa: E501


        :return: The entity_type of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Entity.


        :param entity_type: The entity_type of this Entity.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this Entity.  # noqa: E501


        :return: The name of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Entity.


        :param name: The name of this Entity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def identities(self):
        """Gets the identities of this Entity.  # noqa: E501


        :return: The identities of this Entity.  # noqa: E501
        :rtype: list[EntityIdentity]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this Entity.


        :param identities: The identities of this Entity.  # noqa: E501
        :type: list[EntityIdentity]
        """

        self._identities = identities

    @property
    def dt_u(self):
        """Gets the dt_u of this Entity.  # noqa: E501


        :return: The dt_u of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this Entity.


        :param dt_u: The dt_u of this Entity.  # noqa: E501
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
