# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_client.models.settings import Settings  # noqa: F401,E501


class Widget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'widget_type_name': 'str',
        'settings': 'Settings',
        'view_hash_key': 'str',
        'dt_u': 'str'
    }

    attribute_map = {
        'id': '_id',
        'title': 'title',
        'widget_type_name': 'widget_type_name',
        'settings': 'settings',
        'view_hash_key': 'view_hash_key',
        'dt_u': 'dt_u'
    }

    def __init__(self, id=None, title=None, widget_type_name=None, settings=None, view_hash_key=None, dt_u=None):  # noqa: E501
        """Widget - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._widget_type_name = None
        self._settings = None
        self._view_hash_key = None
        self._dt_u = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if widget_type_name is not None:
            self.widget_type_name = widget_type_name
        if settings is not None:
            self.settings = settings
        if view_hash_key is not None:
            self.view_hash_key = view_hash_key
        if dt_u is not None:
            self.dt_u = dt_u

    @property
    def id(self):
        """Gets the id of this Widget.  # noqa: E501


        :return: The id of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Widget.


        :param id: The id of this Widget.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Widget.  # noqa: E501


        :return: The title of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Widget.


        :param title: The title of this Widget.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def widget_type_name(self):
        """Gets the widget_type_name of this Widget.  # noqa: E501


        :return: The widget_type_name of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._widget_type_name

    @widget_type_name.setter
    def widget_type_name(self, widget_type_name):
        """Sets the widget_type_name of this Widget.


        :param widget_type_name: The widget_type_name of this Widget.  # noqa: E501
        :type: str
        """

        self._widget_type_name = widget_type_name

    @property
    def settings(self):
        """Gets the settings of this Widget.  # noqa: E501


        :return: The settings of this Widget.  # noqa: E501
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Widget.


        :param settings: The settings of this Widget.  # noqa: E501
        :type: Settings
        """

        self._settings = settings

    @property
    def view_hash_key(self):
        """Gets the view_hash_key of this Widget.  # noqa: E501


        :return: The view_hash_key of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._view_hash_key

    @view_hash_key.setter
    def view_hash_key(self, view_hash_key):
        """Sets the view_hash_key of this Widget.


        :param view_hash_key: The view_hash_key of this Widget.  # noqa: E501
        :type: str
        """

        self._view_hash_key = view_hash_key

    @property
    def dt_u(self):
        """Gets the dt_u of this Widget.  # noqa: E501


        :return: The dt_u of this Widget.  # noqa: E501
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this Widget.


        :param dt_u: The dt_u of this Widget.  # noqa: E501
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Widget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
