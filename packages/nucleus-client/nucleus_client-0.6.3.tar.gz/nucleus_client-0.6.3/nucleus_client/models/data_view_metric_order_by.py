# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataViewMetricOrderBy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_fields': 'list[str]',
        'partition_by': 'list[str]',
        'direction': 'str'
    }

    attribute_map = {
        'order_fields': 'order_fields',
        'partition_by': 'partition_by',
        'direction': 'direction'
    }

    def __init__(self, order_fields=None, partition_by=None, direction=None):  # noqa: E501
        """DataViewMetricOrderBy - a model defined in Swagger"""  # noqa: E501

        self._order_fields = None
        self._partition_by = None
        self._direction = None
        self.discriminator = None

        if order_fields is not None:
            self.order_fields = order_fields
        if partition_by is not None:
            self.partition_by = partition_by
        if direction is not None:
            self.direction = direction

    @property
    def order_fields(self):
        """Gets the order_fields of this DataViewMetricOrderBy.  # noqa: E501


        :return: The order_fields of this DataViewMetricOrderBy.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_fields

    @order_fields.setter
    def order_fields(self, order_fields):
        """Sets the order_fields of this DataViewMetricOrderBy.


        :param order_fields: The order_fields of this DataViewMetricOrderBy.  # noqa: E501
        :type: list[str]
        """

        self._order_fields = order_fields

    @property
    def partition_by(self):
        """Gets the partition_by of this DataViewMetricOrderBy.  # noqa: E501


        :return: The partition_by of this DataViewMetricOrderBy.  # noqa: E501
        :rtype: list[str]
        """
        return self._partition_by

    @partition_by.setter
    def partition_by(self, partition_by):
        """Sets the partition_by of this DataViewMetricOrderBy.


        :param partition_by: The partition_by of this DataViewMetricOrderBy.  # noqa: E501
        :type: list[str]
        """

        self._partition_by = partition_by

    @property
    def direction(self):
        """Gets the direction of this DataViewMetricOrderBy.  # noqa: E501


        :return: The direction of this DataViewMetricOrderBy.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this DataViewMetricOrderBy.


        :param direction: The direction of this DataViewMetricOrderBy.  # noqa: E501
        :type: str
        """

        self._direction = direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataViewMetricOrderBy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
