# coding: utf-8

"""
    Nucleus REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.6.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_client.models.client_refresh_interval import ClientRefreshInterval  # noqa: F401,E501
from nucleus_client.models.client_refresh_state import ClientRefreshState  # noqa: F401,E501


class ClientRefreshSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date': 'str',
        'interval': 'ClientRefreshInterval',
        'state': 'ClientRefreshState'
    }

    attribute_map = {
        'start_date': 'start_date',
        'interval': 'interval',
        'state': 'state'
    }

    def __init__(self, start_date=None, interval=None, state=None):  # noqa: E501
        """ClientRefreshSchedule - a model defined in Swagger"""  # noqa: E501

        self._start_date = None
        self._interval = None
        self._state = None
        self.discriminator = None

        if start_date is not None:
            self.start_date = start_date
        if interval is not None:
            self.interval = interval
        if state is not None:
            self.state = state

    @property
    def start_date(self):
        """Gets the start_date of this ClientRefreshSchedule.  # noqa: E501


        :return: The start_date of this ClientRefreshSchedule.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ClientRefreshSchedule.


        :param start_date: The start_date of this ClientRefreshSchedule.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def interval(self):
        """Gets the interval of this ClientRefreshSchedule.  # noqa: E501


        :return: The interval of this ClientRefreshSchedule.  # noqa: E501
        :rtype: ClientRefreshInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ClientRefreshSchedule.


        :param interval: The interval of this ClientRefreshSchedule.  # noqa: E501
        :type: ClientRefreshInterval
        """

        self._interval = interval

    @property
    def state(self):
        """Gets the state of this ClientRefreshSchedule.  # noqa: E501


        :return: The state of this ClientRefreshSchedule.  # noqa: E501
        :rtype: ClientRefreshState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClientRefreshSchedule.


        :param state: The state of this ClientRefreshSchedule.  # noqa: E501
        :type: ClientRefreshState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientRefreshSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
