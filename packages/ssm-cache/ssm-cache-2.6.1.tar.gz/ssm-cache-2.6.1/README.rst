AWS System Manager Parameter Store Caching Client (Python)\n==========================================================\n\n`|Build Status| <https://travis-ci.org/alexcasalboni/ssm-cache-python>`_\n`|Coverage\nStatus| <https://coveralls.io/github/alexcasalboni/ssm-cache-python>`_\n`|PyPI version| <https://badge.fury.io/py/ssm-cache>`_ `|GitHub\nlicense| <https://github.com/alexcasalboni/ssm-cache-python/blob/master/LICENSE>`_\n`|Maintenance| <https://GitHub.com/alexcasalboni/ssm-cache-python/graphs/commit-activity>`_\n`|GitHub\nissues| <https://github.com/alexcasalboni/ssm-cache-python/issues>`_\n`|Open Source Love\nsvg2| <https://github.com/ellerbrock/open-source-badges/>`_ `|GitHub\nstars| <https://github.com/alexcasalboni/ssm-cache-python/stargazers>`_\n\nThis module wraps the AWS Parameter Store and adds a caching and\ngrouping layer with max-age invalidation.\n\nYou can use this module with AWS Lambda to read and refresh sensitive\nparameters. Your IAM role will require ``ssm:GetParameters`` permissions\n(optionally, also ``kms:Decrypt`` if you use ``SecureString`` params).\n\nHow to install\n--------------\n\nInstall the module with ``pip``:\n\n::\n\n    pip install ssm-cache\n\nHow to use it\n-------------\n\nSimplest use case\n~~~~~~~~~~~~~~~~~\n\nA single parameter, configured by name.\n\n::\n\n    from ssm_cache import SSMParameter\n    param = SSMParameter(\'my_param_name\')\n    value = param.value\n\nWith cache invalidation\n~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can configure the ``max_age`` in seconds, after which the values\nwill be automatically refreshed.\n\n\\`\\`\\`python from ssm\\_cache import SSMParameter param\\_1 =\nSSMParameter(\'param\\_1\', max\\_age=300) # 5 min value\\_1 = param.value\n\nparam\\_2 = SSMParameter(\'param\\_2\', max\\_age=3600) # 1 hour value\\_2 =\nparam\\_2.value \\`\\`\\` ### With multiple parameters\n\nYou can configure more than one parameter to be fetched/cached (and\ndecrypted or not) together.\n\n::\n\n    from ssm_cache import SSMParameterGroup\n    group = SSMParameterGroup(max_age=300)\n    param_1 = group.parameter(\'param_1\')\n    param_2 = group.parameter(\'param_2\')\n\n    value_1 = param_1.value\n    value_2 = param_2.value\n\nWith hierarchical parameters\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can fetch (and cache) a group of parameters under a given prefix.\nOptionally, the group itself could have a global prefix.\n\n::\n\n    from ssm_cache import SSMParameterGroup\n    group = SSMParameterGroup(base_path="/Foo")\n    foo_bar = group.parameter(\'/Bar\')  # will fetch /Foo/Bar\n    baz_params = group.parameters(\'/Baz\')  # will fetch /Foo/Baz/1 and /Foo/Baz/2\n\n    assert len(group) == 3\n\nNote: you can call ``group.parameters(...)`` multiple times. If caching\nis enabled, the group\'s cache will expire when the firstly fetched\nparameters expire.\n\nHierarchical parameters and filters\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can optionally filter by parameter ``Type`` and KMS ``KeyId``,\neither building the filter object manually or using a class-based\napproach (which provides some additional checks before invoking the\nAPI).\n\n::\n\n    from ssm_cache import SSMParameterGroup\n    from ssm_cache.filters import SSMFilterType\n\n    group = SSMParameterGroup()\n\n    # manual filter definition\n    params = group.parameters(\n        path="/Foo/Bar",\n        filters=[{\n            \'Key\': \'Type\',\n            \'Option\': \'Equals\',\n            \'Values\': [\'StringList\']\n        }],\n    )\n\n    # class-based filter\n    params = group.parameters(\n        path="/Foo/Bar",\n        filters=[SSMFilterType().value(\'StringList\')],  # will validate allowed value(s)\n    )\n\nHierarchical parameters and non-recursiveness\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can optionally disable recursion when fetching parameters via\nprefix.\n\n::\n\n    from ssm_cache import SSMParameterGroup\n    group = SSMParameterGroup()\n\n    # will fetch /Foo/1, but not /Foo/Bar/1\n    params = group.parameters(\n        path="/Foo",\n        recursive=False,\n    )\n\nWith StringList parameters\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``StringList`` parameters (`documentation\nhere <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html#cfn-ssm-parameter-type>`_)\nare automatically converted to Python lists with no additional\nconfiguration.\n\n``python from ssm_cache import SSMParameter # "my_twitter_api_keys" is a StringList parameter (four comma-separated values) twitter_params = SSMParameter(\'my_twitter_api_keys\') key, secret, access_token, access_token_secret = twitter_params.value``\n### Explicit refresh\n\nYou can manually force a refresh on a parameter or parameter group. Note\nthat if a parameter is part of a group, refreshing it will refresh the\nentire group.\n\n::\n\n    from ssm_cache import SSMParameter\n    param = SSMParameter(\'my_param_name\')\n    value = param.value\n    param.refresh()\n    new_value = param.value\n\n::\n\n    from ssm_cache import SSMParameterGroup\n    group = SSMParameterGroup()\n    param_1 = group.parameter(\'param_1\')\n    param_2 = group.parameter(\'param_2\')\n\n    value_1 = param_1.value\n    value_2 = param_2.value\n\n    group.refresh()\n    new_value_1 = param_1.value\n    new_value_2 = param_2.value\n\n    param_1.refresh()\n    new_new_value_1 = param_1.value\n    new_new_value_2 = param_2.value # one parameter refreshes the whole group\n\nWithout decryption\n~~~~~~~~~~~~~~~~~~\n\nDecryption is enabled by default, but you can explicitly disable it on\neither an ``SSMParameter`` or ``SSMGroup``.\n\n::\n\n    from ssm_cache import SSMParameter\n    param = SSMParameter(\'my_param_name\', with_decryption=False)\n    value = param.value\n\nAWS Secrets Manager Integration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can read Secrets Manager secrets transparently by using the\n``SecretsManagerParameter`` class, which comes with the same interface\nof ``SSMParameter`` and performs some additional prefixing and\nvalidation.\n\n::\n\n    from ssm_cache import SecretsManagerParameter\n    secret = SecretsManagerParameter(\'my_secret_name\')\n    value = secret.value\n\nSecrets can be added to a ``SSMGroup`` as well, although no group prefix\nwill be applied.\n\n::\n\n    from ssm_cache import SecretsManagerParameter, SSMGroup\n    group = SSMParameterGroup()\n    param = group.parameter(\'my_param\')\n    secret = group.secret(\'my_secret\')\n\n    param_value = param.value\n    secret_value = sec et.value\n\nUsage with AWS Lambda\n---------------------\n\nYour `AWS Lambda <https://aws.amazon.com/lambda/>`_ code will look\nsimilar to the following snippet.\n\n::\n\n    from ssm_cache import SSMParameter\n    param = SSMParameter(\'my_param_name\')\n\n    def lambda_handler(event, context):\n        secret_value = param.value\n        return \'Hello from Lambda with secret %s\' % secret_value\n\nComplex invalidation based on "signals"\n---------------------------------------\n\nYou may want to explicitly refresh the parameter cache when you believe\nthe cached value expired.\n\nIn the example below, we refresh the parameter value when an\n``InvalidCredentials`` exception is detected (see the `decorator\nutility <#decorator-utility>`_ for a simpler version!).\n\n::\n\n    from ssm_cache import SSMParameter\n    from my_db_lib import Client, InvalidCredentials  # pseudo-code\n\n    param = SSMParameter(\'my_db_password\')\n    my_db_client = Client(password=param.value)\n\n    def read_record(is_retry=False):\n        try:\n            return my_db_client.read_record()\n        except InvalidCredentials:\n            if not is_retry:  # avoid infinite recursion\n                param.refresh()  # force parameter refresh\n                my_db_client = Client(password=param.value)  # re-configure db client\n                return read_record(is_retry=True)  # let\'s try again :)\n\n    def lambda_handler(event, context):\n        return {\n            \'record\': read_record(),\n        }\n\nDecorator utility\n-----------------\n\nThe retry logic shown above can be simplified with the decorator method\nprovided by each ``SSMParameter`` and ``SSMParameterGroup`` object.\n\nThe ``@refresh_on_error`` decorator will intercept errors (or a specific\n``error_class``, if given), refresh the parameters values, and attempt\nto re-call the decorated function. Optionally, you can provide a\n``callback`` argument to implement your own logic (in the example below,\nto create a new db client with the new password).\n\n::\n\n    from ssm_cache import SSMParameter\n    from my_db_lib import Client, InvalidCredentials  # pseudo-code\n\n    param = SSMParameter(\'my_db_password\')\n    my_db_client = Client(password=param.value)\n\n    def on_error_callback():\n        my_db_client = Client(password=param.value)\n\n    @param.refresh_on_error(InvalidCredentials, on_error_callback)\n    def read_record(is_retry=False):\n        return my_db_client.read_record()\n\n    def lambda_handler(event, context):\n        return {\n            \'record\': read_record(),\n        }\n\nOptionally, you can also customize the ``is_retry`` argument name.\n``refresh_on_error`` supports the following arguments:\n\n-  **error\\_class** (default: ``Exception``)\n-  **error\\_callback** (default: ``None``)\n-  **retry\\_argument** (default: ``"is_retry"``)\n\nReplacing the SSM client\n------------------------\n\nIf you want to replace the default ``boto3`` SSM client,\n``SSMParameter`` and ``SSMParameterGroup`` both support calling\n``set_ssm_client`` with an object that implements the SSM\n``get_parameters`` method.\n\nFor example, here\'s how you could inject a Placebo client for local\ntests:\n\n::\n\n    import placebo, boto3\n    from ssm_cache import SSMParameter\n\n    # create regular boto3 session\n    session = boto3.Session()\n    # attach placebo to the session\n    pill = placebo.attach(session, data_path=PLACEBO_PATH)\n    pill.playback()\n    # create special boto3 client\n    client = session.client(\'ssm\')\n    # inject special client into SSMParameter or SSMParameterGroup\n    SSMParameter.set_ssm_client(client)\n\nHow to contribute\n-----------------\n\nClone this repository, create a virtualenv and install all the dev\ndependencies:\n\n::\n\n    git clone https://github.com/alexcasalboni/ssm-cache-python.git\n    cd ssm-cache-python\n    virtualenv env\n    source env/bin/activate\n    pip install -r requirements-dev.txt\n\nYou can run tests with ``nose``:\n\n::\n\n    nosetests\n\nGenerate a coverage report:\n\n::\n\n    nosetests --with-coverage --cover-erase --cover-html --cover-package=ssm_cache\n    open cover/index.html\n\nRun pylint:\n\n::\n\n    pylint ssm_cache\n\nNote: when you open a new PR, GitHub will run tests on multiple Python\nenvironments and verify the new coverage for you, but we highly\nrecommend you run these tasks locally as well before submitting new\ncode.\n\nWhat\'s new?\n-----------\n\n-  **version 2.6**: support for AWS Secrets Manager integration\n-  **version 2.5**: hierarchical parameters, filters, and\n   non-recursiveness support\n-  **version 2.3**: StringList parameters support (auto-conversion)\n-  **version 2.2**: client replacement and boto3/botocore minimum\n   requirements\n-  **version 2.1**: group refresh bugfix\n-  **version 2.0**: new interface, ``SSMParameterGroup`` support\n-  **version 1.3**: Python3 support\n-  **version 1.0**: initial release\n\nReferences and articles\n-----------------------\n\n-  `You should use SSM Parameter Store over Lambda env\n   variables <https://hackernoon.com/you-should-use-ssm-parameter-store-over-lambda-env-variables-5197fc6ea45b>`_\n   by Yan Cui (similar Node.js implementation)\n-  `AWS System Manager Parameter Store\n   doc <https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html>`_\n\n.. |Build\nStatus| image:: https://travis-ci.org/alexcasalboni/ssm-cache-python.svg?branch=master\n.. |Coverage\nStatus| image:: https://coveralls.io/repos/github/alexcasalboni/ssm-cache-python/badge.svg\n.. |PyPI version| image:: https://badge.fury.io/py/ssm-cache.svg\n.. |GitHub\nlicense| image:: https://img.shields.io/github/license/alexcasalboni/ssm-cache-python.svg\n.. |Maintenance| image:: https://img.shields.io/badge/Maintained%3F-yes-green.svg\n.. |GitHub\nissues| image:: https://img.shields.io/github/issues/alexcasalboni/ssm-cache-python.svg\n.. |Open Source Love\nsvg2| image:: https://badges.frapsoft.com/os/v2/open-source.svg?v=103\n.. |GitHub\nstars| image:: https://img.shields.io/github/stars/alexcasalboni/ssm-cache-python.svg\n