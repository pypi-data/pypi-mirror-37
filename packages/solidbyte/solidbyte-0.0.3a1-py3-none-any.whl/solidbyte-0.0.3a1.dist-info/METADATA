Metadata-Version: 2.1
Name: solidbyte
Version: 0.0.3a1
Summary: Solidity development tools for creating Ethereum smart contracts
Home-page: https://github.com/mikeshultz/solidbyte
Author: Mike Shultz
Author-email: mike@gointo.software
License: UNKNOWN
Keywords: solidity ethereum development
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Description-Content-Type: text/markdown
Requires-Dist: pytest (~=3.9.3)
Requires-Dist: eth-account (==0.3.0)
Requires-Dist: web3 (==4.7.2)
Requires-Dist: pyyaml (==3.13)
Provides-Extra: dev
Requires-Dist: twine (~=1.12.1); extra == 'dev'
Requires-Dist: setuptools (~=40.5.0); extra == 'dev'
Requires-Dist: wheel (~=0.32.2); extra == 'dev'
Provides-Extra: test

# solidbyte

Solidity development tools for creating Ethereum smart contracts

## Contents

 - [Documentation](docs/index.md)
 - [Command Reference](docs/commands.md)
 - [metafile.json](docs/metafile.md)
 - [networks.yml](docs/networks.md)

## Quickstart

### 1) Install Solidbyte

First, install solidbyte.  The easiest way to do that is from [PyPi](https://pypi.org)
with `pip`.

    pip install solidbyte

### 2) Setup your project

To get your project going, create a directory for your project and change to it.
Most `sb` commands need to be run from the root of your project directory.

    mkdir myproject && cd myproject
    sb init

Now, all you should have a bare project structure created.  You could also
`init` with [an available template](docs/templates.md), but for the purposes of this
doc, we're just going to create a bare structure.

Your contracts should be in the `contracts` directory.  Your Solidity or Vyper
contracts can be in any directory under it.

The `deploy` directory will hold your [deployment scripts](docs/deployment.md).

And `tests` will contain your [contract unit tests](docs/testing.md).

The `build` directory probably doesn't exist yet.  This will be created by
solidbyte when necessary.


