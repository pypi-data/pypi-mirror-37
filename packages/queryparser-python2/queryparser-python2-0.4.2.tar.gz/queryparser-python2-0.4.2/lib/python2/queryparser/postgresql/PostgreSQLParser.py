# Generated from src/queryparser/postgresql/PostgreSQLParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u0188\u0477\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R")
        buf.write(u"\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4")
        buf.write(u"[\t[\4\\\t\\\4]\t]\4^\t^\3\2\3\2\3\3\3\3\3\3\3\3\5\3")
        buf.write(u"\u00c3\n\3\3\3\3\3\3\3\3\3\5\3\u00c9\n\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\3\5\3\u00d2\n\3\3\3\5\3\u00d5\n\3\3\3")
        buf.write(u"\3\3\5\3\u00d9\n\3\3\3\3\3\3\3\5\3\u00de\n\3\3\3\3\3")
        buf.write(u"\5\3\u00e2\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00eb")
        buf.write(u"\n\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00f3\n\4\3\5\3\5\3")
        buf.write(u"\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\5\n\u0100\n\n\3\n")
        buf.write(u"\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3")
        buf.write(u"\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\23\3\23")
        buf.write(u"\3\23\5\23\u011a\n\23\3\24\3\24\3\24\3\24\3\24\3\24\5")
        buf.write(u"\24\u0122\n\24\3\25\3\25\5\25\u0126\n\25\3\25\5\25\u0129")
        buf.write(u"\n\25\3\25\5\25\u012c\n\25\3\25\5\25\u012f\n\25\3\25")
        buf.write(u"\5\25\u0132\n\25\3\25\5\25\u0135\n\25\3\25\5\25\u0138")
        buf.write(u"\n\25\3\25\5\25\u013b\n\25\3\25\3\25\3\25\3\25\5\25\u0141")
        buf.write(u"\n\25\3\25\5\25\u0144\n\25\3\25\5\25\u0147\n\25\3\25")
        buf.write(u"\5\25\u014a\n\25\5\25\u014c\n\25\3\25\5\25\u014f\n\25")
        buf.write(u"\3\25\5\25\u0152\n\25\3\25\3\25\3\25\3\25\3\25\3\25\5")
        buf.write(u"\25\u015a\n\25\3\25\5\25\u015d\n\25\3\26\5\26\u0160\n")
        buf.write(u"\26\3\26\3\26\3\27\3\27\3\27\5\27\u0167\n\27\3\30\3\30")
        buf.write(u"\3\30\3\30\5\30\u016d\n\30\3\30\5\30\u0170\n\30\3\30")
        buf.write(u"\3\30\5\30\u0174\n\30\3\31\3\31\3\31\5\31\u0179\n\31")
        buf.write(u"\3\31\3\31\5\31\u017d\n\31\3\31\3\31\3\32\3\32\3\32\3")
        buf.write(u"\32\3\32\6\32\u0186\n\32\r\32\16\32\u0187\3\33\3\33\3")
        buf.write(u"\33\3\33\3\33\3\33\6\33\u0190\n\33\r\33\16\33\u0191\3")
        buf.write(u"\34\3\34\3\34\3\34\7\34\u0198\n\34\f\34\16\34\u019b\13")
        buf.write(u"\34\3\34\3\34\3\35\3\35\3\36\3\36\3\36\5\36\u01a4\n\36")
        buf.write(u"\3\36\3\36\3\36\5\36\u01a9\n\36\3\36\3\36\5\36\u01ad")
        buf.write(u"\n\36\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u01b5\n\37\3")
        buf.write(u"\37\5\37\u01b8\n\37\5\37\u01ba\n\37\3 \3 \3 \7 \u01bf")
        buf.write(u"\n \f \16 \u01c2\13 \3!\3!\3!\7!\u01c7\n!\f!\16!\u01ca")
        buf.write(u"\13!\3\"\5\"\u01cd\n\"\3\"\3\"\3#\3#\3#\5#\u01d4\n#\3")
        buf.write(u"#\3#\3#\3#\5#\u01da\n#\5#\u01dc\n#\3#\5#\u01df\n#\5#")
        buf.write(u"\u01e1\n#\3$\3$\3$\7$\u01e6\n$\f$\16$\u01e9\13$\3%\3")
        buf.write(u"%\3%\3%\7%\u01ef\n%\f%\16%\u01f2\13%\3%\3%\3&\3&\3&\5")
        buf.write(u"&\u01f9\n&\3\'\3\'\3\'\5\'\u01fe\n\'\3(\3(\3(\7(\u0203")
        buf.write(u"\n(\f(\16(\u0206\13(\3)\3)\3)\7)\u020b\n)\f)\16)\u020e")
        buf.write(u"\13)\3*\5*\u0211\n*\3*\3*\3*\5*\u0216\n*\3+\3+\3+\3+")
        buf.write(u"\3+\7+\u021d\n+\f+\16+\u0220\13+\5+\u0222\n+\3+\5+\u0225")
        buf.write(u"\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write(u"+\3+\3+\3+\3+\3+\3+\3+\5+\u023f\n+\3+\3+\5+\u0243\n+")
        buf.write(u"\5+\u0245\n+\3+\3+\5+\u0249\n+\3,\3,\3,\3,\3,\7,\u0250")
        buf.write(u"\n,\f,\16,\u0253\13,\3,\3,\5,\u0257\n,\3-\3-\3-\5-\u025c")
        buf.write(u"\n-\3-\5-\u025f\n-\3.\3.\3.\3/\3/\3/\3/\5/\u0268\n/\3")
        buf.write(u"/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u0278\n/")
        buf.write(u"\3\60\3\60\3\60\7\60\u027d\n\60\f\60\16\60\u0280\13\60")
        buf.write(u"\3\61\3\61\3\62\3\62\3\62\7\62\u0287\n\62\f\62\16\62")
        buf.write(u"\u028a\13\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63")
        buf.write(u"\u0293\n\63\5\63\u0295\n\63\3\64\3\64\3\64\3\64\3\65")
        buf.write(u"\3\65\3\65\3\65\5\65\u029f\n\65\3\66\3\66\3\66\3\66\5")
        buf.write(u"\66\u02a5\n\66\3\66\3\66\3\66\3\66\3\66\5\66\u02ac\n")
        buf.write(u"\66\3\67\3\67\3\67\3\67\7\67\u02b2\n\67\f\67\16\67\u02b5")
        buf.write(u"\13\67\3\67\3\67\3\67\5\67\u02ba\n\67\38\38\39\39\3:")
        buf.write(u"\3:\3:\3:\3:\7:\u02c5\n:\f:\16:\u02c8\13:\3;\3;\5;\u02cc")
        buf.write(u"\n;\3;\3;\5;\u02d0\n;\5;\u02d2\n;\3;\3;\3;\3;\5;\u02d8")
        buf.write(u"\n;\3<\3<\3<\3<\3<\3=\3=\3>\3>\3>\7>\u02e4\n>\f>\16>")
        buf.write(u"\u02e7\13>\3?\5?\u02ea\n?\3?\3?\3?\5?\u02ef\n?\3?\3?")
        buf.write(u"\3?\3?\5?\u02f5\n?\3?\3?\3?\5?\u02fa\n?\3?\3?\5?\u02fe")
        buf.write(u"\n?\3?\3?\5?\u0302\n?\3?\3?\3?\5?\u0307\n?\3@\3@\3@\3")
        buf.write(u"@\5@\u030d\n@\3A\3A\5A\u0311\nA\3A\3A\5A\u0315\nA\3B")
        buf.write(u"\3B\3B\3C\3C\3D\3D\3D\7D\u031f\nD\fD\16D\u0322\13D\3")
        buf.write(u"D\3D\3D\3D\3D\7D\u0329\nD\fD\16D\u032c\13D\5D\u032e\n")
        buf.write(u"D\5D\u0330\nD\3E\3E\3E\5E\u0335\nE\3E\7E\u0338\nE\fE")
        buf.write(u"\16E\u033b\13E\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5")
        buf.write(u"F\u0349\nF\3G\3G\3G\3G\5G\u034f\nG\3G\6G\u0352\nG\rG")
        buf.write(u"\16G\u0353\3H\3H\3H\3H\3I\3I\5I\u035c\nI\3I\5I\u035f")
        buf.write(u"\nI\3I\5I\u0362\nI\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3")
        buf.write(u"I\3I\3I\3I\3I\5I\u0374\nI\3J\3J\3K\3K\5K\u037a\nK\3K")
        buf.write(u"\3K\3K\5K\u037f\nK\7K\u0381\nK\fK\16K\u0384\13K\3L\3")
        buf.write(u"L\3L\3L\3L\5L\u038b\nL\5L\u038d\nL\3M\3M\3M\5M\u0392")
        buf.write(u"\nM\3M\3M\3M\3M\7M\u0398\nM\fM\16M\u039b\13M\3N\3N\3")
        buf.write(u"N\3N\5N\u03a1\nN\5N\u03a3\nN\3N\3N\5N\u03a7\nN\3O\3O")
        buf.write(u"\3O\3O\3O\3O\3O\5O\u03b0\nO\5O\u03b2\nO\3P\3P\3P\7P\u03b7")
        buf.write(u"\nP\fP\16P\u03ba\13P\3Q\3Q\3Q\5Q\u03bf\nQ\3Q\3Q\3R\3")
        buf.write(u"R\3R\3R\7R\u03c7\nR\fR\16R\u03ca\13R\3S\3S\3S\3T\3T\3")
        buf.write(u"U\3U\5U\u03d3\nU\3U\3U\5U\u03d7\nU\3U\3U\3U\3U\3U\3U")
        buf.write(u"\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u03ea\nU\3U\3U\3")
        buf.write(u"U\5U\u03ef\nU\3U\3U\3U\3U\5U\u03f5\nU\3U\3U\3U\3U\3U")
        buf.write(u"\5U\u03fc\nU\3U\3U\3U\3U\5U\u0402\nU\3U\3U\3U\3U\5U\u0408")
        buf.write(u"\nU\3U\3U\3U\3U\3U\3U\3U\5U\u0411\nU\3U\5U\u0414\nU\3")
        buf.write(u"U\6U\u0417\nU\rU\16U\u0418\5U\u041b\nU\3V\3V\3V\3V\3")
        buf.write(u"V\3V\3V\3W\3W\3W\3W\3W\3W\3W\3X\3X\3X\3X\3X\3X\3X\3X")
        buf.write(u"\3X\3X\3X\3X\3X\3X\5X\u0439\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3")
        buf.write(u"Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3[")
        buf.write(u"\3[\3[\3[\3[\5[\u0458\n[\3\\\3\\\3\\\3\\\3\\\3\\\3\\")
        buf.write(u"\5\\\u0461\n\\\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3^\3")
        buf.write(u"^\3^\3^\3^\3^\3^\5^\u0475\n^\3^\2\2_\2\4\6\b\n\f\16\20")
        buf.write(u"\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJ")
        buf.write(u"LNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write(u"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write(u"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write(u"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\2\33\4\2\u015b")
        buf.write(u"\u015e\u0172\u0173\13\2NR\u0087\u008a\u00c5\u00c7\u00cb")
        buf.write(u"\u00cb\u00e3\u00e3\u00f5\u00f6\u0140\u0140\u0148\u0148")
        buf.write(u"\u014a\u014a\4\2\u00a5\u00a5\u0139\u0139\4\2ll\u0128")
        buf.write(u"\u0128\3\2\u016b\u016c\4\2\u0180\u0180\u0183\u0183\"")
        buf.write(u"\2\16\16\27\27\33\33&&((,-``jjmnssww\u0085\u0085\u0093")
        buf.write(u"\u0094\u00ab\u00ac\u00b1\u00b2\u00b7\u00b9\u00be\u00be")
        buf.write(u"\u00c4\u00c4\u00d4\u00d4\u00d9\u00d9\u00e5\u00e5\u00eb")
        buf.write(u"\u00ee\u00f2\u00f3\u0101\u0101\u0103\u0103\u0110\u0110")
        buf.write(u"\u0112\u0113\u0124\u0124\u0127\u0127\u012c\u012c\u0131")
        buf.write(u"\u0131\u0143\u0143\f\2\23\23\31\32\34\35\64\64\u0081")
        buf.write(u"\u0081\u00c1\u00c1\u00c8\u00c8\u010b\u010e\u0115\u0115")
        buf.write(u"\u013c\u013e\31\2\3\4\17\17\21\22#%//\62\63==WW[[hhq")
        buf.write(u"q\177\177\u00af\u00af\u00b4\u00b4\u00c9\u00c9\u00e0\u00e2")
        buf.write(u"\u00e6\u00e7\u00f0\u00f0\u00fc\u00fc\u00fe\u00fe\u010a")
        buf.write(u"\u010a\u011a\u011a\u0129\u0129\"\2\7\b\24\24\'\'))++")
        buf.write(u"..AACCUVYZabuu~~\u008c\u008d\u0090\u0091\u0098\u0098")
        buf.write(u"\u009b\u009b\u00a4\u00a4\u00b1\u00b1\u00be\u00bf\u00c2")
        buf.write(u"\u00c2\u00cd\u00cd\u00d7\u00d7\u00dd\u00dd\u00ea\u00ea")
        buf.write(u"\u00f4\u00f4\u00f9\u00f9\u0100\u0100\u0119\u0119\u0133")
        buf.write(u"\u0133\u013a\u013b\u013f\u013f\37\2\5\6\61\61@@BBDDF")
        buf.write(u"Mkkxy}}\u0087\u0087\u00a3\u00a3\u00bc\u00bd\u00c3\u00c3")
        buf.write(u"\u00c5\u00c5\u00cb\u00cc\u00d1\u00d1\u00de\u00df\u00e3")
        buf.write(u"\u00e3\u00f5\u00f5\u00f7\u00f7\u0111\u0111\u0114\u0114")
        buf.write(u"\u0118\u0118\u011c\u0122\u0125\u0126\u012e\u012e\u0136")
        buf.write(u"\u0138\u0140\u0142\u0148\u0149\4\2\n\n\\]\4\2\u0106\u0106")
        buf.write(u"\u0108\u0108\4\2\u0099\u0099\u00d0\u00d0\3\2\u0160\u0161")
        buf.write(u"\5\2\u0156\u0157\u0166\u0166\u0170\u0170\4\2\30\30\u016b")
        buf.write(u"\u016d\5\2\n\n\\\\\u0166\u0166\4\2\r\rXX\4\2\u008f\u008f")
        buf.write(u"\u009e\u009e\4\2oo\u00a2\u00a2\3\2\u0172\u0173\6\2??")
        buf.write(u"\u0092\u0092\u00ab\u00ab\u00ee\u00ee\4\2\u00ab\u00ab")
        buf.write(u"\u00ee\u00ee\5\2\u0159\u0159\u016d\u016d\u0174\u017b")
        buf.write(u"\2\u04e9\2\u00bc\3\2\2\2\4\u00e1\3\2\2\2\6\u00f2\3\2")
        buf.write(u"\2\2\b\u00f4\3\2\2\2\n\u00f6\3\2\2\2\f\u00f8\3\2\2\2")
        buf.write(u"\16\u00fa\3\2\2\2\20\u00fc\3\2\2\2\22\u00ff\3\2\2\2\24")
        buf.write(u"\u0103\3\2\2\2\26\u0105\3\2\2\2\30\u0107\3\2\2\2\32\u0109")
        buf.write(u"\3\2\2\2\34\u010b\3\2\2\2\36\u010d\3\2\2\2 \u010f\3\2")
        buf.write(u"\2\2\"\u0111\3\2\2\2$\u0119\3\2\2\2&\u0121\3\2\2\2(\u0123")
        buf.write(u"\3\2\2\2*\u015f\3\2\2\2,\u0163\3\2\2\2.\u0173\3\2\2\2")
        buf.write(u"\60\u0175\3\2\2\2\62\u0185\3\2\2\2\64\u0189\3\2\2\2\66")
        buf.write(u"\u0193\3\2\2\28\u019e\3\2\2\2:\u01a8\3\2\2\2<\u01b9\3")
        buf.write(u"\2\2\2>\u01bb\3\2\2\2@\u01c3\3\2\2\2B\u01cc\3\2\2\2D")
        buf.write(u"\u01d0\3\2\2\2F\u01e2\3\2\2\2H\u01ea\3\2\2\2J\u01f5\3")
        buf.write(u"\2\2\2L\u01fa\3\2\2\2N\u01ff\3\2\2\2P\u0207\3\2\2\2R")
        buf.write(u"\u0210\3\2\2\2T\u0248\3\2\2\2V\u024a\3\2\2\2X\u025b\3")
        buf.write(u"\2\2\2Z\u0260\3\2\2\2\\\u0277\3\2\2\2^\u0279\3\2\2\2")
        buf.write(u"`\u0281\3\2\2\2b\u0283\3\2\2\2d\u028b\3\2\2\2f\u0296")
        buf.write(u"\3\2\2\2h\u029e\3\2\2\2j\u02ab\3\2\2\2l\u02ad\3\2\2\2")
        buf.write(u"n\u02bb\3\2\2\2p\u02bd\3\2\2\2r\u02bf\3\2\2\2t\u02d7")
        buf.write(u"\3\2\2\2v\u02d9\3\2\2\2x\u02de\3\2\2\2z\u02e0\3\2\2\2")
        buf.write(u"|\u02e9\3\2\2\2~\u0308\3\2\2\2\u0080\u0310\3\2\2\2\u0082")
        buf.write(u"\u0316\3\2\2\2\u0084\u0319\3\2\2\2\u0086\u032f\3\2\2")
        buf.write(u"\2\u0088\u0331\3\2\2\2\u008a\u0348\3\2\2\2\u008c\u0351")
        buf.write(u"\3\2\2\2\u008e\u0355\3\2\2\2\u0090\u0373\3\2\2\2\u0092")
        buf.write(u"\u0375\3\2\2\2\u0094\u0377\3\2\2\2\u0096\u0385\3\2\2")
        buf.write(u"\2\u0098\u038e\3\2\2\2\u009a\u039c\3\2\2\2\u009c\u03b1")
        buf.write(u"\3\2\2\2\u009e\u03b3\3\2\2\2\u00a0\u03be\3\2\2\2\u00a2")
        buf.write(u"\u03c2\3\2\2\2\u00a4\u03cb\3\2\2\2\u00a6\u03ce\3\2\2")
        buf.write(u"\2\u00a8\u041a\3\2\2\2\u00aa\u041c\3\2\2\2\u00ac\u0423")
        buf.write(u"\3\2\2\2\u00ae\u0438\3\2\2\2\u00b0\u043a\3\2\2\2\u00b2")
        buf.write(u"\u0445\3\2\2\2\u00b4\u0457\3\2\2\2\u00b6\u0460\3\2\2")
        buf.write(u"\2\u00b8\u0462\3\2\2\2\u00ba\u0474\3\2\2\2\u00bc\u00bd")
        buf.write(u"\t\2\2\2\u00bd\3\3\2\2\2\u00be\u00c2\7\30\2\2\u00bf\u00c0")
        buf.write(u"\7\u0168\2\2\u00c0\u00c1\7\u0180\2\2\u00c1\u00c3\7\u0167")
        buf.write(u"\2\2\u00c2\u00bf\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00e2")
        buf.write(u"\3\2\2\2\u00c4\u00c8\7&\2\2\u00c5\u00c6\7\u0168\2\2\u00c6")
        buf.write(u"\u00c7\7\u0180\2\2\u00c7\u00c9\7\u0167\2\2\u00c8\u00c5")
        buf.write(u"\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00e2\3\2\2\2\u00ca")
        buf.write(u"\u00e2\7I\2\2\u00cb\u00e2\7E\2\2\u00cc\u00d4\7T\2\2\u00cd")
        buf.write(u"\u00ce\7\u0168\2\2\u00ce\u00d1\7\u0180\2\2\u00cf\u00d0")
        buf.write(u"\7\u0165\2\2\u00d0\u00d2\7\u0180\2\2\u00d1\u00cf\3\2")
        buf.write(u"\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00d5")
        buf.write(u"\7\u0167\2\2\u00d4\u00cd\3\2\2\2\u00d4\u00d5\3\2\2\2")
        buf.write(u"\u00d5\u00e2\3\2\2\2\u00d6\u00d8\7\u00fd\2\2\u00d7\u00d9")
        buf.write(u"\7\u0095\2\2\u00d8\u00d7\3\2\2\2\u00d8\u00d9\3\2\2\2")
        buf.write(u"\u00d9\u00e2\3\2\2\2\u00da\u00e2\7\u0121\2\2\u00db\u00dd")
        buf.write(u"\7\u012f\2\2\u00dc\u00de\7\u0095\2\2\u00dd\u00dc\3\2")
        buf.write(u"\2\2\u00dd\u00de\3\2\2\2\u00de\u00e2\3\2\2\2\u00df\u00e2")
        buf.write(u"\7p\2\2\u00e0\u00e2\7^\2\2\u00e1\u00be\3\2\2\2\u00e1")
        buf.write(u"\u00c4\3\2\2\2\u00e1\u00ca\3\2\2\2\u00e1\u00cb\3\2\2")
        buf.write(u"\2\u00e1\u00cc\3\2\2\2\u00e1\u00d6\3\2\2\2\u00e1\u00da")
        buf.write(u"\3\2\2\2\u00e1\u00db\3\2\2\2\u00e1\u00df\3\2\2\2\u00e1")
        buf.write(u"\u00e0\3\2\2\2\u00e2\5\3\2\2\2\u00e3\u00e4\7\u0097\2")
        buf.write(u"\2\u00e4\u00e5\7\u00ce\2\2\u00e5\u00e6\7\u00a1\2\2\u00e6")
        buf.write(u"\u00ea\7\u00ca\2\2\u00e7\u00e8\7\u0146\2\2\u00e8\u00e9")
        buf.write(u"\7\u00e4\2\2\u00e9\u00eb\7i\2\2\u00ea\u00e7\3\2\2\2\u00ea")
        buf.write(u"\u00eb\3\2\2\2\u00eb\u00f3\3\2\2\2\u00ec\u00ed\7\u0097")
        buf.write(u"\2\2\u00ed\u00ee\7\36\2\2\u00ee\u00f3\7\u00ca\2\2\u00ef")
        buf.write(u"\u00f0\7\u0146\2\2\u00f0\u00f1\7\u00e4\2\2\u00f1\u00f3")
        buf.write(u"\7i\2\2\u00f2\u00e3\3\2\2\2\u00f2\u00ec\3\2\2\2\u00f2")
        buf.write(u"\u00ef\3\2\2\2\u00f3\7\3\2\2\2\u00f4\u00f5\t\3\2\2\u00f5")
        buf.write(u"\t\3\2\2\2\u00f6\u00f7\t\4\2\2\u00f7\13\3\2\2\2\u00f8")
        buf.write(u"\u00f9\7\u0182\2\2\u00f9\r\3\2\2\2\u00fa\u00fb\t\5\2")
        buf.write(u"\2\u00fb\17\3\2\2\2\u00fc\u00fd\7\u0181\2\2\u00fd\21")
        buf.write(u"\3\2\2\2\u00fe\u0100\t\6\2\2\u00ff\u00fe\3\2\2\2\u00ff")
        buf.write(u"\u0100\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0102\t\7\2")
        buf.write(u"\2\u0102\23\3\2\2\2\u0103\u0104\7\u0185\2\2\u0104\25")
        buf.write(u"\3\2\2\2\u0105\u0106\t\b\2\2\u0106\27\3\2\2\2\u0107\u0108")
        buf.write(u"\t\t\2\2\u0108\31\3\2\2\2\u0109\u010a\t\n\2\2\u010a\33")
        buf.write(u"\3\2\2\2\u010b\u010c\t\13\2\2\u010c\35\3\2\2\2\u010d")
        buf.write(u"\u010e\t\f\2\2\u010e\37\3\2\2\2\u010f\u0110\7\u0155\2")
        buf.write(u"\2\u0110!\3\2\2\2\u0111\u0112\7\u0154\2\2\u0112#\3\2")
        buf.write(u"\2\2\u0113\u011a\5\32\16\2\u0114\u011a\5\26\f\2\u0115")
        buf.write(u"\u011a\5\36\20\2\u0116\u011a\5\34\17\2\u0117\u011a\5")
        buf.write(u"\"\22\2\u0118\u011a\5 \21\2\u0119\u0113\3\2\2\2\u0119")
        buf.write(u"\u0114\3\2\2\2\u0119\u0115\3\2\2\2\u0119\u0116\3\2\2")
        buf.write(u"\2\u0119\u0117\3\2\2\2\u0119\u0118\3\2\2\2\u011a%\3\2")
        buf.write(u"\2\2\u011b\u0122\5\24\13\2\u011c\u0122\5\22\n\2\u011d")
        buf.write(u"\u0122\5\20\t\2\u011e\u0122\5\16\b\2\u011f\u0122\5\f")
        buf.write(u"\7\2\u0120\u0122\7\u00d2\2\2\u0121\u011b\3\2\2\2\u0121")
        buf.write(u"\u011c\3\2\2\2\u0121\u011d\3\2\2\2\u0121\u011e\3\2\2")
        buf.write(u"\2\u0121\u011f\3\2\2\2\u0121\u0120\3\2\2\2\u0122\'\3")
        buf.write(u"\2\2\2\u0123\u0125\7\u00f8\2\2\u0124\u0126\t\r\2\2\u0125")
        buf.write(u"\u0124\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0128\3\2\2")
        buf.write(u"\2\u0127\u0129\7\u0086\2\2\u0128\u0127\3\2\2\2\u0128")
        buf.write(u"\u0129\3\2\2\2\u0129\u012b\3\2\2\2\u012a\u012c\7\u010f")
        buf.write(u"\2\2\u012b\u012a\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012e")
        buf.write(u"\3\2\2\2\u012d\u012f\7\u0109\2\2\u012e\u012d\3\2\2\2")
        buf.write(u"\u012e\u012f\3\2\2\2\u012f\u0131\3\2\2\2\u0130\u0132")
        buf.write(u"\7\u0104\2\2\u0131\u0130\3\2\2\2\u0131\u0132\3\2\2\2")
        buf.write(u"\u0132\u0134\3\2\2\2\u0133\u0135\7\u0105\2\2\u0134\u0133")
        buf.write(u"\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0137\3\2\2\2\u0136")
        buf.write(u"\u0138\t\16\2\2\u0137\u0136\3\2\2\2\u0137\u0138\3\2\2")
        buf.write(u"\2\u0138\u013a\3\2\2\2\u0139\u013b\7\u0107\2\2\u013a")
        buf.write(u"\u0139\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013c\3\2\2")
        buf.write(u"\2\u013c\u014b\5\u0086D\2\u013d\u013e\7v\2\2\u013e\u0140")
        buf.write(u"\5\u009eP\2\u013f\u0141\5v<\2\u0140\u013f\3\2\2\2\u0140")
        buf.write(u"\u0141\3\2\2\2\u0141\u0143\3\2\2\2\u0142\u0144\5\u00a4")
        buf.write(u"S\2\u0143\u0142\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0146")
        buf.write(u"\3\2\2\2\u0145\u0147\5V,\2\u0146\u0145\3\2\2\2\u0146")
        buf.write(u"\u0147\3\2\2\2\u0147\u0149\3\2\2\2\u0148\u014a\5Z.\2")
        buf.write(u"\u0149\u0148\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u014c")
        buf.write(u"\3\2\2\2\u014b\u013d\3\2\2\2\u014b\u014c\3\2\2\2\u014c")
        buf.write(u"\u014e\3\2\2\2\u014d\u014f\5r:\2\u014e\u014d\3\2\2\2")
        buf.write(u"\u014e\u014f\3\2\2\2\u014f\u0151\3\2\2\2\u0150\u0152")
        buf.write(u"\5j\66\2\u0151\u0150\3\2\2\2\u0151\u0152\3\2\2\2\u0152")
        buf.write(u"\u0159\3\2\2\2\u0153\u0154\7t\2\2\u0154\u015a\7\u0130")
        buf.write(u"\2\2\u0155\u0156\7\u00b3\2\2\u0156\u0157\7\u0097\2\2")
        buf.write(u"\u0157\u0158\7\u00fb\2\2\u0158\u015a\7\u00ca\2\2\u0159")
        buf.write(u"\u0153\3\2\2\2\u0159\u0155\3\2\2\2\u0159\u015a\3\2\2")
        buf.write(u"\2\u015a\u015c\3\2\2\2\u015b\u015d\7\u0162\2\2\u015c")
        buf.write(u"\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d)\3\2\2\2\u015e")
        buf.write(u"\u0160\7\20\2\2\u015f\u015e\3\2\2\2\u015f\u0160\3\2\2")
        buf.write(u"\2\u0160\u0161\3\2\2\2\u0161\u0162\7\u0186\2\2\u0162")
        buf.write(u"+\3\2\2\2\u0163\u0166\5J&\2\u0164\u0165\7\u016e\2\2\u0165")
        buf.write(u"\u0167\5J&\2\u0166\u0164\3\2\2\2\u0166\u0167\3\2\2\2")
        buf.write(u"\u0167-\3\2\2\2\u0168\u016c\5\u0080A\2\u0169\u016a\5")
        buf.write(u"\2\2\2\u016a\u016b\5\u0080A\2\u016b\u016d\3\2\2\2\u016c")
        buf.write(u"\u0169\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u0174\3\2\2")
        buf.write(u"\2\u016e\u0170\7\u00cf\2\2\u016f\u016e\3\2\2\2\u016f")
        buf.write(u"\u0170\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0172\7g\2\2")
        buf.write(u"\u0172\u0174\5\u008eH\2\u0173\u0168\3\2\2\2\u0173\u016f")
        buf.write(u"\3\2\2\2\u0174/\3\2\2\2\u0175\u0178\7!\2\2\u0176\u0179")
        buf.write(u"\5\62\32\2\u0177\u0179\5\64\33\2\u0178\u0176\3\2\2\2")
        buf.write(u"\u0178\u0177\3\2\2\2\u0179\u017c\3\2\2\2\u017a\u017b")
        buf.write(u"\7_\2\2\u017b\u017d\5,\27\2\u017c\u017a\3\2\2\2\u017c")
        buf.write(u"\u017d\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017f\7c\2\2")
        buf.write(u"\u017f\61\3\2\2\2\u0180\u0181\7\u0144\2\2\u0181\u0182")
        buf.write(u"\5F$\2\u0182\u0183\7\u011b\2\2\u0183\u0184\5,\27\2\u0184")
        buf.write(u"\u0186\3\2\2\2\u0185\u0180\3\2\2\2\u0186\u0187\3\2\2")
        buf.write(u"\2\u0187\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188\63\3")
        buf.write(u"\2\2\2\u0189\u018f\5,\27\2\u018a\u018b\7\u0144\2\2\u018b")
        buf.write(u"\u018c\5,\27\2\u018c\u018d\7\u011b\2\2\u018d\u018e\5")
        buf.write(u",\27\2\u018e\u0190\3\2\2\2\u018f\u018a\3\2\2\2\u0190")
        buf.write(u"\u0191\3\2\2\2\u0191\u018f\3\2\2\2\u0191\u0192\3\2\2")
        buf.write(u"\2\u0192\65\3\2\2\2\u0193\u0194\7\u0168\2\2\u0194\u0199")
        buf.write(u"\5:\36\2\u0195\u0196\7\u0165\2\2\u0196\u0198\5:\36\2")
        buf.write(u"\u0197\u0195\3\2\2\2\u0198\u019b\3\2\2\2\u0199\u0197")
        buf.write(u"\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019c\3\2\2\2\u019b")
        buf.write(u"\u0199\3\2\2\2\u019c\u019d\7\u0167\2\2\u019d\67\3\2\2")
        buf.write(u"\2\u019e\u019f\7\u0186\2\2\u019f9\3\2\2\2\u01a0\u01a1")
        buf.write(u"\5\u0084C\2\u01a1\u01a2\7\u0164\2\2\u01a2\u01a4\3\2\2")
        buf.write(u"\2\u01a3\u01a0\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a5")
        buf.write(u"\3\2\2\2\u01a5\u01a6\5\u0092J\2\u01a6\u01a7\7\u0164\2")
        buf.write(u"\2\u01a7\u01a9\3\2\2\2\u01a8\u01a3\3\2\2\2\u01a8\u01a9")
        buf.write(u"\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01ac\58\35\2\u01ab")
        buf.write(u"\u01ad\5\u008cG\2\u01ac\u01ab\3\2\2\2\u01ac\u01ad\3\2")
        buf.write(u"\2\2\u01ad;\3\2\2\2\u01ae\u01af\5\u00a0Q\2\u01af\u01b0")
        buf.write(u"\7\u0164\2\2\u01b0\u01b1\7\u0166\2\2\u01b1\u01ba\3\2")
        buf.write(u"\2\2\u01b2\u01b5\5,\27\2\u01b3\u01b5\5\u00a8U\2\u01b4")
        buf.write(u"\u01b2\3\2\2\2\u01b4\u01b3\3\2\2\2\u01b5\u01b7\3\2\2")
        buf.write(u"\2\u01b6\u01b8\5*\26\2\u01b7\u01b6\3\2\2\2\u01b7\u01b8")
        buf.write(u"\3\2\2\2\u01b8\u01ba\3\2\2\2\u01b9\u01ae\3\2\2\2\u01b9")
        buf.write(u"\u01b4\3\2\2\2\u01ba=\3\2\2\2\u01bb\u01c0\5@!\2\u01bc")
        buf.write(u"\u01bd\7\u0147\2\2\u01bd\u01bf\5@!\2\u01be\u01bc\3\2")
        buf.write(u"\2\2\u01bf\u01c2\3\2\2\2\u01c0\u01be\3\2\2\2\u01c0\u01c1")
        buf.write(u"\3\2\2\2\u01c1?\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c3\u01c8")
        buf.write(u"\5B\"\2\u01c4\u01c5\7\u0159\2\2\u01c5\u01c7\5B\"\2\u01c6")
        buf.write(u"\u01c4\3\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3\2\2")
        buf.write(u"\2\u01c8\u01c9\3\2\2\2\u01c9A\3\2\2\2\u01ca\u01c8\3\2")
        buf.write(u"\2\2\u01cb\u01cd\7\u00cf\2\2\u01cc\u01cb\3\2\2\2\u01cc")
        buf.write(u"\u01cd\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01cf\5D#\2")
        buf.write(u"\u01cfC\3\2\2\2\u01d0\u01e0\5.\30\2\u01d1\u01d3\7\u009a")
        buf.write(u"\2\2\u01d2\u01d4\7\u00cf\2\2\u01d3\u01d2\3\2\2\2\u01d3")
        buf.write(u"\u01d4\3\2\2\2\u01d4\u01d9\3\2\2\2\u01d5\u01da\5\16\b")
        buf.write(u"\2\u01d6\u01da\7\u00d2\2\2\u01d7\u01d8\7\\\2\2\u01d8")
        buf.write(u"\u01da\7v\2\2\u01d9\u01d5\3\2\2\2\u01d9\u01d6\3\2\2\2")
        buf.write(u"\u01d9\u01d7\3\2\2\2\u01da\u01dc\3\2\2\2\u01db\u01d1")
        buf.write(u"\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01e1\3\2\2\2\u01dd")
        buf.write(u"\u01df\t\17\2\2\u01de\u01dd\3\2\2\2\u01de\u01df\3\2\2")
        buf.write(u"\2\u01df\u01e1\3\2\2\2\u01e0\u01db\3\2\2\2\u01e0\u01de")
        buf.write(u"\3\2\2\2\u01e1E\3\2\2\2\u01e2\u01e7\5> \2\u01e3\u01e4")
        buf.write(u"\7\u0158\2\2\u01e4\u01e6\5> \2\u01e5\u01e3\3\2\2\2\u01e6")
        buf.write(u"\u01e9\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e7\u01e8\3\2\2")
        buf.write(u"\2\u01e8G\3\2\2\2\u01e9\u01e7\3\2\2\2\u01ea\u01eb\7\u0168")
        buf.write(u"\2\2\u01eb\u01f0\5F$\2\u01ec\u01ed\7\u0165\2\2\u01ed")
        buf.write(u"\u01ef\5F$\2\u01ee\u01ec\3\2\2\2\u01ef\u01f2\3\2\2\2")
        buf.write(u"\u01f0\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3")
        buf.write(u"\3\2\2\2\u01f2\u01f0\3\2\2\2\u01f3\u01f4\7\u0167\2\2")
        buf.write(u"\u01f4I\3\2\2\2\u01f5\u01f8\5L\'\2\u01f6\u01f7\7\u016f")
        buf.write(u"\2\2\u01f7\u01f9\5L\'\2\u01f8\u01f6\3\2\2\2\u01f8\u01f9")
        buf.write(u"\3\2\2\2\u01f9K\3\2\2\2\u01fa\u01fd\5N(\2\u01fb\u01fc")
        buf.write(u"\t\20\2\2\u01fc\u01fe\5N(\2\u01fd\u01fb\3\2\2\2\u01fd")
        buf.write(u"\u01fe\3\2\2\2\u01feM\3\2\2\2\u01ff\u0204\5P)\2\u0200")
        buf.write(u"\u0201\t\6\2\2\u0201\u0203\5P)\2\u0202\u0200\3\2\2\2")
        buf.write(u"\u0203\u0206\3\2\2\2\u0204\u0202\3\2\2\2\u0204\u0205")
        buf.write(u"\3\2\2\2\u0205O\3\2\2\2\u0206\u0204\3\2\2\2\u0207\u020c")
        buf.write(u"\5R*\2\u0208\u0209\t\21\2\2\u0209\u020b\5R*\2\u020a\u0208")
        buf.write(u"\3\2\2\2\u020b\u020e\3\2\2\2\u020c\u020a\3\2\2\2\u020c")
        buf.write(u"\u020d\3\2\2\2\u020dQ\3\2\2\2\u020e\u020c\3\2\2\2\u020f")
        buf.write(u"\u0211\t\22\2\2\u0210\u020f\3\2\2\2\u0210\u0211\3\2\2")
        buf.write(u"\2\u0211\u0212\3\2\2\2\u0212\u0215\5\u008aF\2\u0213\u0214")
        buf.write(u"\t\6\2\2\u0214\u0216\5f\64\2\u0215\u0213\3\2\2\2\u0215")
        buf.write(u"\u0216\3\2\2\2\u0216S\3\2\2\2\u0217\u0224\5$\23\2\u0218")
        buf.write(u"\u0221\7\u0168\2\2\u0219\u021e\5F$\2\u021a\u021b\7\u0165")
        buf.write(u"\2\2\u021b\u021d\5F$\2\u021c\u021a\3\2\2\2\u021d\u0220")
        buf.write(u"\3\2\2\2\u021e\u021c\3\2\2\2\u021e\u021f\3\2\2\2\u021f")
        buf.write(u"\u0222\3\2\2\2\u0220\u021e\3\2\2\2\u0221\u0219\3\2\2")
        buf.write(u"\2\u0221\u0222\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0225")
        buf.write(u"\7\u0167\2\2\u0224\u0218\3\2\2\2\u0224\u0225\3\2\2\2")
        buf.write(u"\u0225\u0249\3\2\2\2\u0226\u0227\7\60\2\2\u0227\u0228")
        buf.write(u"\7\u0168\2\2\u0228\u0229\5F$\2\u0229\u022a\7\u0165\2")
        buf.write(u"\2\u022a\u022b\5\4\3\2\u022b\u022c\7\u0167\2\2\u022c")
        buf.write(u"\u0249\3\2\2\2\u022d\u022e\7\60\2\2\u022e\u022f\7\u0168")
        buf.write(u"\2\2\u022f\u0230\5F$\2\u0230\u0231\7\u0135\2\2\u0231")
        buf.write(u"\u0232\5\n\6\2\u0232\u0233\7\u0167\2\2\u0233\u0249\3")
        buf.write(u"\2\2\2\u0234\u0235\7\"\2\2\u0235\u0236\7\u0168\2\2\u0236")
        buf.write(u"\u0237\5F$\2\u0237\u0238\7\20\2\2\u0238\u0239\5\4\3\2")
        buf.write(u"\u0239\u023a\7\u0167\2\2\u023a\u0249\3\2\2\2\u023b\u023c")
        buf.write(u"\5\30\r\2\u023c\u023e\7\u0168\2\2\u023d\u023f\t\23\2")
        buf.write(u"\2\u023e\u023d\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0244")
        buf.write(u"\3\2\2\2\u0240\u0243\5,\27\2\u0241\u0243\5\u00a8U\2\u0242")
        buf.write(u"\u0240\3\2\2\2\u0242\u0241\3\2\2\2\u0243\u0245\3\2\2")
        buf.write(u"\2\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246")
        buf.write(u"\3\2\2\2\u0246\u0247\7\u0167\2\2\u0247\u0249\3\2\2\2")
        buf.write(u"\u0248\u0217\3\2\2\2\u0248\u0226\3\2\2\2\u0248\u022d")
        buf.write(u"\3\2\2\2\u0248\u0234\3\2\2\2\u0248\u023b\3\2\2\2\u0249")
        buf.write(u"U\3\2\2\2\u024a\u024b\7\u0082\2\2\u024b\u024c\7\37\2")
        buf.write(u"\2\u024c\u0251\5X-\2\u024d\u024e\7\u0165\2\2\u024e\u0250")
        buf.write(u"\5X-\2\u024f\u024d\3\2\2\2\u0250\u0253\3\2\2\2\u0251")
        buf.write(u"\u024f\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0256\3\2\2")
        buf.write(u"\2\u0253\u0251\3\2\2\2\u0254\u0255\7\u0146\2\2\u0255")
        buf.write(u"\u0257\7\u00ef\2\2\u0256\u0254\3\2\2\2\u0256\u0257\3")
        buf.write(u"\2\2\2\u0257W\3\2\2\2\u0258\u025c\5:\36\2\u0259\u025c")
        buf.write(u"\7\u0180\2\2\u025a\u025c\5,\27\2\u025b\u0258\3\2\2\2")
        buf.write(u"\u025b\u0259\3\2\2\2\u025b\u025a\3\2\2\2\u025c\u025e")
        buf.write(u"\3\2\2\2\u025d\u025f\t\24\2\2\u025e\u025d\3\2\2\2\u025e")
        buf.write(u"\u025f\3\2\2\2\u025fY\3\2\2\2\u0260\u0261\7\u0083\2\2")
        buf.write(u"\u0261\u0262\5F$\2\u0262[\3\2\2\2\u0263\u0264\7\u0134")
        buf.write(u"\2\2\u0264\u0265\5d\63\2\u0265\u0267\7\u0168\2\2\u0266")
        buf.write(u"\u0268\5b\62\2\u0267\u0266\3\2\2\2\u0267\u0268\3\2\2")
        buf.write(u"\2\u0268\u0269\3\2\2\2\u0269\u026a\7\u0167\2\2\u026a")
        buf.write(u"\u0278\3\2\2\2\u026b\u026c\7\u008e\2\2\u026c\u026d\5")
        buf.write(u"d\63\2\u026d\u026e\7\u0168\2\2\u026e\u026f\5b\62\2\u026f")
        buf.write(u"\u0270\7\u0167\2\2\u0270\u0278\3\2\2\2\u0271\u0272\7")
        buf.write(u"r\2\2\u0272\u0273\5d\63\2\u0273\u0274\7\u0168\2\2\u0274")
        buf.write(u"\u0275\5b\62\2\u0275\u0276\7\u0167\2\2\u0276\u0278\3")
        buf.write(u"\2\2\2\u0277\u0263\3\2\2\2\u0277\u026b\3\2\2\2\u0277")
        buf.write(u"\u0271\3\2\2\2\u0278]\3\2\2\2\u0279\u027e\5\\/\2\u027a")
        buf.write(u"\u027b\7\u0165\2\2\u027b\u027d\5\\/\2\u027c\u027a\3\2")
        buf.write(u"\2\2\u027d\u0280\3\2\2\2\u027e\u027c\3\2\2\2\u027e\u027f")
        buf.write(u"\3\2\2\2\u027f_\3\2\2\2\u0280\u027e\3\2\2\2\u0281\u0282")
        buf.write(u"\7\u0186\2\2\u0282a\3\2\2\2\u0283\u0288\5`\61\2\u0284")
        buf.write(u"\u0285\7\u0165\2\2\u0285\u0287\5`\61\2\u0286\u0284\3")
        buf.write(u"\2\2\2\u0287\u028a\3\2\2\2\u0288\u0286\3\2\2\2\u0288")
        buf.write(u"\u0289\3\2\2\2\u0289c\3\2\2\2\u028a\u0288\3\2\2\2\u028b")
        buf.write(u"\u0294\t\25\2\2\u028c\u0292\7t\2\2\u028d\u0293\7\u009c")
        buf.write(u"\2\2\u028e\u028f\7\u00da\2\2\u028f\u0293\7\37\2\2\u0290")
        buf.write(u"\u0291\7\u0082\2\2\u0291\u0293\7\37\2\2\u0292\u028d\3")
        buf.write(u"\2\2\2\u0292\u028e\3\2\2\2\u0292\u0290\3\2\2\2\u0293")
        buf.write(u"\u0295\3\2\2\2\u0294\u028c\3\2\2\2\u0294\u0295\3\2\2")
        buf.write(u"\2\u0295e\3\2\2\2\u0296\u0297\7\u0096\2\2\u0297\u0298")
        buf.write(u"\5F$\2\u0298\u0299\5\b\5\2\u0299g\3\2\2\2\u029a\u029b")
        buf.write(u"\7\u00d8\2\2\u029b\u029f\5F$\2\u029c\u029d\7\u0135\2")
        buf.write(u"\2\u029d\u029f\5\66\34\2\u029e\u029a\3\2\2\2\u029e\u029c")
        buf.write(u"\3\2\2\2\u029fi\3\2\2\2\u02a0\u02a4\7\u00ae\2\2\u02a1")
        buf.write(u"\u02a2\5n8\2\u02a2\u02a3\7\u0165\2\2\u02a3\u02a5\3\2")
        buf.write(u"\2\2\u02a4\u02a1\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a6")
        buf.write(u"\3\2\2\2\u02a6\u02ac\5p9\2\u02a7\u02a8\5p9\2\u02a8\u02a9")
        buf.write(u"\7\u00d5\2\2\u02a9\u02aa\5n8\2\u02aa\u02ac\3\2\2\2\u02ab")
        buf.write(u"\u02a0\3\2\2\2\u02ab\u02a7\3\2\2\2\u02ack\3\2\2\2\u02ad")
        buf.write(u"\u02ae\7\u00c0\2\2\u02ae\u02b3\5:\36\2\u02af\u02b0\7")
        buf.write(u"\u0165\2\2\u02b0\u02b2\5:\36\2\u02b1\u02af\3\2\2\2\u02b2")
        buf.write(u"\u02b5\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b3\u02b4\3\2\2")
        buf.write(u"\2\u02b4\u02b6\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b6\u02b7")
        buf.write(u"\7\t\2\2\u02b7\u02b9\5F$\2\u02b8\u02ba\5\6\4\2\u02b9")
        buf.write(u"\u02b8\3\2\2\2\u02b9\u02ba\3\2\2\2\u02bam\3\2\2\2\u02bb")
        buf.write(u"\u02bc\7\u0180\2\2\u02bco\3\2\2\2\u02bd\u02be\7\u0180")
        buf.write(u"\2\2\u02beq\3\2\2\2\u02bf\u02c0\7\u00da\2\2\u02c0\u02c1")
        buf.write(u"\7\37\2\2\u02c1\u02c6\5t;\2\u02c2\u02c3\7\u0165\2\2\u02c3")
        buf.write(u"\u02c5\5t;\2\u02c4\u02c2\3\2\2\2\u02c5\u02c8\3\2\2\2")
        buf.write(u"\u02c6\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7s\3\2\2")
        buf.write(u"\2\u02c8\u02c6\3\2\2\2\u02c9\u02d1\5X-\2\u02ca\u02cc")
        buf.write(u"\t\24\2\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc")
        buf.write(u"\u02d2\3\2\2\2\u02cd\u02ce\7\u00d3\2\2\u02ce\u02d0\t")
        buf.write(u"\26\2\2\u02cf\u02cd\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0")
        buf.write(u"\u02d2\3\2\2\2\u02d1\u02cb\3\2\2\2\u02d1\u02cf\3\2\2")
        buf.write(u"\2\u02d2\u02d8\3\2\2\2\u02d3\u02d4\5X-\2\u02d4\u02d5")
        buf.write(u"\7\u0135\2\2\u02d5\u02d6\t\27\2\2\u02d6\u02d8\3\2\2\2")
        buf.write(u"\u02d7\u02c9\3\2\2\2\u02d7\u02d3\3\2\2\2\u02d8u\3\2\2")
        buf.write(u"\2\u02d9\u02da\7\u00dc\2\2\u02da\u02db\7\u0168\2\2\u02db")
        buf.write(u"\u02dc\5z>\2\u02dc\u02dd\7\u0167\2\2\u02ddw\3\2\2\2\u02de")
        buf.write(u"\u02df\7\u0186\2\2\u02dfy\3\2\2\2\u02e0\u02e5\5x=\2\u02e1")
        buf.write(u"\u02e2\7\u0165\2\2\u02e2\u02e4\5x=\2\u02e3\u02e1\3\2")
        buf.write(u"\2\2\u02e4\u02e7\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e5\u02e6")
        buf.write(u"\3\2\2\2\u02e6{\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e8\u02ea")
        buf.write(u"\7\u00cf\2\2\u02e9\u02e8\3\2\2\2\u02e9\u02ea\3\2\2\2")
        buf.write(u"\u02ea\u0306\3\2\2\2\u02eb\u02ee\7\u0097\2\2\u02ec\u02ef")
        buf.write(u"\5\u008eH\2\u02ed\u02ef\5H%\2\u02ee\u02ec\3\2\2\2\u02ee")
        buf.write(u"\u02ed\3\2\2\2\u02ef\u0307\3\2\2\2\u02f0\u02f1\7\u00ad")
        buf.write(u"\2\2\u02f1\u02f4\5\u008aF\2\u02f2\u02f3\7d\2\2\u02f3")
        buf.write(u"\u02f5\5\u008aF\2\u02f4\u02f2\3\2\2\2\u02f4\u02f5\3\2")
        buf.write(u"\2\2\u02f5\u0307\3\2\2\2\u02f6\u02f9\7\u00e9\2\2\u02f7")
        buf.write(u"\u02fa\5,\27\2\u02f8\u02fa\5\u00a8U\2\u02f9\u02f7\3\2")
        buf.write(u"\2\2\u02f9\u02f8\3\2\2\2\u02fa\u0307\3\2\2\2\u02fb\u02fd")
        buf.write(u"\7\25\2\2\u02fc\u02fe\7\u0117\2\2\u02fd\u02fc\3\2\2\2")
        buf.write(u"\u02fd\u02fe\3\2\2\2\u02fe\u0301\3\2\2\2\u02ff\u0302")
        buf.write(u"\5,\27\2\u0300\u0302\5\u00a8U\2\u0301\u02ff\3\2\2\2\u0301")
        buf.write(u"\u0300\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0304\7\u0159")
        buf.write(u"\2\2\u0304\u0305\5\u0080A\2\u0305\u0307\3\2\2\2\u0306")
        buf.write(u"\u02eb\3\2\2\2\u0306\u02f0\3\2\2\2\u0306\u02f6\3\2\2")
        buf.write(u"\2\u0306\u02fb\3\2\2\2\u0307}\3\2\2\2\u0308\u0309\7\u0102")
        buf.write(u"\2\2\u0309\u030c\7\u00ad\2\2\u030a\u030d\5,\27\2\u030b")
        buf.write(u"\u030d\5\u00a8U\2\u030c\u030a\3\2\2\2\u030c\u030b\3\2")
        buf.write(u"\2\2\u030d\177\3\2\2\2\u030e\u0311\5,\27\2\u030f\u0311")
        buf.write(u"\5\u00a8U\2\u0310\u030e\3\2\2\2\u0310\u030f\3\2\2\2\u0311")
        buf.write(u"\u0314\3\2\2\2\u0312\u0315\5|?\2\u0313\u0315\5~@\2\u0314")
        buf.write(u"\u0312\3\2\2\2\u0314\u0313\3\2\2\2\u0314\u0315\3\2\2")
        buf.write(u"\2\u0315\u0081\3\2\2\2\u0316\u0317\5\u0088E\2\u0317\u0318")
        buf.write(u"\7\u0162\2\2\u0318\u0083\3\2\2\2\u0319\u031a\7\u0186")
        buf.write(u"\2\2\u031a\u0085\3\2\2\2\u031b\u0320\5<\37\2\u031c\u031d")
        buf.write(u"\7\u0165\2\2\u031d\u031f\5<\37\2\u031e\u031c\3\2\2\2")
        buf.write(u"\u031f\u0322\3\2\2\2\u0320\u031e\3\2\2\2\u0320\u0321")
        buf.write(u"\3\2\2\2\u0321\u0330\3\2\2\2\u0322\u0320\3\2\2\2\u0323")
        buf.write(u"\u032d\7\u0166\2\2\u0324\u0325\7\u0165\2\2\u0325\u032a")
        buf.write(u"\5<\37\2\u0326\u0327\7\u0165\2\2\u0327\u0329\5<\37\2")
        buf.write(u"\u0328\u0326\3\2\2\2\u0329\u032c\3\2\2\2\u032a\u0328")
        buf.write(u"\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u032e\3\2\2\2\u032c")
        buf.write(u"\u032a\3\2\2\2\u032d\u0324\3\2\2\2\u032d\u032e\3\2\2")
        buf.write(u"\2\u032e\u0330\3\2\2\2\u032f\u031b\3\2\2\2\u032f\u0323")
        buf.write(u"\3\2\2\2\u0330\u0087\3\2\2\2\u0331\u0339\5(\25\2\u0332")
        buf.write(u"\u0334\7\u012d\2\2\u0333\u0335\7\n\2\2\u0334\u0333\3")
        buf.write(u"\2\2\2\u0334\u0335\3\2\2\2\u0335\u0336\3\2\2\2\u0336")
        buf.write(u"\u0338\5(\25\2\u0337\u0332\3\2\2\2\u0338\u033b\3\2\2")
        buf.write(u"\2\u0339\u0337\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u0089")
        buf.write(u"\3\2\2\2\u033b\u0339\3\2\2\2\u033c\u0349\5&\24\2\u033d")
        buf.write(u"\u0349\5H%\2\u033e\u0349\5:\36\2\u033f\u0349\5T+\2\u0340")
        buf.write(u"\u0341\7\u00f1\2\2\u0341\u0349\5H%\2\u0342\u0349\5\u008e")
        buf.write(u"H\2\u0343\u0344\7g\2\2\u0344\u0349\5\u008eH\2\u0345\u0349")
        buf.write(u"\5f\64\2\u0346\u0349\5l\67\2\u0347\u0349\5\60\31\2\u0348")
        buf.write(u"\u033c\3\2\2\2\u0348\u033d\3\2\2\2\u0348\u033e\3\2\2")
        buf.write(u"\2\u0348\u033f\3\2\2\2\u0348\u0340\3\2\2\2\u0348\u0342")
        buf.write(u"\3\2\2\2\u0348\u0343\3\2\2\2\u0348\u0345\3\2\2\2\u0348")
        buf.write(u"\u0346\3\2\2\2\u0348\u0347\3\2\2\2\u0349\u008b\3\2\2")
        buf.write(u"\2\u034a\u034b\7\u016a\2\2\u034b\u034e\7\u0180\2\2\u034c")
        buf.write(u"\u034d\7\u0163\2\2\u034d\u034f\7\u0180\2\2\u034e\u034c")
        buf.write(u"\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0350\3\2\2\2\u0350")
        buf.write(u"\u0352\7\u0169\2\2\u0351\u034a\3\2\2\2\u0352\u0353\3")
        buf.write(u"\2\2\2\u0353\u0351\3\2\2\2\u0353\u0354\3\2\2\2\u0354")
        buf.write(u"\u008d\3\2\2\2\u0355\u0356\7\u0168\2\2\u0356\u0357\5")
        buf.write(u"\u0088E\2\u0357\u0358\7\u0167\2\2\u0358\u008f\3\2\2\2")
        buf.write(u"\u0359\u035b\5\u00a0Q\2\u035a\u035c\5v<\2\u035b\u035a")
        buf.write(u"\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035e\3\2\2\2\u035d")
        buf.write(u"\u035f\5*\26\2\u035e\u035d\3\2\2\2\u035e\u035f\3\2\2")
        buf.write(u"\2\u035f\u0361\3\2\2\2\u0360\u0362\5^\60\2\u0361\u0360")
        buf.write(u"\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0374\3\2\2\2\u0363")
        buf.write(u"\u0364\5\u008eH\2\u0364\u0365\5*\26\2\u0365\u0374\3\2")
        buf.write(u"\2\2\u0366\u0367\7\u0168\2\2\u0367\u0368\5\u009eP\2\u0368")
        buf.write(u"\u0369\7\u0167\2\2\u0369\u0374\3\2\2\2\u036a\u036b\7")
        buf.write(u"\u00d6\2\2\u036b\u036c\5\u009cO\2\u036c\u036d\7\u00ab")
        buf.write(u"\2\2\u036d\u036e\7\u00db\2\2\u036e\u036f\7\u009c\2\2")
        buf.write(u"\u036f\u0370\5\u009cO\2\u0370\u0371\7\u00d8\2\2\u0371")
        buf.write(u"\u0372\5F$\2\u0372\u0374\3\2\2\2\u0373\u0359\3\2\2\2")
        buf.write(u"\u0373\u0363\3\2\2\2\u0373\u0366\3\2\2\2\u0373\u036a")
        buf.write(u"\3\2\2\2\u0374\u0091\3\2\2\2\u0375\u0376\7\u0186\2\2")
        buf.write(u"\u0376\u0093\3\2\2\2\u0377\u0382\5\u0096L\2\u0378\u037a")
        buf.write(u"\t\30\2\2\u0379\u0378\3\2\2\2\u0379\u037a\3\2\2\2\u037a")
        buf.write(u"\u037b\3\2\2\2\u037b\u037c\7\u009c\2\2\u037c\u037e\5")
        buf.write(u"\u0090I\2\u037d\u037f\5h\65\2\u037e\u037d\3\2\2\2\u037e")
        buf.write(u"\u037f\3\2\2\2\u037f\u0381\3\2\2\2\u0380\u0379\3\2\2")
        buf.write(u"\2\u0381\u0384\3\2\2\2\u0382\u0380\3\2\2\2\u0382\u0383")
        buf.write(u"\3\2\2\2\u0383\u0095\3\2\2\2\u0384\u0382\3\2\2\2\u0385")
        buf.write(u"\u038c\5\u0098M\2\u0386\u0387\7\u010f\2\2\u0387\u038a")
        buf.write(u"\5\u0090I\2\u0388\u0389\7\u00d8\2\2\u0389\u038b\5F$\2")
        buf.write(u"\u038a\u0388\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038d")
        buf.write(u"\3\2\2\2\u038c\u0386\3\2\2\2\u038c\u038d\3\2\2\2\u038d")
        buf.write(u"\u0097\3\2\2\2\u038e\u0399\5\u009aN\2\u038f\u0391\t\31")
        buf.write(u"\2\2\u0390\u0392\7\u00db\2\2\u0391\u0390\3\2\2\2\u0391")
        buf.write(u"\u0392\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0394\7\u009c")
        buf.write(u"\2\2\u0394\u0395\5\u009aN\2\u0395\u0396\5h\65\2\u0396")
        buf.write(u"\u0398\3\2\2\2\u0397\u038f\3\2\2\2\u0398\u039b\3\2\2")
        buf.write(u"\2\u0399\u0397\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u0099")
        buf.write(u"\3\2\2\2\u039b\u0399\3\2\2\2\u039c\u03a6\5\u0090I\2\u039d")
        buf.write(u"\u03a2\7\u00ce\2\2\u039e\u03a0\t\31\2\2\u039f\u03a1\7")
        buf.write(u"\u00db\2\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1")
        buf.write(u"\u03a3\3\2\2\2\u03a2\u039e\3\2\2\2\u03a2\u03a3\3\2\2")
        buf.write(u"\2\u03a3\u03a4\3\2\2\2\u03a4\u03a5\7\u009c\2\2\u03a5")
        buf.write(u"\u03a7\5\u0090I\2\u03a6\u039d\3\2\2\2\u03a6\u03a7\3\2")
        buf.write(u"\2\2\u03a7\u009b\3\2\2\2\u03a8\u03b2\5\u0094K\2\u03a9")
        buf.write(u"\u03aa\7\u0168\2\2\u03aa\u03ab\5\u00a2R\2\u03ab\u03ac")
        buf.write(u"\7\u0167\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03af\5*\26\2")
        buf.write(u"\u03ae\u03b0\5\66\34\2\u03af\u03ae\3\2\2\2\u03af\u03b0")
        buf.write(u"\3\2\2\2\u03b0\u03b2\3\2\2\2\u03b1\u03a8\3\2\2\2\u03b1")
        buf.write(u"\u03a9\3\2\2\2\u03b2\u009d\3\2\2\2\u03b3\u03b8\5\u009c")
        buf.write(u"O\2\u03b4\u03b5\7\u0165\2\2\u03b5\u03b7\5\u009cO\2\u03b6")
        buf.write(u"\u03b4\3\2\2\2\u03b7\u03ba\3\2\2\2\u03b8\u03b6\3\2\2")
        buf.write(u"\2\u03b8\u03b9\3\2\2\2\u03b9\u009f\3\2\2\2\u03ba\u03b8")
        buf.write(u"\3\2\2\2\u03bb\u03bc\5\u0084C\2\u03bc\u03bd\7\u0164\2")
        buf.write(u"\2\u03bd\u03bf\3\2\2\2\u03be\u03bb\3\2\2\2\u03be\u03bf")
        buf.write(u"\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1\5\u0092J\2\u03c1")
        buf.write(u"\u00a1\3\2\2\2\u03c2\u03c3\7\u013b\2\2\u03c3\u03c8\5")
        buf.write(u"H%\2\u03c4\u03c5\7\u0165\2\2\u03c5\u03c7\5H%\2\u03c6")
        buf.write(u"\u03c4\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8\u03c6\3\2\2")
        buf.write(u"\2\u03c8\u03c9\3\2\2\2\u03c9\u00a3\3\2\2\2\u03ca\u03c8")
        buf.write(u"\3\2\2\2\u03cb\u03cc\7\u0145\2\2\u03cc\u03cd\5F$\2\u03cd")
        buf.write(u"\u00a5\3\2\2\2\u03ce\u03cf\t\32\2\2\u03cf\u00a7\3\2\2")
        buf.write(u"\2\u03d0\u03d3\5\u00ba^\2\u03d1\u03d3\5\u00aaV\2\u03d2")
        buf.write(u"\u03d0\3\2\2\2\u03d2\u03d1\3\2\2\2\u03d3\u041b\3\2\2")
        buf.write(u"\2\u03d4\u03d7\5\u00aaV\2\u03d5\u03d7\5\u008aF\2\u03d6")
        buf.write(u"\u03d4\3\2\2\2\u03d6\u03d5\3\2\2\2\u03d7\u03d8\3\2\2")
        buf.write(u"\2\u03d8\u03d9\5\u00a6T\2\u03d9\u03da\5\u00ba^\2\u03da")
        buf.write(u"\u041b\3\2\2\2\u03db\u03dc\5\u00ba^\2\u03dc\u03dd\7\u015b")
        buf.write(u"\2\2\u03dd\u03de\5\u00ba^\2\u03de\u041b\3\2\2\2\u03df")
        buf.write(u"\u03e0\5\u00ba^\2\u03e0\u03e1\5\u00a6T\2\u03e1\u03e2")
        buf.write(u"\5\u00ba^\2\u03e2\u041b\3\2\2\2\u03e3\u03ea\5\u00aeX")
        buf.write(u"\2\u03e4\u03e5\5\u008aF\2\u03e5\u03e6\7\u017c\2\2\u03e6")
        buf.write(u"\u03e7\5\u00aeX\2\u03e7\u03ea\3\2\2\2\u03e8\u03ea\5\u008a")
        buf.write(u"F\2\u03e9\u03e3\3\2\2\2\u03e9\u03e4\3\2\2\2\u03e9\u03e8")
        buf.write(u"\3\2\2\2\u03ea\u041b\3\2\2\2\u03eb\u03ef\5\u00aaV\2\u03ec")
        buf.write(u"\u03ef\5\u00acW\2\u03ed\u03ef\5\u008aF\2\u03ee\u03eb")
        buf.write(u"\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ed\3\2\2\2\u03ef")
        buf.write(u"\u03f0\3\2\2\2\u03f0\u03f4\7\u017d\2\2\u03f1\u03f5\5")
        buf.write(u"\u00aaV\2\u03f2\u03f5\5\u00acW\2\u03f3\u03f5\5\u008a")
        buf.write(u"F\2\u03f4\u03f1\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f4\u03f3")
        buf.write(u"\3\2\2\2\u03f5\u041b\3\2\2\2\u03f6\u03fb\7\u017e\2\2")
        buf.write(u"\u03f7\u03fc\5\u00acW\2\u03f8\u03fc\5\u00b2Z\2\u03f9")
        buf.write(u"\u03fc\5\u00b4[\2\u03fa\u03fc\5\u008aF\2\u03fb\u03f7")
        buf.write(u"\3\2\2\2\u03fb\u03f8\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fb")
        buf.write(u"\u03fa\3\2\2\2\u03fc\u041b\3\2\2\2\u03fd\u0401\7\u017f")
        buf.write(u"\2\2\u03fe\u0402\5\u00acW\2\u03ff\u0402\5\u00b0Y\2\u0400")
        buf.write(u"\u0402\5\u008aF\2\u0401\u03fe\3\2\2\2\u0401\u03ff\3\2")
        buf.write(u"\2\2\u0401\u0400\3\2\2\2\u0402\u041b\3\2\2\2\u0403\u0407")
        buf.write(u"\7\u016c\2\2\u0404\u0408\5\u00aeX\2\u0405\u0408\5\u00b6")
        buf.write(u"\\\2\u0406\u0408\5\u008aF\2\u0407\u0404\3\2\2\2\u0407")
        buf.write(u"\u0405\3\2\2\2\u0407\u0406\3\2\2\2\u0408\u041b\3\2\2")
        buf.write(u"\2\u0409\u0411\5\u00aaV\2\u040a\u0411\5\u00acW\2\u040b")
        buf.write(u"\u0411\5\u00aeX\2\u040c\u0411\5\u00b0Y\2\u040d\u0411")
        buf.write(u"\5\u00b4[\2\u040e\u0411\5\u00b6\\\2\u040f\u0411\5\u008a")
        buf.write(u"F\2\u0410\u0409\3\2\2\2\u0410\u040a\3\2\2\2\u0410\u040b")
        buf.write(u"\3\2\2\2\u0410\u040c\3\2\2\2\u0410\u040d\3\2\2\2\u0410")
        buf.write(u"\u040e\3\2\2\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2")
        buf.write(u"\2\u0411\u0416\3\2\2\2\u0412\u0414\t\6\2\2\u0413\u0412")
        buf.write(u"\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0415\3\2\2\2\u0415")
        buf.write(u"\u0417\5\u00b8]\2\u0416\u0413\3\2\2\2\u0417\u0418\3\2")
        buf.write(u"\2\2\u0418\u0416\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u041b")
        buf.write(u"\3\2\2\2\u041a\u03d2\3\2\2\2\u041a\u03d6\3\2\2\2\u041a")
        buf.write(u"\u03db\3\2\2\2\u041a\u03df\3\2\2\2\u041a\u03e9\3\2\2")
        buf.write(u"\2\u041a\u03ee\3\2\2\2\u041a\u03f6\3\2\2\2\u041a\u03fd")
        buf.write(u"\3\2\2\2\u041a\u0403\3\2\2\2\u041a\u0410\3\2\2\2\u041b")
        buf.write(u"\u00a9\3\2\2\2\u041c\u041d\7\u014b\2\2\u041d\u041e\7")
        buf.write(u"\u0168\2\2\u041e\u041f\5,\27\2\u041f\u0420\7\u0165\2")
        buf.write(u"\2\u0420\u0421\5,\27\2\u0421\u0422\7\u0167\2\2\u0422")
        buf.write(u"\u00ab\3\2\2\2\u0423\u0424\7\u014c\2\2\u0424\u0425\7")
        buf.write(u"\u0168\2\2\u0425\u0426\5\u00aaV\2\u0426\u0427\7\u0165")
        buf.write(u"\2\2\u0427\u0428\5,\27\2\u0428\u0429\7\u0167\2\2\u0429")
        buf.write(u"\u00ad\3\2\2\2\u042a\u042b\7\u014d\2\2\u042b\u042c\7")
        buf.write(u"\u0168\2\2\u042c\u042d\5\u00aaV\2\u042d\u042e\7\u0165")
        buf.write(u"\2\2\u042e\u042f\5\u00aaV\2\u042f\u0430\7\u0167\2\2\u0430")
        buf.write(u"\u0439\3\2\2\2\u0431\u0432\7\u014d\2\2\u0432\u0433\7")
        buf.write(u"\u0168\2\2\u0433\u0434\5\u00b8]\2\u0434\u0435\7\u0165")
        buf.write(u"\2\2\u0435\u0436\5,\27\2\u0436\u0437\7\u0167\2\2\u0437")
        buf.write(u"\u0439\3\2\2\2\u0438\u042a\3\2\2\2\u0438\u0431\3\2\2")
        buf.write(u"\2\u0439\u00af\3\2\2\2\u043a\u043b\7\u014e\2\2\u043b")
        buf.write(u"\u043c\7\u0168\2\2\u043c\u043d\5\u00aaV\2\u043d\u043e")
        buf.write(u"\7\u0165\2\2\u043e\u043f\5,\27\2\u043f\u0440\7\u0165")
        buf.write(u"\2\2\u0440\u0441\5,\27\2\u0441\u0442\7\u0165\2\2\u0442")
        buf.write(u"\u0443\5,\27\2\u0443\u0444\7\u0167\2\2\u0444\u00b1\3")
        buf.write(u"\2\2\2\u0445\u0446\7\u0151\2\2\u0446\u0447\7\u0168\2")
        buf.write(u"\2\u0447\u0448\5\u00aaV\2\u0448\u0449\7\u0165\2\2\u0449")
        buf.write(u"\u044a\5\u00aaV\2\u044a\u044b\7\u0167\2\2\u044b\u00b3")
        buf.write(u"\3\2\2\2\u044c\u044d\7\u014f\2\2\u044d\u0458\7\u0185")
        buf.write(u"\2\2\u044e\u044f\7\u014f\2\2\u044f\u0450\7\u0168\2\2")
        buf.write(u"\u0450\u0451\5:\36\2\u0451\u0452\7\u0167\2\2\u0452\u0458")
        buf.write(u"\3\2\2\2\u0453\u0454\7\u014f\2\2\u0454\u0455\7\u0168")
        buf.write(u"\2\2\u0455\u0456\7\u0185\2\2\u0456\u0458\7\u0167\2\2")
        buf.write(u"\u0457\u044c\3\2\2\2\u0457\u044e\3\2\2\2\u0457\u0453")
        buf.write(u"\3\2\2\2\u0458\u00b5\3\2\2\2\u0459\u045a\7\u0150\2\2")
        buf.write(u"\u045a\u0461\7\u0185\2\2\u045b\u045c\7\u0150\2\2\u045c")
        buf.write(u"\u045d\7\u0168\2\2\u045d\u045e\5:\36\2\u045e\u045f\7")
        buf.write(u"\u0167\2\2\u045f\u0461\3\2\2\2\u0460\u0459\3\2\2\2\u0460")
        buf.write(u"\u045b\3\2\2\2\u0461\u00b7\3\2\2\2\u0462\u0463\7\u0152")
        buf.write(u"\2\2\u0463\u0464\7\u0168\2\2\u0464\u0465\5,\27\2\u0465")
        buf.write(u"\u0466\7\u0165\2\2\u0466\u0467\5,\27\2\u0467\u0468\7")
        buf.write(u"\u0165\2\2\u0468\u0469\5,\27\2\u0469\u046a\7\u0165\2")
        buf.write(u"\2\u046a\u046b\7\u0184\2\2\u046b\u046c\7\u0167\2\2\u046c")
        buf.write(u"\u00b9\3\2\2\2\u046d\u0475\5\u00acW\2\u046e\u0475\5\u00ae")
        buf.write(u"X\2\u046f\u0475\5\u00b0Y\2\u0470\u0475\5\u00b2Z\2\u0471")
        buf.write(u"\u0475\5\u00b4[\2\u0472\u0475\5\u00b6\\\2\u0473\u0475")
        buf.write(u"\5\u008aF\2\u0474\u046d\3\2\2\2\u0474\u046e\3\2\2\2\u0474")
        buf.write(u"\u046f\3\2\2\2\u0474\u0470\3\2\2\2\u0474\u0471\3\2\2")
        buf.write(u"\2\u0474\u0472\3\2\2\2\u0474\u0473\3\2\2\2\u0475\u00bb")
        buf.write(u"\3\2\2\2\u0091\u00c2\u00c8\u00d1\u00d4\u00d8\u00dd\u00e1")
        buf.write(u"\u00ea\u00f2\u00ff\u0119\u0121\u0125\u0128\u012b\u012e")
        buf.write(u"\u0131\u0134\u0137\u013a\u0140\u0143\u0146\u0149\u014b")
        buf.write(u"\u014e\u0151\u0159\u015c\u015f\u0166\u016c\u016f\u0173")
        buf.write(u"\u0178\u017c\u0187\u0191\u0199\u01a3\u01a8\u01ac\u01b4")
        buf.write(u"\u01b7\u01b9\u01c0\u01c8\u01cc\u01d3\u01d9\u01db\u01de")
        buf.write(u"\u01e0\u01e7\u01f0\u01f8\u01fd\u0204\u020c\u0210\u0215")
        buf.write(u"\u021e\u0221\u0224\u023e\u0242\u0244\u0248\u0251\u0256")
        buf.write(u"\u025b\u025e\u0267\u0277\u027e\u0288\u0292\u0294\u029e")
        buf.write(u"\u02a4\u02ab\u02b3\u02b9\u02c6\u02cb\u02cf\u02d1\u02d7")
        buf.write(u"\u02e5\u02e9\u02ee\u02f4\u02f9\u02fd\u0301\u0306\u030c")
        buf.write(u"\u0310\u0314\u0320\u032a\u032d\u032f\u0334\u0339\u0348")
        buf.write(u"\u034e\u0353\u035b\u035e\u0361\u0373\u0379\u037e\u0382")
        buf.write(u"\u038a\u038c\u0391\u0399\u03a0\u03a2\u03a6\u03af\u03b1")
        buf.write(u"\u03b8\u03be\u03c8\u03d2\u03d6\u03e9\u03ee\u03f4\u03fb")
        buf.write(u"\u0401\u0407\u0410\u0413\u0418\u041a\u0438\u0457\u0460")
        buf.write(u"\u0474")
        return buf.getvalue()


class PostgreSQLParser ( Parser ):

    grammarFileName = "PostgreSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"'USER'", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"'=>'", u"<INVALID>", u"<INVALID>", u"'<='", u"'>='", 
                     u"':='", u"'<<'", u"'>>'", u"';'", u"':'", u"'.'", 
                     u"','", u"'*'", u"')'", u"'('", u"']'", u"'['", u"'+'", 
                     u"'-'", u"'~'", u"'|'", u"'&'", u"'^'", u"'`'", u"'>'", 
                     u"'<'", u"'@'", u"'<@'", u"'@>'", u"'!@'", u"'!<@'", 
                     u"'!~'", u"'!@>'", u"'!&&'", u"'#'", u"'<->'", u"'@-@'", 
                     u"'@@'" ]

    symbolicNames = [ u"<INVALID>", u"ABS", u"ACOS", u"ADDDATE", u"ADDTIME", 
                      u"AES_DECRYPT", u"AES_ENCRYPT", u"AGAINST", u"ALL", 
                      u"ANY", u"ARMSCII8", u"ASC", u"ASCII_SYM", u"ASIN", 
                      u"AS_SYM", u"ATAN", u"ATAN2", u"AVG", u"BENCHMARK", 
                      u"BETWEEN", u"BIG5", u"BIN", u"BINARY", u"BIT_AND", 
                      u"BIT_COUNT", u"BIT_LENGTH", u"BIT_OR", u"BIT_XOR", 
                      u"BOOLEAN_SYM", u"BY_SYM", u"CACHE_SYM", u"CASE_SYM", 
                      u"CAST_SYM", u"CBRT", u"CEIL", u"CEILING", u"CHAR", 
                      u"CHARSET", u"CHAR_LENGTH", u"COERCIBILITY", u"COLLATE_SYM", 
                      u"COLLATION", u"CONCAT", u"CONCAT_WS", u"CONNECTION_ID", 
                      u"CONV", u"CONVERT_SYM", u"CONVERT_TZ", u"COS", u"COT", 
                      u"COUNT", u"CP1250", u"CP1251", u"CP1256", u"CP1257", 
                      u"CP850", u"CP852", u"CP866", u"CP932", u"CRC32", 
                      u"CROSECOND", u"CROSS", u"CURDATE", u"CURRENT_USER", 
                      u"CURTIME", u"DATABASE", u"DATEDIFF", u"DATETIME", 
                      u"DATE_ADD", u"DATE_FORMAT", u"DATE_SUB", u"DATE_SYM", 
                      u"DAYNAME", u"DAYOFMONTH", u"DAYOFWEEK", u"DAYOFYEAR", 
                      u"DAY_HOUR", u"DAY_MICROSECOND", u"DAY_MINUTE", u"DAY_SECOND", 
                      u"DAY_SYM", u"DEC8", u"DECIMAL_SYM", u"DECODE", u"DEFAULT", 
                      u"DEGREES", u"DESC", u"DES_DECRYPT", u"DES_ENCRYPT", 
                      u"DIV", u"DISTINCT", u"DISTINCTROW", u"DOUBLE_PRECISION_SYM", 
                      u"ELSE_SYM", u"ELT", u"ENCODE", u"ENCRYPT", u"END_SYM", 
                      u"ESCAPE_SYM", u"EUCJPMS", u"EUCKR", u"EXISTS", u"EXP", 
                      u"EXPANSION_SYM", u"EXPORT_SET", u"EXTRACT", u"FALSE_SYM", 
                      u"FIELD", u"FIND_IN_SET", u"FIRST_SYM", u"FLOAT", 
                      u"FLOOR", u"FORCE_SYM", u"FORMAT", u"FOR_SYM", u"FOUND_ROWS", 
                      u"FROM", u"FROM_BASE64", u"FROM_DAYS", u"FROM_UNIXTIME", 
                      u"GB2312", u"GBK", u"GEOSTD8", u"GET_FORMAT", u"GET_LOCK", 
                      u"GREATEST", u"GREEK", u"GROUP_CONCAT", u"GROUP_SYM", 
                      u"HAVING", u"HEBREW", u"HEX", u"HIGH_PRIORITY", u"HOUR", 
                      u"HOUR_MICROSECOND", u"HOUR_MINUTE", u"HOUR_SECOND", 
                      u"HP8", u"IF", u"IFNULL", u"IGNORE_SYM", u"INDEX_SYM", 
                      u"INET_ATON", u"INET_NTOA", u"INNER_SYM", u"INSERT", 
                      u"INSTR", u"INTEGER_SYM", u"INTERVAL_SYM", u"IN_SYM", 
                      u"IS_FREE_LOCK", u"ISNULL", u"IS_SYM", u"IS_USED_LOCK", 
                      u"JOIN_SYM", u"KEYBCS2", u"KEY_SYM", u"KOI8R", u"KOI8U", 
                      u"LANGUAGE", u"LAST_SYM", u"LAST_DAY", u"LAST_INSERT_ID", 
                      u"LATIN1", u"LATIN1_BIN", u"LATIN1_GENERAL_CS", u"LATIN2", 
                      u"LATIN5", u"LATIN7", u"LEFT", u"LENGTH", u"LIKE_SYM", 
                      u"LIMIT", u"LN", u"LOAD", u"LOAD_FILE", u"LOCATE", 
                      u"LOCK", u"LOG", u"LOG10", u"LOG2", u"LOWER", u"LPAD", 
                      u"LTRIM", u"MACCE", u"MACROMAN", u"MAKEDATE", u"MAKETIME", 
                      u"MAKE_SET", u"MASTER_POS_WAIT", u"MATCH", u"MAX_SYM", 
                      u"MD5", u"MICROSECOND", u"MID", u"MINUTE", u"MINUTE_MICROSECOND", 
                      u"MINUTE_SECOND", u"MIN_SYM", u"MOD", u"MODE_SYM", 
                      u"MONTH", u"MONTHNAME", u"NAME_CONST", u"NATURAL", 
                      u"NOT_SYM", u"NOTNULL", u"NOW", u"NULL_SYM", u"NULLS_SYM", 
                      u"OCT", u"OFFSET_SYM", u"OJ_SYM", u"OLD_PASSWORD", 
                      u"ON", u"ORD", u"ORDER_SYM", u"OUTER", u"PARTITION_SYM", 
                      u"PASSWORD", u"PERIOD_ADD", u"PERIOD_DIFF", u"PI", 
                      u"POW", u"POWER", u"QUARTER", u"QUERY_SYM", u"QUOTE", 
                      u"RADIANS", u"RANDOM", u"REAL", u"REGEXP", u"RELEASE_LOCK", 
                      u"REPEAT", u"REPLACE", u"REVERSE", u"RIGHT", u"ROLLUP_SYM", 
                      u"ROUND", u"ROW_SYM", u"RPAD", u"RTRIM", u"SCHEMA", 
                      u"SECOND", u"SECOND_MICROSECOND", u"SEC_TO_TIME", 
                      u"SELECT", u"SESSION_USER", u"SET_SYM", u"SHARE_SYM", 
                      u"SIGN", u"SIGNED_SYM", u"SIN", u"SJIS", u"SLEEP", 
                      u"SOUNDEX", u"SOUNDS_SYM", u"SPACE", u"SQL_BIG_RESULT", 
                      u"SQL_BUFFER_RESULT", u"SQL_CACHE_SYM", u"SQL_CALC_FOUND_ROWS", 
                      u"SQL_NO_CACHE_SYM", u"SQL_SMALL_RESULT", u"SQRT", 
                      u"STD", u"STDDEV", u"STDDEV_POP", u"STDDEV_SAMP", 
                      u"STRAIGHT_JOIN", u"STRCMP", u"STR_TO_DATE", u"SUBSTRING", 
                      u"SUBSTRING_INDEX", u"SUBTIME", u"SUM", u"SWE7", u"SYMMETRIC", 
                      u"SYSDATE", u"SYSTEM_USER", u"TAN", u"THEN_SYM", u"TIMEDIFF", 
                      u"TIMESTAMP", u"TIMESTAMPADD", u"TIMESTAMPDIFF", u"TIME_FORMAT", 
                      u"TIME_SYM", u"TIME_TO_SEC", u"TIS620", u"TO_BASE64", 
                      u"TO_DAYS", u"TO_SECONDS", u"TRIM", u"TRUE_SYM", u"TRUNCATE", 
                      u"UCS2", u"UJIS", u"UNHEX", u"UNION_SYM", u"UNIX_TIMESTAMP", 
                      u"UNSIGNED_SYM", u"UPDATE", u"UPPER", u"USE", u"USER", 
                      u"USE_SYM", u"USING_SYM", u"UTC_DATE", u"UTC_TIME", 
                      u"UTC_TIMESTAMP", u"UTF8", u"UUID", u"VALUES", u"VARIANCE", 
                      u"VAR_POP", u"VAR_SAMP", u"VERSION_SYM", u"WEEK", 
                      u"WEEKDAY", u"WEEKOFYEAR", u"WEIGHT_STRING", u"WHEN_SYM", 
                      u"WHERE", u"WITH", u"XOR", u"YEAR", u"YEARWEEK", u"YEAR_MONTH", 
                      u"SPOINT", u"SCIRCLE", u"SLINE", u"SELLIPSE", u"SPOLY", 
                      u"SPATH", u"SBOX", u"STRANS", u"RADIUS", u"AREA", 
                      u"ARRAY_LENGTH", u"DIVIDE", u"MOD_SYM", u"OR_SYM", 
                      u"AND_SYM", u"ARROW", u"EQ", u"NOT_EQ", u"LET", u"GET", 
                      u"SET_VAR", u"SHIFT_LEFT", u"SHIFT_RIGHT", u"SEMI", 
                      u"COLON", u"DOT", u"COMMA", u"ASTERISK", u"RPAREN", 
                      u"LPAREN", u"RBRACK", u"LBRACK", u"PLUS", u"MINUS", 
                      u"NEGATION", u"VERTBAR", u"BITAND", u"POWER_OP", u"BACKTICK", 
                      u"GTH", u"LTH", u"SCONTAINS", u"SCONTAINS2", u"SLEFTCONTAINS2", 
                      u"SNOTCONTAINS", u"SNOTCONTAINS2", u"SLEFTNOTCONTAINS", 
                      u"SLEFTNOTCONTAINS2", u"SNOTOVERLAP", u"SCROSS", u"SDISTANCE", 
                      u"SLENGTH", u"SCENTER", u"INTEGER_NUM", u"HEX_DIGIT", 
                      u"BIT_NUM", u"REAL_NUMBER", u"TRANS", u"TEXT_STRING", 
                      u"ID", u"COMMENT", u"WS" ]

    RULE_relational_op = 0
    RULE_cast_data_type = 1
    RULE_search_modifier = 2
    RULE_interval_unit = 3
    RULE_transcoding_name = 4
    RULE_bit_literal = 5
    RULE_boolean_literal = 6
    RULE_hex_literal = 7
    RULE_number_literal = 8
    RULE_string_literal = 9
    RULE_char_functions = 10
    RULE_group_functions = 11
    RULE_number_functions = 12
    RULE_other_functions = 13
    RULE_time_functions = 14
    RULE_array_functions = 15
    RULE_pg_sphere_functions = 16
    RULE_functionList = 17
    RULE_literal_value = 18
    RULE_select_expression = 19
    RULE_alias = 20
    RULE_bit_expr = 21
    RULE_bool_primary = 22
    RULE_case_when_statement = 23
    RULE_case_when_statement1 = 24
    RULE_case_when_statement2 = 25
    RULE_column_list = 26
    RULE_column_name = 27
    RULE_column_spec = 28
    RULE_displayed_column = 29
    RULE_exp_factor1 = 30
    RULE_exp_factor2 = 31
    RULE_exp_factor3 = 32
    RULE_exp_factor4 = 33
    RULE_expression = 34
    RULE_expression_list = 35
    RULE_factor1 = 36
    RULE_factor2 = 37
    RULE_factor3 = 38
    RULE_factor4 = 39
    RULE_factor5 = 40
    RULE_function_call = 41
    RULE_groupby_clause = 42
    RULE_groupby_item = 43
    RULE_having_clause = 44
    RULE_index_hint = 45
    RULE_index_hint_list = 46
    RULE_index_name = 47
    RULE_index_list = 48
    RULE_index_options = 49
    RULE_interval_expr = 50
    RULE_join_condition = 51
    RULE_limit_clause = 52
    RULE_match_against_statement = 53
    RULE_offset = 54
    RULE_row_count = 55
    RULE_orderby_clause = 56
    RULE_orderby_item = 57
    RULE_partition_clause = 58
    RULE_partition_name = 59
    RULE_partition_names = 60
    RULE_bit_fac1 = 61
    RULE_bit_fac2 = 62
    RULE_predicate = 63
    RULE_query = 64
    RULE_schema_name = 65
    RULE_select_list = 66
    RULE_select_statement = 67
    RULE_simple_expr = 68
    RULE_slice_spec = 69
    RULE_subquery = 70
    RULE_table_atom = 71
    RULE_table_name = 72
    RULE_table_factor1 = 73
    RULE_table_factor2 = 74
    RULE_table_factor3 = 75
    RULE_table_factor4 = 76
    RULE_table_reference = 77
    RULE_table_references = 78
    RULE_table_spec = 79
    RULE_values_list = 80
    RULE_where_clause = 81
    RULE_pg_sphere_op = 82
    RULE_sbit_expr = 83
    RULE_spoint = 84
    RULE_scircle = 85
    RULE_sline = 86
    RULE_sellipse = 87
    RULE_sbox = 88
    RULE_spoly = 89
    RULE_spath = 90
    RULE_strans = 91
    RULE_pg_sphere_object = 92

    ruleNames =  [ u"relational_op", u"cast_data_type", u"search_modifier", 
                   u"interval_unit", u"transcoding_name", u"bit_literal", 
                   u"boolean_literal", u"hex_literal", u"number_literal", 
                   u"string_literal", u"char_functions", u"group_functions", 
                   u"number_functions", u"other_functions", u"time_functions", 
                   u"array_functions", u"pg_sphere_functions", u"functionList", 
                   u"literal_value", u"select_expression", u"alias", u"bit_expr", 
                   u"bool_primary", u"case_when_statement", u"case_when_statement1", 
                   u"case_when_statement2", u"column_list", u"column_name", 
                   u"column_spec", u"displayed_column", u"exp_factor1", 
                   u"exp_factor2", u"exp_factor3", u"exp_factor4", u"expression", 
                   u"expression_list", u"factor1", u"factor2", u"factor3", 
                   u"factor4", u"factor5", u"function_call", u"groupby_clause", 
                   u"groupby_item", u"having_clause", u"index_hint", u"index_hint_list", 
                   u"index_name", u"index_list", u"index_options", u"interval_expr", 
                   u"join_condition", u"limit_clause", u"match_against_statement", 
                   u"offset", u"row_count", u"orderby_clause", u"orderby_item", 
                   u"partition_clause", u"partition_name", u"partition_names", 
                   u"bit_fac1", u"bit_fac2", u"predicate", u"query", u"schema_name", 
                   u"select_list", u"select_statement", u"simple_expr", 
                   u"slice_spec", u"subquery", u"table_atom", u"table_name", 
                   u"table_factor1", u"table_factor2", u"table_factor3", 
                   u"table_factor4", u"table_reference", u"table_references", 
                   u"table_spec", u"values_list", u"where_clause", u"pg_sphere_op", 
                   u"sbit_expr", u"spoint", u"scircle", u"sline", u"sellipse", 
                   u"sbox", u"spoly", u"spath", u"strans", u"pg_sphere_object" ]

    EOF = Token.EOF
    ABS=1
    ACOS=2
    ADDDATE=3
    ADDTIME=4
    AES_DECRYPT=5
    AES_ENCRYPT=6
    AGAINST=7
    ALL=8
    ANY=9
    ARMSCII8=10
    ASC=11
    ASCII_SYM=12
    ASIN=13
    AS_SYM=14
    ATAN=15
    ATAN2=16
    AVG=17
    BENCHMARK=18
    BETWEEN=19
    BIG5=20
    BIN=21
    BINARY=22
    BIT_AND=23
    BIT_COUNT=24
    BIT_LENGTH=25
    BIT_OR=26
    BIT_XOR=27
    BOOLEAN_SYM=28
    BY_SYM=29
    CACHE_SYM=30
    CASE_SYM=31
    CAST_SYM=32
    CBRT=33
    CEIL=34
    CEILING=35
    CHAR=36
    CHARSET=37
    CHAR_LENGTH=38
    COERCIBILITY=39
    COLLATE_SYM=40
    COLLATION=41
    CONCAT=42
    CONCAT_WS=43
    CONNECTION_ID=44
    CONV=45
    CONVERT_SYM=46
    CONVERT_TZ=47
    COS=48
    COT=49
    COUNT=50
    CP1250=51
    CP1251=52
    CP1256=53
    CP1257=54
    CP850=55
    CP852=56
    CP866=57
    CP932=58
    CRC32=59
    CROSECOND=60
    CROSS=61
    CURDATE=62
    CURRENT_USER=63
    CURTIME=64
    DATABASE=65
    DATEDIFF=66
    DATETIME=67
    DATE_ADD=68
    DATE_FORMAT=69
    DATE_SUB=70
    DATE_SYM=71
    DAYNAME=72
    DAYOFMONTH=73
    DAYOFWEEK=74
    DAYOFYEAR=75
    DAY_HOUR=76
    DAY_MICROSECOND=77
    DAY_MINUTE=78
    DAY_SECOND=79
    DAY_SYM=80
    DEC8=81
    DECIMAL_SYM=82
    DECODE=83
    DEFAULT=84
    DEGREES=85
    DESC=86
    DES_DECRYPT=87
    DES_ENCRYPT=88
    DIV=89
    DISTINCT=90
    DISTINCTROW=91
    DOUBLE_PRECISION_SYM=92
    ELSE_SYM=93
    ELT=94
    ENCODE=95
    ENCRYPT=96
    END_SYM=97
    ESCAPE_SYM=98
    EUCJPMS=99
    EUCKR=100
    EXISTS=101
    EXP=102
    EXPANSION_SYM=103
    EXPORT_SET=104
    EXTRACT=105
    FALSE_SYM=106
    FIELD=107
    FIND_IN_SET=108
    FIRST_SYM=109
    FLOAT=110
    FLOOR=111
    FORCE_SYM=112
    FORMAT=113
    FOR_SYM=114
    FOUND_ROWS=115
    FROM=116
    FROM_BASE64=117
    FROM_DAYS=118
    FROM_UNIXTIME=119
    GB2312=120
    GBK=121
    GEOSTD8=122
    GET_FORMAT=123
    GET_LOCK=124
    GREATEST=125
    GREEK=126
    GROUP_CONCAT=127
    GROUP_SYM=128
    HAVING=129
    HEBREW=130
    HEX=131
    HIGH_PRIORITY=132
    HOUR=133
    HOUR_MICROSECOND=134
    HOUR_MINUTE=135
    HOUR_SECOND=136
    HP8=137
    IF=138
    IFNULL=139
    IGNORE_SYM=140
    INDEX_SYM=141
    INET_ATON=142
    INET_NTOA=143
    INNER_SYM=144
    INSERT=145
    INSTR=146
    INTEGER_SYM=147
    INTERVAL_SYM=148
    IN_SYM=149
    IS_FREE_LOCK=150
    ISNULL=151
    IS_SYM=152
    IS_USED_LOCK=153
    JOIN_SYM=154
    KEYBCS2=155
    KEY_SYM=156
    KOI8R=157
    KOI8U=158
    LANGUAGE=159
    LAST_SYM=160
    LAST_DAY=161
    LAST_INSERT_ID=162
    LATIN1=163
    LATIN1_BIN=164
    LATIN1_GENERAL_CS=165
    LATIN2=166
    LATIN5=167
    LATIN7=168
    LEFT=169
    LENGTH=170
    LIKE_SYM=171
    LIMIT=172
    LN=173
    LOAD=174
    LOAD_FILE=175
    LOCATE=176
    LOCK=177
    LOG=178
    LOG10=179
    LOG2=180
    LOWER=181
    LPAD=182
    LTRIM=183
    MACCE=184
    MACROMAN=185
    MAKEDATE=186
    MAKETIME=187
    MAKE_SET=188
    MASTER_POS_WAIT=189
    MATCH=190
    MAX_SYM=191
    MD5=192
    MICROSECOND=193
    MID=194
    MINUTE=195
    MINUTE_MICROSECOND=196
    MINUTE_SECOND=197
    MIN_SYM=198
    MOD=199
    MODE_SYM=200
    MONTH=201
    MONTHNAME=202
    NAME_CONST=203
    NATURAL=204
    NOT_SYM=205
    NOTNULL=206
    NOW=207
    NULL_SYM=208
    NULLS_SYM=209
    OCT=210
    OFFSET_SYM=211
    OJ_SYM=212
    OLD_PASSWORD=213
    ON=214
    ORD=215
    ORDER_SYM=216
    OUTER=217
    PARTITION_SYM=218
    PASSWORD=219
    PERIOD_ADD=220
    PERIOD_DIFF=221
    PI=222
    POW=223
    POWER=224
    QUARTER=225
    QUERY_SYM=226
    QUOTE=227
    RADIANS=228
    RANDOM=229
    REAL=230
    REGEXP=231
    RELEASE_LOCK=232
    REPEAT=233
    REPLACE=234
    REVERSE=235
    RIGHT=236
    ROLLUP_SYM=237
    ROUND=238
    ROW_SYM=239
    RPAD=240
    RTRIM=241
    SCHEMA=242
    SECOND=243
    SECOND_MICROSECOND=244
    SEC_TO_TIME=245
    SELECT=246
    SESSION_USER=247
    SET_SYM=248
    SHARE_SYM=249
    SIGN=250
    SIGNED_SYM=251
    SIN=252
    SJIS=253
    SLEEP=254
    SOUNDEX=255
    SOUNDS_SYM=256
    SPACE=257
    SQL_BIG_RESULT=258
    SQL_BUFFER_RESULT=259
    SQL_CACHE_SYM=260
    SQL_CALC_FOUND_ROWS=261
    SQL_NO_CACHE_SYM=262
    SQL_SMALL_RESULT=263
    SQRT=264
    STD=265
    STDDEV=266
    STDDEV_POP=267
    STDDEV_SAMP=268
    STRAIGHT_JOIN=269
    STRCMP=270
    STR_TO_DATE=271
    SUBSTRING=272
    SUBSTRING_INDEX=273
    SUBTIME=274
    SUM=275
    SWE7=276
    SYMMETRIC=277
    SYSDATE=278
    SYSTEM_USER=279
    TAN=280
    THEN_SYM=281
    TIMEDIFF=282
    TIMESTAMP=283
    TIMESTAMPADD=284
    TIMESTAMPDIFF=285
    TIME_FORMAT=286
    TIME_SYM=287
    TIME_TO_SEC=288
    TIS620=289
    TO_BASE64=290
    TO_DAYS=291
    TO_SECONDS=292
    TRIM=293
    TRUE_SYM=294
    TRUNCATE=295
    UCS2=296
    UJIS=297
    UNHEX=298
    UNION_SYM=299
    UNIX_TIMESTAMP=300
    UNSIGNED_SYM=301
    UPDATE=302
    UPPER=303
    USE=304
    USER=305
    USE_SYM=306
    USING_SYM=307
    UTC_DATE=308
    UTC_TIME=309
    UTC_TIMESTAMP=310
    UTF8=311
    UUID=312
    VALUES=313
    VARIANCE=314
    VAR_POP=315
    VAR_SAMP=316
    VERSION_SYM=317
    WEEK=318
    WEEKDAY=319
    WEEKOFYEAR=320
    WEIGHT_STRING=321
    WHEN_SYM=322
    WHERE=323
    WITH=324
    XOR=325
    YEAR=326
    YEARWEEK=327
    YEAR_MONTH=328
    SPOINT=329
    SCIRCLE=330
    SLINE=331
    SELLIPSE=332
    SPOLY=333
    SPATH=334
    SBOX=335
    STRANS=336
    RADIUS=337
    AREA=338
    ARRAY_LENGTH=339
    DIVIDE=340
    MOD_SYM=341
    OR_SYM=342
    AND_SYM=343
    ARROW=344
    EQ=345
    NOT_EQ=346
    LET=347
    GET=348
    SET_VAR=349
    SHIFT_LEFT=350
    SHIFT_RIGHT=351
    SEMI=352
    COLON=353
    DOT=354
    COMMA=355
    ASTERISK=356
    RPAREN=357
    LPAREN=358
    RBRACK=359
    LBRACK=360
    PLUS=361
    MINUS=362
    NEGATION=363
    VERTBAR=364
    BITAND=365
    POWER_OP=366
    BACKTICK=367
    GTH=368
    LTH=369
    SCONTAINS=370
    SCONTAINS2=371
    SLEFTCONTAINS2=372
    SNOTCONTAINS=373
    SNOTCONTAINS2=374
    SLEFTNOTCONTAINS=375
    SLEFTNOTCONTAINS2=376
    SNOTOVERLAP=377
    SCROSS=378
    SDISTANCE=379
    SLENGTH=380
    SCENTER=381
    INTEGER_NUM=382
    HEX_DIGIT=383
    BIT_NUM=384
    REAL_NUMBER=385
    TRANS=386
    TEXT_STRING=387
    ID=388
    COMMENT=389
    WS=390

    def __init__(self, input, output=sys.stdout):
        super(PostgreSQLParser, self).__init__(input, output=output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Relational_opContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Relational_opContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def NOT_EQ(self):
            return self.getToken(PostgreSQLParser.NOT_EQ, 0)

        def LET(self):
            return self.getToken(PostgreSQLParser.LET, 0)

        def GET(self):
            return self.getToken(PostgreSQLParser.GET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relational_op

        def enterRule(self, listener):
            if hasattr(listener, "enterRelational_op"):
                listener.enterRelational_op(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelational_op"):
                listener.exitRelational_op(self)




    def relational_op(self):

        localctx = PostgreSQLParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            _la = self._input.LA(1)
            if not(((((_la - 345)) & ~0x3f) == 0 and ((1 << (_la - 345)) & ((1 << (PostgreSQLParser.EQ - 345)) | (1 << (PostgreSQLParser.NOT_EQ - 345)) | (1 << (PostgreSQLParser.LET - 345)) | (1 << (PostgreSQLParser.GET - 345)) | (1 << (PostgreSQLParser.GTH - 345)) | (1 << (PostgreSQLParser.LTH - 345)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Cast_data_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def INTEGER_NUM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def CHAR(self):
            return self.getToken(PostgreSQLParser.CHAR, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def DATETIME(self):
            return self.getToken(PostgreSQLParser.DATETIME, 0)

        def DECIMAL_SYM(self):
            return self.getToken(PostgreSQLParser.DECIMAL_SYM, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def SIGNED_SYM(self):
            return self.getToken(PostgreSQLParser.SIGNED_SYM, 0)

        def INTEGER_SYM(self):
            return self.getToken(PostgreSQLParser.INTEGER_SYM, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def UNSIGNED_SYM(self):
            return self.getToken(PostgreSQLParser.UNSIGNED_SYM, 0)

        def FLOAT(self):
            return self.getToken(PostgreSQLParser.FLOAT, 0)

        def DOUBLE_PRECISION_SYM(self):
            return self.getToken(PostgreSQLParser.DOUBLE_PRECISION_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cast_data_type

        def enterRule(self, listener):
            if hasattr(listener, "enterCast_data_type"):
                listener.enterCast_data_type(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCast_data_type"):
                listener.exitCast_data_type(self)




    def cast_data_type(self):

        localctx = PostgreSQLParser.Cast_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_cast_data_type)
        self._la = 0 # Token type
        try:
            self.state = 223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 188
                self.match(PostgreSQLParser.BINARY)
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 189
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 190
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 191
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [PostgreSQLParser.CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 194
                self.match(PostgreSQLParser.CHAR)
                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 195
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 196
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 197
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [PostgreSQLParser.DATE_SYM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 200
                self.match(PostgreSQLParser.DATE_SYM)
                pass
            elif token in [PostgreSQLParser.DATETIME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 201
                self.match(PostgreSQLParser.DATETIME)
                pass
            elif token in [PostgreSQLParser.DECIMAL_SYM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 202
                self.match(PostgreSQLParser.DECIMAL_SYM)
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 203
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 204
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.COMMA:
                        self.state = 205
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 206
                        self.match(PostgreSQLParser.INTEGER_NUM)


                    self.state = 209
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [PostgreSQLParser.SIGNED_SYM]:
                self.enterOuterAlt(localctx, 6)
                self.state = 212
                self.match(PostgreSQLParser.SIGNED_SYM)
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INTEGER_SYM:
                    self.state = 213
                    self.match(PostgreSQLParser.INTEGER_SYM)


                pass
            elif token in [PostgreSQLParser.TIME_SYM]:
                self.enterOuterAlt(localctx, 7)
                self.state = 216
                self.match(PostgreSQLParser.TIME_SYM)
                pass
            elif token in [PostgreSQLParser.UNSIGNED_SYM]:
                self.enterOuterAlt(localctx, 8)
                self.state = 217
                self.match(PostgreSQLParser.UNSIGNED_SYM)
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.INTEGER_SYM:
                    self.state = 218
                    self.match(PostgreSQLParser.INTEGER_SYM)


                pass
            elif token in [PostgreSQLParser.FLOAT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 221
                self.match(PostgreSQLParser.FLOAT)
                pass
            elif token in [PostgreSQLParser.DOUBLE_PRECISION_SYM]:
                self.enterOuterAlt(localctx, 10)
                self.state = 222
                self.match(PostgreSQLParser.DOUBLE_PRECISION_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Search_modifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def LANGUAGE(self):
            return self.getToken(PostgreSQLParser.LANGUAGE, 0)

        def MODE_SYM(self):
            return self.getToken(PostgreSQLParser.MODE_SYM, 0)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def QUERY_SYM(self):
            return self.getToken(PostgreSQLParser.QUERY_SYM, 0)

        def EXPANSION_SYM(self):
            return self.getToken(PostgreSQLParser.EXPANSION_SYM, 0)

        def BOOLEAN_SYM(self):
            return self.getToken(PostgreSQLParser.BOOLEAN_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_search_modifier

        def enterRule(self, listener):
            if hasattr(listener, "enterSearch_modifier"):
                listener.enterSearch_modifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSearch_modifier"):
                listener.exitSearch_modifier(self)




    def search_modifier(self):

        localctx = PostgreSQLParser.Search_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_search_modifier)
        try:
            self.state = 240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 225
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 226
                self.match(PostgreSQLParser.NATURAL)
                self.state = 227
                self.match(PostgreSQLParser.LANGUAGE)
                self.state = 228
                self.match(PostgreSQLParser.MODE_SYM)
                self.state = 232
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 229
                    self.match(PostgreSQLParser.WITH)
                    self.state = 230
                    self.match(PostgreSQLParser.QUERY_SYM)
                    self.state = 231
                    self.match(PostgreSQLParser.EXPANSION_SYM)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 235
                self.match(PostgreSQLParser.BOOLEAN_SYM)
                self.state = 236
                self.match(PostgreSQLParser.MODE_SYM)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 237
                self.match(PostgreSQLParser.WITH)
                self.state = 238
                self.match(PostgreSQLParser.QUERY_SYM)
                self.state = 239
                self.match(PostgreSQLParser.EXPANSION_SYM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_unitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Interval_unitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(PostgreSQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(PostgreSQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(PostgreSQLParser.HOUR, 0)

        def DAY_SYM(self):
            return self.getToken(PostgreSQLParser.DAY_SYM, 0)

        def WEEK(self):
            return self.getToken(PostgreSQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(PostgreSQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(PostgreSQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(PostgreSQLParser.YEAR, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.MINUTE_MICROSECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(PostgreSQLParser.MINUTE_SECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.HOUR_MICROSECOND, 0)

        def HOUR_SECOND(self):
            return self.getToken(PostgreSQLParser.HOUR_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(PostgreSQLParser.HOUR_MINUTE, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.DAY_MICROSECOND, 0)

        def DAY_SECOND(self):
            return self.getToken(PostgreSQLParser.DAY_SECOND, 0)

        def DAY_MINUTE(self):
            return self.getToken(PostgreSQLParser.DAY_MINUTE, 0)

        def DAY_HOUR(self):
            return self.getToken(PostgreSQLParser.DAY_HOUR, 0)

        def YEAR_MONTH(self):
            return self.getToken(PostgreSQLParser.YEAR_MONTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_unit

        def enterRule(self, listener):
            if hasattr(listener, "enterInterval_unit"):
                listener.enterInterval_unit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterval_unit"):
                listener.exitInterval_unit(self)




    def interval_unit(self):

        localctx = PostgreSQLParser.Interval_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_interval_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            _la = self._input.LA(1)
            if not(((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (PostgreSQLParser.DAY_HOUR - 76)) | (1 << (PostgreSQLParser.DAY_MICROSECOND - 76)) | (1 << (PostgreSQLParser.DAY_MINUTE - 76)) | (1 << (PostgreSQLParser.DAY_SECOND - 76)) | (1 << (PostgreSQLParser.DAY_SYM - 76)) | (1 << (PostgreSQLParser.HOUR - 76)) | (1 << (PostgreSQLParser.HOUR_MICROSECOND - 76)) | (1 << (PostgreSQLParser.HOUR_MINUTE - 76)) | (1 << (PostgreSQLParser.HOUR_SECOND - 76)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (PostgreSQLParser.MINUTE - 195)) | (1 << (PostgreSQLParser.MINUTE_MICROSECOND - 195)) | (1 << (PostgreSQLParser.MINUTE_SECOND - 195)) | (1 << (PostgreSQLParser.MONTH - 195)) | (1 << (PostgreSQLParser.QUARTER - 195)) | (1 << (PostgreSQLParser.SECOND - 195)) | (1 << (PostgreSQLParser.SECOND_MICROSECOND - 195)))) != 0) or ((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & ((1 << (PostgreSQLParser.WEEK - 318)) | (1 << (PostgreSQLParser.YEAR - 318)) | (1 << (PostgreSQLParser.YEAR_MONTH - 318)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transcoding_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Transcoding_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LATIN1(self):
            return self.getToken(PostgreSQLParser.LATIN1, 0)

        def UTF8(self):
            return self.getToken(PostgreSQLParser.UTF8, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_transcoding_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTranscoding_name"):
                listener.enterTranscoding_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTranscoding_name"):
                listener.exitTranscoding_name(self)




    def transcoding_name(self):

        localctx = PostgreSQLParser.Transcoding_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_transcoding_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.LATIN1 or _la==PostgreSQLParser.UTF8):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_literalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Bit_literalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BIT_NUM(self):
            return self.getToken(PostgreSQLParser.BIT_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterBit_literal"):
                listener.enterBit_literal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBit_literal"):
                listener.exitBit_literal(self)




    def bit_literal(self):

        localctx = PostgreSQLParser.Bit_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_bit_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(PostgreSQLParser.BIT_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Boolean_literalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Boolean_literalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYM(self):
            return self.getToken(PostgreSQLParser.TRUE_SYM, 0)

        def FALSE_SYM(self):
            return self.getToken(PostgreSQLParser.FALSE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_boolean_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterBoolean_literal"):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBoolean_literal"):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = PostgreSQLParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FALSE_SYM or _la==PostgreSQLParser.TRUE_SYM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Hex_literalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Hex_literalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HEX_DIGIT(self):
            return self.getToken(PostgreSQLParser.HEX_DIGIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hex_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterHex_literal"):
                listener.enterHex_literal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHex_literal"):
                listener.exitHex_literal(self)




    def hex_literal(self):

        localctx = PostgreSQLParser.Hex_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_hex_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(PostgreSQLParser.HEX_DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Number_literalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Number_literalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def REAL_NUMBER(self):
            return self.getToken(PostgreSQLParser.REAL_NUMBER, 0)

        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterNumber_literal"):
                listener.enterNumber_literal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNumber_literal"):
                listener.exitNumber_literal(self)




    def number_literal(self):

        localctx = PostgreSQLParser.Number_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_number_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS:
                self.state = 252
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 255
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.INTEGER_NUM or _la==PostgreSQLParser.REAL_NUMBER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_literalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.String_literalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_string_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterString_literal"):
                listener.enterString_literal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitString_literal"):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = PostgreSQLParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(PostgreSQLParser.TEXT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Char_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Char_functionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYM(self):
            return self.getToken(PostgreSQLParser.ASCII_SYM, 0)

        def BIN(self):
            return self.getToken(PostgreSQLParser.BIN, 0)

        def BIT_LENGTH(self):
            return self.getToken(PostgreSQLParser.BIT_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(PostgreSQLParser.CHAR_LENGTH, 0)

        def CHAR(self):
            return self.getToken(PostgreSQLParser.CHAR, 0)

        def CONCAT_WS(self):
            return self.getToken(PostgreSQLParser.CONCAT_WS, 0)

        def CONCAT(self):
            return self.getToken(PostgreSQLParser.CONCAT, 0)

        def ELT(self):
            return self.getToken(PostgreSQLParser.ELT, 0)

        def EXPORT_SET(self):
            return self.getToken(PostgreSQLParser.EXPORT_SET, 0)

        def FIELD(self):
            return self.getToken(PostgreSQLParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(PostgreSQLParser.FIND_IN_SET, 0)

        def FORMAT(self):
            return self.getToken(PostgreSQLParser.FORMAT, 0)

        def FROM_BASE64(self):
            return self.getToken(PostgreSQLParser.FROM_BASE64, 0)

        def HEX(self):
            return self.getToken(PostgreSQLParser.HEX, 0)

        def INSERT(self):
            return self.getToken(PostgreSQLParser.INSERT, 0)

        def INSTR(self):
            return self.getToken(PostgreSQLParser.INSTR, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(PostgreSQLParser.LENGTH, 0)

        def LOAD_FILE(self):
            return self.getToken(PostgreSQLParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(PostgreSQLParser.LOCATE, 0)

        def LOWER(self):
            return self.getToken(PostgreSQLParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(PostgreSQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(PostgreSQLParser.LTRIM, 0)

        def MAKE_SET(self):
            return self.getToken(PostgreSQLParser.MAKE_SET, 0)

        def MID(self):
            return self.getToken(PostgreSQLParser.MID, 0)

        def OCT(self):
            return self.getToken(PostgreSQLParser.OCT, 0)

        def ORD(self):
            return self.getToken(PostgreSQLParser.ORD, 0)

        def QUOTE(self):
            return self.getToken(PostgreSQLParser.QUOTE, 0)

        def REPEAT(self):
            return self.getToken(PostgreSQLParser.REPEAT, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def REVERSE(self):
            return self.getToken(PostgreSQLParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def RPAD(self):
            return self.getToken(PostgreSQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(PostgreSQLParser.RTRIM, 0)

        def SOUNDEX(self):
            return self.getToken(PostgreSQLParser.SOUNDEX, 0)

        def SPACE(self):
            return self.getToken(PostgreSQLParser.SPACE, 0)

        def STRCMP(self):
            return self.getToken(PostgreSQLParser.STRCMP, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(PostgreSQLParser.SUBSTRING_INDEX, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def TO_BASE64(self):
            return self.getToken(PostgreSQLParser.TO_BASE64, 0)

        def TRIM(self):
            return self.getToken(PostgreSQLParser.TRIM, 0)

        def UNHEX(self):
            return self.getToken(PostgreSQLParser.UNHEX, 0)

        def UPPER(self):
            return self.getToken(PostgreSQLParser.UPPER, 0)

        def WEIGHT_STRING(self):
            return self.getToken(PostgreSQLParser.WEIGHT_STRING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_char_functions

        def enterRule(self, listener):
            if hasattr(listener, "enterChar_functions"):
                listener.enterChar_functions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChar_functions"):
                listener.exitChar_functions(self)




    def char_functions(self):

        localctx = PostgreSQLParser.Char_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_char_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ASCII_SYM) | (1 << PostgreSQLParser.BIN) | (1 << PostgreSQLParser.BIT_LENGTH) | (1 << PostgreSQLParser.CHAR) | (1 << PostgreSQLParser.CHAR_LENGTH) | (1 << PostgreSQLParser.CONCAT) | (1 << PostgreSQLParser.CONCAT_WS))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (PostgreSQLParser.ELT - 94)) | (1 << (PostgreSQLParser.EXPORT_SET - 94)) | (1 << (PostgreSQLParser.FIELD - 94)) | (1 << (PostgreSQLParser.FIND_IN_SET - 94)) | (1 << (PostgreSQLParser.FORMAT - 94)) | (1 << (PostgreSQLParser.FROM_BASE64 - 94)) | (1 << (PostgreSQLParser.HEX - 94)) | (1 << (PostgreSQLParser.INSERT - 94)) | (1 << (PostgreSQLParser.INSTR - 94)))) != 0) or ((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (PostgreSQLParser.LEFT - 169)) | (1 << (PostgreSQLParser.LENGTH - 169)) | (1 << (PostgreSQLParser.LOAD_FILE - 169)) | (1 << (PostgreSQLParser.LOCATE - 169)) | (1 << (PostgreSQLParser.LOWER - 169)) | (1 << (PostgreSQLParser.LPAD - 169)) | (1 << (PostgreSQLParser.LTRIM - 169)) | (1 << (PostgreSQLParser.MAKE_SET - 169)) | (1 << (PostgreSQLParser.MID - 169)) | (1 << (PostgreSQLParser.OCT - 169)) | (1 << (PostgreSQLParser.ORD - 169)) | (1 << (PostgreSQLParser.QUOTE - 169)))) != 0) or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & ((1 << (PostgreSQLParser.REPEAT - 233)) | (1 << (PostgreSQLParser.REPLACE - 233)) | (1 << (PostgreSQLParser.REVERSE - 233)) | (1 << (PostgreSQLParser.RIGHT - 233)) | (1 << (PostgreSQLParser.RPAD - 233)) | (1 << (PostgreSQLParser.RTRIM - 233)) | (1 << (PostgreSQLParser.SOUNDEX - 233)) | (1 << (PostgreSQLParser.SPACE - 233)) | (1 << (PostgreSQLParser.STRCMP - 233)) | (1 << (PostgreSQLParser.SUBSTRING - 233)) | (1 << (PostgreSQLParser.SUBSTRING_INDEX - 233)) | (1 << (PostgreSQLParser.TO_BASE64 - 233)) | (1 << (PostgreSQLParser.TRIM - 233)))) != 0) or ((((_la - 298)) & ~0x3f) == 0 and ((1 << (_la - 298)) & ((1 << (PostgreSQLParser.UNHEX - 298)) | (1 << (PostgreSQLParser.UPPER - 298)) | (1 << (PostgreSQLParser.WEIGHT_STRING - 298)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Group_functionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(PostgreSQLParser.AVG, 0)

        def COUNT(self):
            return self.getToken(PostgreSQLParser.COUNT, 0)

        def MAX_SYM(self):
            return self.getToken(PostgreSQLParser.MAX_SYM, 0)

        def MIN_SYM(self):
            return self.getToken(PostgreSQLParser.MIN_SYM, 0)

        def SUM(self):
            return self.getToken(PostgreSQLParser.SUM, 0)

        def BIT_AND(self):
            return self.getToken(PostgreSQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(PostgreSQLParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(PostgreSQLParser.BIT_XOR, 0)

        def BIT_COUNT(self):
            return self.getToken(PostgreSQLParser.BIT_COUNT, 0)

        def GROUP_CONCAT(self):
            return self.getToken(PostgreSQLParser.GROUP_CONCAT, 0)

        def STD(self):
            return self.getToken(PostgreSQLParser.STD, 0)

        def STDDEV(self):
            return self.getToken(PostgreSQLParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(PostgreSQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(PostgreSQLParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(PostgreSQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(PostgreSQLParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(PostgreSQLParser.VARIANCE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_functions

        def enterRule(self, listener):
            if hasattr(listener, "enterGroup_functions"):
                listener.enterGroup_functions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGroup_functions"):
                listener.exitGroup_functions(self)




    def group_functions(self):

        localctx = PostgreSQLParser.Group_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_group_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.AVG) | (1 << PostgreSQLParser.BIT_AND) | (1 << PostgreSQLParser.BIT_COUNT) | (1 << PostgreSQLParser.BIT_OR) | (1 << PostgreSQLParser.BIT_XOR) | (1 << PostgreSQLParser.COUNT))) != 0) or _la==PostgreSQLParser.GROUP_CONCAT or _la==PostgreSQLParser.MAX_SYM or _la==PostgreSQLParser.MIN_SYM or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & ((1 << (PostgreSQLParser.STD - 265)) | (1 << (PostgreSQLParser.STDDEV - 265)) | (1 << (PostgreSQLParser.STDDEV_POP - 265)) | (1 << (PostgreSQLParser.STDDEV_SAMP - 265)) | (1 << (PostgreSQLParser.SUM - 265)) | (1 << (PostgreSQLParser.VARIANCE - 265)) | (1 << (PostgreSQLParser.VAR_POP - 265)) | (1 << (PostgreSQLParser.VAR_SAMP - 265)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Number_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Number_functionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(PostgreSQLParser.ABS, 0)

        def ACOS(self):
            return self.getToken(PostgreSQLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(PostgreSQLParser.ASIN, 0)

        def ATAN2(self):
            return self.getToken(PostgreSQLParser.ATAN2, 0)

        def ATAN(self):
            return self.getToken(PostgreSQLParser.ATAN, 0)

        def CBRT(self):
            return self.getToken(PostgreSQLParser.CBRT, 0)

        def CEIL(self):
            return self.getToken(PostgreSQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(PostgreSQLParser.CEILING, 0)

        def CONV(self):
            return self.getToken(PostgreSQLParser.CONV, 0)

        def COS(self):
            return self.getToken(PostgreSQLParser.COS, 0)

        def COT(self):
            return self.getToken(PostgreSQLParser.COT, 0)

        def CRC32(self):
            return self.getToken(PostgreSQLParser.CRC32, 0)

        def DEGREES(self):
            return self.getToken(PostgreSQLParser.DEGREES, 0)

        def DIV(self):
            return self.getToken(PostgreSQLParser.DIV, 0)

        def EXP(self):
            return self.getToken(PostgreSQLParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(PostgreSQLParser.FLOOR, 0)

        def LN(self):
            return self.getToken(PostgreSQLParser.LN, 0)

        def LOG(self):
            return self.getToken(PostgreSQLParser.LOG, 0)

        def MOD(self):
            return self.getToken(PostgreSQLParser.MOD, 0)

        def PI(self):
            return self.getToken(PostgreSQLParser.PI, 0)

        def POW(self):
            return self.getToken(PostgreSQLParser.POW, 0)

        def POWER(self):
            return self.getToken(PostgreSQLParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(PostgreSQLParser.RADIANS, 0)

        def RANDOM(self):
            return self.getToken(PostgreSQLParser.RANDOM, 0)

        def ROUND(self):
            return self.getToken(PostgreSQLParser.ROUND, 0)

        def SIGN(self):
            return self.getToken(PostgreSQLParser.SIGN, 0)

        def SIN(self):
            return self.getToken(PostgreSQLParser.SIN, 0)

        def SQRT(self):
            return self.getToken(PostgreSQLParser.SQRT, 0)

        def TAN(self):
            return self.getToken(PostgreSQLParser.TAN, 0)

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def GREATEST(self):
            return self.getToken(PostgreSQLParser.GREATEST, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_functions

        def enterRule(self, listener):
            if hasattr(listener, "enterNumber_functions"):
                listener.enterNumber_functions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNumber_functions"):
                listener.exitNumber_functions(self)




    def number_functions(self):

        localctx = PostgreSQLParser.Number_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_number_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ABS) | (1 << PostgreSQLParser.ACOS) | (1 << PostgreSQLParser.ASIN) | (1 << PostgreSQLParser.ATAN) | (1 << PostgreSQLParser.ATAN2) | (1 << PostgreSQLParser.CBRT) | (1 << PostgreSQLParser.CEIL) | (1 << PostgreSQLParser.CEILING) | (1 << PostgreSQLParser.CONV) | (1 << PostgreSQLParser.COS) | (1 << PostgreSQLParser.COT) | (1 << PostgreSQLParser.CRC32))) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (PostgreSQLParser.DEGREES - 85)) | (1 << (PostgreSQLParser.DIV - 85)) | (1 << (PostgreSQLParser.EXP - 85)) | (1 << (PostgreSQLParser.FLOOR - 85)) | (1 << (PostgreSQLParser.GREATEST - 85)))) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & ((1 << (PostgreSQLParser.LN - 173)) | (1 << (PostgreSQLParser.LOG - 173)) | (1 << (PostgreSQLParser.MOD - 173)) | (1 << (PostgreSQLParser.PI - 173)) | (1 << (PostgreSQLParser.POW - 173)) | (1 << (PostgreSQLParser.POWER - 173)) | (1 << (PostgreSQLParser.RADIANS - 173)) | (1 << (PostgreSQLParser.RANDOM - 173)))) != 0) or ((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.ROUND - 238)) | (1 << (PostgreSQLParser.SIGN - 238)) | (1 << (PostgreSQLParser.SIN - 238)) | (1 << (PostgreSQLParser.SQRT - 238)) | (1 << (PostgreSQLParser.TAN - 238)) | (1 << (PostgreSQLParser.TRUNCATE - 238)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Other_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Other_functionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MAKE_SET(self):
            return self.getToken(PostgreSQLParser.MAKE_SET, 0)

        def LOAD_FILE(self):
            return self.getToken(PostgreSQLParser.LOAD_FILE, 0)

        def IF(self):
            return self.getToken(PostgreSQLParser.IF, 0)

        def IFNULL(self):
            return self.getToken(PostgreSQLParser.IFNULL, 0)

        def AES_ENCRYPT(self):
            return self.getToken(PostgreSQLParser.AES_ENCRYPT, 0)

        def AES_DECRYPT(self):
            return self.getToken(PostgreSQLParser.AES_DECRYPT, 0)

        def DECODE(self):
            return self.getToken(PostgreSQLParser.DECODE, 0)

        def ENCODE(self):
            return self.getToken(PostgreSQLParser.ENCODE, 0)

        def DES_DECRYPT(self):
            return self.getToken(PostgreSQLParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(PostgreSQLParser.DES_ENCRYPT, 0)

        def ENCRYPT(self):
            return self.getToken(PostgreSQLParser.ENCRYPT, 0)

        def MD5(self):
            return self.getToken(PostgreSQLParser.MD5, 0)

        def OLD_PASSWORD(self):
            return self.getToken(PostgreSQLParser.OLD_PASSWORD, 0)

        def PASSWORD(self):
            return self.getToken(PostgreSQLParser.PASSWORD, 0)

        def BENCHMARK(self):
            return self.getToken(PostgreSQLParser.BENCHMARK, 0)

        def CHARSET(self):
            return self.getToken(PostgreSQLParser.CHARSET, 0)

        def COERCIBILITY(self):
            return self.getToken(PostgreSQLParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(PostgreSQLParser.COLLATION, 0)

        def CONNECTION_ID(self):
            return self.getToken(PostgreSQLParser.CONNECTION_ID, 0)

        def CURRENT_USER(self):
            return self.getToken(PostgreSQLParser.CURRENT_USER, 0)

        def DATABASE(self):
            return self.getToken(PostgreSQLParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(PostgreSQLParser.SCHEMA, 0)

        def USER(self):
            return self.getToken(PostgreSQLParser.USER, 0)

        def SESSION_USER(self):
            return self.getToken(PostgreSQLParser.SESSION_USER, 0)

        def SYSTEM_USER(self):
            return self.getToken(PostgreSQLParser.SYSTEM_USER, 0)

        def VERSION_SYM(self):
            return self.getToken(PostgreSQLParser.VERSION_SYM, 0)

        def FOUND_ROWS(self):
            return self.getToken(PostgreSQLParser.FOUND_ROWS, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(PostgreSQLParser.LAST_INSERT_ID, 0)

        def DEFAULT(self):
            return self.getToken(PostgreSQLParser.DEFAULT, 0)

        def GET_LOCK(self):
            return self.getToken(PostgreSQLParser.GET_LOCK, 0)

        def RELEASE_LOCK(self):
            return self.getToken(PostgreSQLParser.RELEASE_LOCK, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(PostgreSQLParser.IS_FREE_LOCK, 0)

        def IS_USED_LOCK(self):
            return self.getToken(PostgreSQLParser.IS_USED_LOCK, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(PostgreSQLParser.MASTER_POS_WAIT, 0)

        def INET_ATON(self):
            return self.getToken(PostgreSQLParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(PostgreSQLParser.INET_NTOA, 0)

        def NAME_CONST(self):
            return self.getToken(PostgreSQLParser.NAME_CONST, 0)

        def SLEEP(self):
            return self.getToken(PostgreSQLParser.SLEEP, 0)

        def UUID(self):
            return self.getToken(PostgreSQLParser.UUID, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_other_functions

        def enterRule(self, listener):
            if hasattr(listener, "enterOther_functions"):
                listener.enterOther_functions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOther_functions"):
                listener.exitOther_functions(self)




    def other_functions(self):

        localctx = PostgreSQLParser.Other_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_other_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.AES_DECRYPT) | (1 << PostgreSQLParser.AES_ENCRYPT) | (1 << PostgreSQLParser.BENCHMARK) | (1 << PostgreSQLParser.CHARSET) | (1 << PostgreSQLParser.COERCIBILITY) | (1 << PostgreSQLParser.COLLATION) | (1 << PostgreSQLParser.CONNECTION_ID) | (1 << PostgreSQLParser.CURRENT_USER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (PostgreSQLParser.DATABASE - 65)) | (1 << (PostgreSQLParser.DECODE - 65)) | (1 << (PostgreSQLParser.DEFAULT - 65)) | (1 << (PostgreSQLParser.DES_DECRYPT - 65)) | (1 << (PostgreSQLParser.DES_ENCRYPT - 65)) | (1 << (PostgreSQLParser.ENCODE - 65)) | (1 << (PostgreSQLParser.ENCRYPT - 65)) | (1 << (PostgreSQLParser.FOUND_ROWS - 65)) | (1 << (PostgreSQLParser.GET_LOCK - 65)))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (PostgreSQLParser.IF - 138)) | (1 << (PostgreSQLParser.IFNULL - 138)) | (1 << (PostgreSQLParser.INET_ATON - 138)) | (1 << (PostgreSQLParser.INET_NTOA - 138)) | (1 << (PostgreSQLParser.IS_FREE_LOCK - 138)) | (1 << (PostgreSQLParser.IS_USED_LOCK - 138)) | (1 << (PostgreSQLParser.LAST_INSERT_ID - 138)) | (1 << (PostgreSQLParser.LOAD_FILE - 138)) | (1 << (PostgreSQLParser.MAKE_SET - 138)) | (1 << (PostgreSQLParser.MASTER_POS_WAIT - 138)) | (1 << (PostgreSQLParser.MD5 - 138)))) != 0) or ((((_la - 203)) & ~0x3f) == 0 and ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.NAME_CONST - 203)) | (1 << (PostgreSQLParser.OLD_PASSWORD - 203)) | (1 << (PostgreSQLParser.PASSWORD - 203)) | (1 << (PostgreSQLParser.RELEASE_LOCK - 203)) | (1 << (PostgreSQLParser.SCHEMA - 203)) | (1 << (PostgreSQLParser.SESSION_USER - 203)) | (1 << (PostgreSQLParser.SLEEP - 203)))) != 0) or ((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (PostgreSQLParser.SYSTEM_USER - 279)) | (1 << (PostgreSQLParser.USER - 279)) | (1 << (PostgreSQLParser.UUID - 279)) | (1 << (PostgreSQLParser.VALUES - 279)) | (1 << (PostgreSQLParser.VERSION_SYM - 279)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Time_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Time_functionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADDDATE(self):
            return self.getToken(PostgreSQLParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(PostgreSQLParser.ADDTIME, 0)

        def CONVERT_TZ(self):
            return self.getToken(PostgreSQLParser.CONVERT_TZ, 0)

        def CURDATE(self):
            return self.getToken(PostgreSQLParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(PostgreSQLParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(PostgreSQLParser.DATE_ADD, 0)

        def DATE_FORMAT(self):
            return self.getToken(PostgreSQLParser.DATE_FORMAT, 0)

        def DATE_SUB(self):
            return self.getToken(PostgreSQLParser.DATE_SUB, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def DATEDIFF(self):
            return self.getToken(PostgreSQLParser.DATEDIFF, 0)

        def DAYNAME(self):
            return self.getToken(PostgreSQLParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(PostgreSQLParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(PostgreSQLParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(PostgreSQLParser.DAYOFYEAR, 0)

        def EXTRACT(self):
            return self.getToken(PostgreSQLParser.EXTRACT, 0)

        def FROM_DAYS(self):
            return self.getToken(PostgreSQLParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(PostgreSQLParser.FROM_UNIXTIME, 0)

        def GET_FORMAT(self):
            return self.getToken(PostgreSQLParser.GET_FORMAT, 0)

        def HOUR(self):
            return self.getToken(PostgreSQLParser.HOUR, 0)

        def LAST_DAY(self):
            return self.getToken(PostgreSQLParser.LAST_DAY, 0)

        def MAKEDATE(self):
            return self.getToken(PostgreSQLParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(PostgreSQLParser.MAKETIME, 0)

        def MICROSECOND(self):
            return self.getToken(PostgreSQLParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(PostgreSQLParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(PostgreSQLParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(PostgreSQLParser.MONTHNAME, 0)

        def NOW(self):
            return self.getToken(PostgreSQLParser.NOW, 0)

        def PERIOD_ADD(self):
            return self.getToken(PostgreSQLParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(PostgreSQLParser.PERIOD_DIFF, 0)

        def QUARTER(self):
            return self.getToken(PostgreSQLParser.QUARTER, 0)

        def SEC_TO_TIME(self):
            return self.getToken(PostgreSQLParser.SEC_TO_TIME, 0)

        def SECOND(self):
            return self.getToken(PostgreSQLParser.SECOND, 0)

        def STR_TO_DATE(self):
            return self.getToken(PostgreSQLParser.STR_TO_DATE, 0)

        def SUBTIME(self):
            return self.getToken(PostgreSQLParser.SUBTIME, 0)

        def SYSDATE(self):
            return self.getToken(PostgreSQLParser.SYSDATE, 0)

        def TIME_FORMAT(self):
            return self.getToken(PostgreSQLParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(PostgreSQLParser.TIME_TO_SEC, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def TIMEDIFF(self):
            return self.getToken(PostgreSQLParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(PostgreSQLParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(PostgreSQLParser.TIMESTAMPDIFF, 0)

        def TO_DAYS(self):
            return self.getToken(PostgreSQLParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(PostgreSQLParser.TO_SECONDS, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.UNIX_TIMESTAMP, 0)

        def UTC_DATE(self):
            return self.getToken(PostgreSQLParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(PostgreSQLParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.UTC_TIMESTAMP, 0)

        def WEEK(self):
            return self.getToken(PostgreSQLParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(PostgreSQLParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(PostgreSQLParser.WEEKOFYEAR, 0)

        def YEAR(self):
            return self.getToken(PostgreSQLParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(PostgreSQLParser.YEARWEEK, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_time_functions

        def enterRule(self, listener):
            if hasattr(listener, "enterTime_functions"):
                listener.enterTime_functions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTime_functions"):
                listener.exitTime_functions(self)




    def time_functions(self):

        localctx = PostgreSQLParser.Time_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_time_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ADDDATE) | (1 << PostgreSQLParser.ADDTIME) | (1 << PostgreSQLParser.CONVERT_TZ) | (1 << PostgreSQLParser.CURDATE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.CURTIME - 64)) | (1 << (PostgreSQLParser.DATEDIFF - 64)) | (1 << (PostgreSQLParser.DATE_ADD - 64)) | (1 << (PostgreSQLParser.DATE_FORMAT - 64)) | (1 << (PostgreSQLParser.DATE_SUB - 64)) | (1 << (PostgreSQLParser.DATE_SYM - 64)) | (1 << (PostgreSQLParser.DAYNAME - 64)) | (1 << (PostgreSQLParser.DAYOFMONTH - 64)) | (1 << (PostgreSQLParser.DAYOFWEEK - 64)) | (1 << (PostgreSQLParser.DAYOFYEAR - 64)) | (1 << (PostgreSQLParser.EXTRACT - 64)) | (1 << (PostgreSQLParser.FROM_DAYS - 64)) | (1 << (PostgreSQLParser.FROM_UNIXTIME - 64)) | (1 << (PostgreSQLParser.GET_FORMAT - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (PostgreSQLParser.HOUR - 133)) | (1 << (PostgreSQLParser.LAST_DAY - 133)) | (1 << (PostgreSQLParser.MAKEDATE - 133)) | (1 << (PostgreSQLParser.MAKETIME - 133)) | (1 << (PostgreSQLParser.MICROSECOND - 133)) | (1 << (PostgreSQLParser.MINUTE - 133)))) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & ((1 << (PostgreSQLParser.MONTH - 201)) | (1 << (PostgreSQLParser.MONTHNAME - 201)) | (1 << (PostgreSQLParser.NOW - 201)) | (1 << (PostgreSQLParser.PERIOD_ADD - 201)) | (1 << (PostgreSQLParser.PERIOD_DIFF - 201)) | (1 << (PostgreSQLParser.QUARTER - 201)) | (1 << (PostgreSQLParser.SECOND - 201)) | (1 << (PostgreSQLParser.SEC_TO_TIME - 201)))) != 0) or ((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & ((1 << (PostgreSQLParser.STR_TO_DATE - 271)) | (1 << (PostgreSQLParser.SUBTIME - 271)) | (1 << (PostgreSQLParser.SYSDATE - 271)) | (1 << (PostgreSQLParser.TIMEDIFF - 271)) | (1 << (PostgreSQLParser.TIMESTAMP - 271)) | (1 << (PostgreSQLParser.TIMESTAMPADD - 271)) | (1 << (PostgreSQLParser.TIMESTAMPDIFF - 271)) | (1 << (PostgreSQLParser.TIME_FORMAT - 271)) | (1 << (PostgreSQLParser.TIME_SYM - 271)) | (1 << (PostgreSQLParser.TIME_TO_SEC - 271)) | (1 << (PostgreSQLParser.TO_DAYS - 271)) | (1 << (PostgreSQLParser.TO_SECONDS - 271)) | (1 << (PostgreSQLParser.UNIX_TIMESTAMP - 271)) | (1 << (PostgreSQLParser.UTC_DATE - 271)) | (1 << (PostgreSQLParser.UTC_TIME - 271)) | (1 << (PostgreSQLParser.UTC_TIMESTAMP - 271)) | (1 << (PostgreSQLParser.WEEK - 271)) | (1 << (PostgreSQLParser.WEEKDAY - 271)) | (1 << (PostgreSQLParser.WEEKOFYEAR - 271)) | (1 << (PostgreSQLParser.YEAR - 271)) | (1 << (PostgreSQLParser.YEARWEEK - 271)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Array_functionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_LENGTH(self):
            return self.getToken(PostgreSQLParser.ARRAY_LENGTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_array_functions

        def enterRule(self, listener):
            if hasattr(listener, "enterArray_functions"):
                listener.enterArray_functions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArray_functions"):
                listener.exitArray_functions(self)




    def array_functions(self):

        localctx = PostgreSQLParser.Array_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_array_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.match(PostgreSQLParser.ARRAY_LENGTH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pg_sphere_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Pg_sphere_functionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AREA(self):
            return self.getToken(PostgreSQLParser.AREA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_functions

        def enterRule(self, listener):
            if hasattr(listener, "enterPg_sphere_functions"):
                listener.enterPg_sphere_functions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPg_sphere_functions"):
                listener.exitPg_sphere_functions(self)




    def pg_sphere_functions(self):

        localctx = PostgreSQLParser.Pg_sphere_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_pg_sphere_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(PostgreSQLParser.AREA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.FunctionListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def number_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_functionsContext,0)


        def char_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Char_functionsContext,0)


        def time_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Time_functionsContext,0)


        def other_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Other_functionsContext,0)


        def pg_sphere_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_functionsContext,0)


        def array_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Array_functionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_functionList

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionList"):
                listener.enterFunctionList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionList"):
                listener.exitFunctionList(self)




    def functionList(self):

        localctx = PostgreSQLParser.FunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_functionList)
        try:
            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 273
                self.number_functions()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 274
                self.char_functions()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 275
                self.time_functions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 276
                self.other_functions()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 277
                self.pg_sphere_functions()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 278
                self.array_functions()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Literal_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.String_literalContext,0)


        def number_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_literalContext,0)


        def hex_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Hex_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def bit_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_literal_value

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteral_value"):
                listener.enterLiteral_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteral_value"):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = PostgreSQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_literal_value)
        try:
            self.state = 287
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.TEXT_STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.string_literal()
                pass
            elif token in [PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.REAL_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 282
                self.number_literal()
                pass
            elif token in [PostgreSQLParser.HEX_DIGIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 283
                self.hex_literal()
                pass
            elif token in [PostgreSQLParser.FALSE_SYM, PostgreSQLParser.TRUE_SYM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 284
                self.boolean_literal()
                pass
            elif token in [PostgreSQLParser.BIT_NUM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 285
                self.bit_literal()
                pass
            elif token in [PostgreSQLParser.NULL_SYM]:
                self.enterOuterAlt(localctx, 6)
                self.state = 286
                self.match(PostgreSQLParser.NULL_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Select_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_listContext,0)


        def HIGH_PRIORITY(self):
            return self.getToken(PostgreSQLParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(PostgreSQLParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(PostgreSQLParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(PostgreSQLParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(PostgreSQLParser.SQL_BUFFER_RESULT, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(PostgreSQLParser.SQL_CALC_FOUND_ROWS, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Orderby_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Limit_clauseContext,0)


        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(PostgreSQLParser.DISTINCTROW, 0)

        def SQL_CACHE_SYM(self):
            return self.getToken(PostgreSQLParser.SQL_CACHE_SYM, 0)

        def SQL_NO_CACHE_SYM(self):
            return self.getToken(PostgreSQLParser.SQL_NO_CACHE_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(PostgreSQLParser.LOCK, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def SHARE_SYM(self):
            return self.getToken(PostgreSQLParser.SHARE_SYM, 0)

        def MODE_SYM(self):
            return self.getToken(PostgreSQLParser.MODE_SYM, 0)

        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def groupby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_expression"):
                listener.enterSelect_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_expression"):
                listener.exitSelect_expression(self)




    def select_expression(self):

        localctx = PostgreSQLParser.Select_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_select_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(PostgreSQLParser.SELECT)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT or _la==PostgreSQLParser.DISTINCTROW:
                self.state = 290
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT or _la==PostgreSQLParser.DISTINCTROW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.HIGH_PRIORITY:
                self.state = 293
                self.match(PostgreSQLParser.HIGH_PRIORITY)


            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.STRAIGHT_JOIN:
                self.state = 296
                self.match(PostgreSQLParser.STRAIGHT_JOIN)


            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SQL_SMALL_RESULT:
                self.state = 299
                self.match(PostgreSQLParser.SQL_SMALL_RESULT)


            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SQL_BIG_RESULT:
                self.state = 302
                self.match(PostgreSQLParser.SQL_BIG_RESULT)


            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SQL_BUFFER_RESULT:
                self.state = 305
                self.match(PostgreSQLParser.SQL_BUFFER_RESULT)


            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SQL_CACHE_SYM or _la==PostgreSQLParser.SQL_NO_CACHE_SYM:
                self.state = 308
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.SQL_CACHE_SYM or _la==PostgreSQLParser.SQL_NO_CACHE_SYM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SQL_CALC_FOUND_ROWS:
                self.state = 311
                self.match(PostgreSQLParser.SQL_CALC_FOUND_ROWS)


            self.state = 314
            self.select_list()
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FROM:
                self.state = 315
                self.match(PostgreSQLParser.FROM)
                self.state = 316
                self.table_references()
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PARTITION_SYM:
                    self.state = 317
                    self.partition_clause()


                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHERE:
                    self.state = 320
                    self.where_clause()


                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.GROUP_SYM:
                    self.state = 323
                    self.groupby_clause()


                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.HAVING:
                    self.state = 326
                    self.having_clause()




            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ORDER_SYM:
                self.state = 331
                self.orderby_clause()


            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.LIMIT or _la==PostgreSQLParser.INTEGER_NUM:
                self.state = 334
                self.limit_clause()


            self.state = 343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.FOR_SYM]:
                self.state = 337
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 338
                self.match(PostgreSQLParser.UPDATE)
                pass
            elif token in [PostgreSQLParser.LOCK]:
                self.state = 339
                self.match(PostgreSQLParser.LOCK)
                self.state = 340
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 341
                self.match(PostgreSQLParser.SHARE_SYM)
                self.state = 342
                self.match(PostgreSQLParser.MODE_SYM)
                pass
            elif token in [PostgreSQLParser.UNION_SYM, PostgreSQLParser.SEMI, PostgreSQLParser.RPAREN]:
                pass
            else:
                pass
            self.state = 346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 345
                self.match(PostgreSQLParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.AliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterAlias"):
                listener.enterAlias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlias"):
                listener.exitAlias(self)




    def alias(self):

        localctx = PostgreSQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS_SYM:
                self.state = 348
                self.match(PostgreSQLParser.AS_SYM)


            self.state = 351
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Bit_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def factor1(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor1Context,i)


        def VERTBAR(self):
            return self.getToken(PostgreSQLParser.VERTBAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_expr

        def enterRule(self, listener):
            if hasattr(listener, "enterBit_expr"):
                listener.enterBit_expr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBit_expr"):
                listener.exitBit_expr(self)




    def bit_expr(self):

        localctx = PostgreSQLParser.Bit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_bit_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.factor1()
            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 354
                self.match(PostgreSQLParser.VERTBAR)
                self.state = 355
                self.factor1()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bool_primaryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Bool_primaryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def predicate(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,i)


        def relational_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relational_opContext,0)


        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bool_primary

        def enterRule(self, listener):
            if hasattr(listener, "enterBool_primary"):
                listener.enterBool_primary(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBool_primary"):
                listener.exitBool_primary(self)




    def bool_primary(self):

        localctx = PostgreSQLParser.Bool_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_bool_primary)
        self._la = 0 # Token type
        try:
            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 358
                self.predicate()
                self.state = 362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 359
                    self.relational_op()
                    self.state = 360
                    self.predicate()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NOT_SYM:
                    self.state = 364
                    self.match(PostgreSQLParser.NOT_SYM)


                self.state = 367
                self.match(PostgreSQLParser.EXISTS)
                self.state = 368
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Case_when_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYM(self):
            return self.getToken(PostgreSQLParser.CASE_SYM, 0)

        def END_SYM(self):
            return self.getToken(PostgreSQLParser.END_SYM, 0)

        def case_when_statement1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement1Context,0)


        def case_when_statement2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement2Context,0)


        def ELSE_SYM(self):
            return self.getToken(PostgreSQLParser.ELSE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterCase_when_statement"):
                listener.enterCase_when_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCase_when_statement"):
                listener.exitCase_when_statement(self)




    def case_when_statement(self):

        localctx = PostgreSQLParser.Case_when_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_case_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(PostgreSQLParser.CASE_SYM)
            self.state = 374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.WHEN_SYM]:
                self.state = 372
                self.case_when_statement1()
                pass
            elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BINARY, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.DIV, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GREATEST, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.NEGATION, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                self.state = 373
                self.case_when_statement2()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ELSE_SYM:
                self.state = 376
                self.match(PostgreSQLParser.ELSE_SYM)
                self.state = 377
                self.bit_expr()


            self.state = 380
            self.match(PostgreSQLParser.END_SYM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statement1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Case_when_statement1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def WHEN_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def THEN_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def bit_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement1

        def enterRule(self, listener):
            if hasattr(listener, "enterCase_when_statement1"):
                listener.enterCase_when_statement1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCase_when_statement1"):
                listener.exitCase_when_statement1(self)




    def case_when_statement1(self):

        localctx = PostgreSQLParser.Case_when_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_case_when_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 382
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 383
                self.expression()
                self.state = 384
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 385
                self.bit_expr()
                self.state = 389 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.WHEN_SYM):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statement2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Case_when_statement2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def WHEN_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def THEN_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement2

        def enterRule(self, listener):
            if hasattr(listener, "enterCase_when_statement2"):
                listener.enterCase_when_statement2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCase_when_statement2"):
                listener.exitCase_when_statement2(self)




    def case_when_statement2(self):

        localctx = PostgreSQLParser.Case_when_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_case_when_statement2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.bit_expr()
            self.state = 397 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 392
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 393
                self.bit_expr()
                self.state = 394
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 395
                self.bit_expr()
                self.state = 399 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.WHEN_SYM):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Column_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_list

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_list"):
                listener.enterColumn_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_list"):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = PostgreSQLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(PostgreSQLParser.LPAREN)
            self.state = 402
            self.column_spec()
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 403
                self.match(PostgreSQLParser.COMMA)
                self.state = 404
                self.column_spec()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 410
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Column_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_name

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_name"):
                listener.enterColumn_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_name"):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = PostgreSQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_specContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Column_specContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def DOT(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def slice_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Slice_specContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_spec

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_spec"):
                listener.enterColumn_spec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_spec"):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = PostgreSQLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_column_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 414
                    self.schema_name()
                    self.state = 415
                    self.match(PostgreSQLParser.DOT)


                self.state = 419
                self.table_name()
                self.state = 420
                self.match(PostgreSQLParser.DOT)


            self.state = 424
            self.column_name()
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.LBRACK:
                self.state = 425
                self.slice_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Displayed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Displayed_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_displayed_column

        def enterRule(self, listener):
            if hasattr(listener, "enterDisplayed_column"):
                listener.enterDisplayed_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDisplayed_column"):
                listener.exitDisplayed_column(self)




    def displayed_column(self):

        localctx = PostgreSQLParser.Displayed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_displayed_column)
        self._la = 0 # Token type
        try:
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 428
                self.table_spec()
                self.state = 429
                self.match(PostgreSQLParser.DOT)
                self.state = 430
                self.match(PostgreSQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 432
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 433
                    self.sbit_expr()
                    pass


                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS_SYM or _la==PostgreSQLParser.ID:
                    self.state = 436
                    self.alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Exp_factor1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def exp_factor2(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor2Context,i)


        def XOR(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.XOR)
            else:
                return self.getToken(PostgreSQLParser.XOR, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor1

        def enterRule(self, listener):
            if hasattr(listener, "enterExp_factor1"):
                listener.enterExp_factor1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExp_factor1"):
                listener.exitExp_factor1(self)




    def exp_factor1(self):

        localctx = PostgreSQLParser.Exp_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exp_factor1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.exp_factor2()
            self.state = 446
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 442
                    self.match(PostgreSQLParser.XOR)
                    self.state = 443
                    self.exp_factor2() 
                self.state = 448
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Exp_factor2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def exp_factor3(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor3Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor3Context,i)


        def AND_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.AND_SYM)
            else:
                return self.getToken(PostgreSQLParser.AND_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor2

        def enterRule(self, listener):
            if hasattr(listener, "enterExp_factor2"):
                listener.enterExp_factor2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExp_factor2"):
                listener.exitExp_factor2(self)




    def exp_factor2(self):

        localctx = PostgreSQLParser.Exp_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_exp_factor2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.exp_factor3()
            self.state = 454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 450
                    self.match(PostgreSQLParser.AND_SYM)
                    self.state = 451
                    self.exp_factor3() 
                self.state = 456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor3Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Exp_factor3Context, self).__init__(parent, invokingState)
            self.parser = parser

        def exp_factor4(self):
            return self.getTypedRuleContext(PostgreSQLParser.Exp_factor4Context,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor3

        def enterRule(self, listener):
            if hasattr(listener, "enterExp_factor3"):
                listener.enterExp_factor3(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExp_factor3"):
                listener.exitExp_factor3(self)




    def exp_factor3(self):

        localctx = PostgreSQLParser.Exp_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_exp_factor3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 457
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 460
            self.exp_factor4()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor4Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Exp_factor4Context, self).__init__(parent, invokingState)
            self.parser = parser

        def bool_primary(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bool_primaryContext,0)


        def IS_SYM(self):
            return self.getToken(PostgreSQLParser.IS_SYM, 0)

        def ISNULL(self):
            return self.getToken(PostgreSQLParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(PostgreSQLParser.NOTNULL, 0)

        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor4

        def enterRule(self, listener):
            if hasattr(listener, "enterExp_factor4"):
                listener.enterExp_factor4(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExp_factor4"):
                listener.exitExp_factor4(self)




    def exp_factor4(self):

        localctx = PostgreSQLParser.Exp_factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_exp_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.bool_primary()
            self.state = 478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 463
                    self.match(PostgreSQLParser.IS_SYM)
                    self.state = 465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.NOT_SYM:
                        self.state = 464
                        self.match(PostgreSQLParser.NOT_SYM)


                    self.state = 471
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PostgreSQLParser.FALSE_SYM, PostgreSQLParser.TRUE_SYM]:
                        self.state = 467
                        self.boolean_literal()
                        pass
                    elif token in [PostgreSQLParser.NULL_SYM]:
                        self.state = 468
                        self.match(PostgreSQLParser.NULL_SYM)
                        pass
                    elif token in [PostgreSQLParser.DISTINCT]:
                        self.state = 469
                        self.match(PostgreSQLParser.DISTINCT)
                        self.state = 470
                        self.match(PostgreSQLParser.FROM)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.state = 476
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 475
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.ISNULL or _la==PostgreSQLParser.NOTNULL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.ExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def exp_factor1(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor1Context,i)


        def OR_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OR_SYM)
            else:
                return self.getToken(PostgreSQLParser.OR_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)




    def expression(self):

        localctx = PostgreSQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.exp_factor1()
            self.state = 485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 481
                    self.match(PostgreSQLParser.OR_SYM)
                    self.state = 482
                    self.exp_factor1() 
                self.state = 487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Expression_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression_list

        def enterRule(self, listener):
            if hasattr(listener, "enterExpression_list"):
                listener.enterExpression_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpression_list"):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = PostgreSQLParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(PostgreSQLParser.LPAREN)
            self.state = 489
            self.expression()
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 490
                self.match(PostgreSQLParser.COMMA)
                self.state = 491
                self.expression()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 497
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Factor1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def factor2(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor2Context,i)


        def BITAND(self):
            return self.getToken(PostgreSQLParser.BITAND, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor1

        def enterRule(self, listener):
            if hasattr(listener, "enterFactor1"):
                listener.enterFactor1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFactor1"):
                listener.exitFactor1(self)




    def factor1(self):

        localctx = PostgreSQLParser.Factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_factor1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.factor2()
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 500
                self.match(PostgreSQLParser.BITAND)
                self.state = 501
                self.factor2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Factor2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def factor3(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor3Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor3Context,i)


        def SHIFT_LEFT(self):
            return self.getToken(PostgreSQLParser.SHIFT_LEFT, 0)

        def SHIFT_RIGHT(self):
            return self.getToken(PostgreSQLParser.SHIFT_RIGHT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor2

        def enterRule(self, listener):
            if hasattr(listener, "enterFactor2"):
                listener.enterFactor2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFactor2"):
                listener.exitFactor2(self)




    def factor2(self):

        localctx = PostgreSQLParser.Factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.factor3()
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 505
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.SHIFT_LEFT or _la==PostgreSQLParser.SHIFT_RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 506
                self.factor3()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor3Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Factor3Context, self).__init__(parent, invokingState)
            self.parser = parser

        def factor4(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor4Context,i)


        def PLUS(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor3

        def enterRule(self, listener):
            if hasattr(listener, "enterFactor3"):
                listener.enterFactor3(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFactor3"):
                listener.exitFactor3(self)




    def factor3(self):

        localctx = PostgreSQLParser.Factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.factor4()
            self.state = 514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 510
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 511
                    self.factor4() 
                self.state = 516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor4Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Factor4Context, self).__init__(parent, invokingState)
            self.parser = parser

        def factor5(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor5Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor5Context,i)


        def ASTERISK(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ASTERISK)
            else:
                return self.getToken(PostgreSQLParser.ASTERISK, i)

        def DIVIDE(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DIVIDE)
            else:
                return self.getToken(PostgreSQLParser.DIVIDE, i)

        def MOD_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MOD_SYM)
            else:
                return self.getToken(PostgreSQLParser.MOD_SYM, i)

        def POWER_OP(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.POWER_OP)
            else:
                return self.getToken(PostgreSQLParser.POWER_OP, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor4

        def enterRule(self, listener):
            if hasattr(listener, "enterFactor4"):
                listener.enterFactor4(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFactor4"):
                listener.exitFactor4(self)




    def factor4(self):

        localctx = PostgreSQLParser.Factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.factor5()
            self.state = 522
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 518
                    _la = self._input.LA(1)
                    if not(((((_la - 340)) & ~0x3f) == 0 and ((1 << (_la - 340)) & ((1 << (PostgreSQLParser.DIVIDE - 340)) | (1 << (PostgreSQLParser.MOD_SYM - 340)) | (1 << (PostgreSQLParser.ASTERISK - 340)) | (1 << (PostgreSQLParser.POWER_OP - 340)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 519
                    self.factor5() 
                self.state = 524
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor5Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Factor5Context, self).__init__(parent, invokingState)
            self.parser = parser

        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def PLUS(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor5

        def enterRule(self, listener):
            if hasattr(listener, "enterFactor5"):
                listener.enterFactor5(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFactor5"):
                listener.exitFactor5(self)




    def factor5(self):

        localctx = PostgreSQLParser.Factor5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_factor5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 525
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.BINARY or ((((_la - 361)) & ~0x3f) == 0 and ((1 << (_la - 361)) & ((1 << (PostgreSQLParser.PLUS - 361)) | (1 << (PostgreSQLParser.MINUS - 361)) | (1 << (PostgreSQLParser.NEGATION - 361)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 528
            self.simple_expr()
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 529
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 530
                self.interval_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Function_callContext, self).__init__(parent, invokingState)
            self.parser = parser

        def functionList(self):
            return self.getTypedRuleContext(PostgreSQLParser.FunctionListContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def CONVERT_SYM(self):
            return self.getToken(PostgreSQLParser.CONVERT_SYM, 0)

        def cast_data_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cast_data_typeContext,0)


        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def transcoding_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Transcoding_nameContext,0)


        def CAST_SYM(self):
            return self.getToken(PostgreSQLParser.CAST_SYM, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def group_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_functionsContext,0)


        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_call

        def enterRule(self, listener):
            if hasattr(listener, "enterFunction_call"):
                listener.enterFunction_call(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunction_call"):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = PostgreSQLParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 533
                self.functionList()
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 534
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ABS) | (1 << PostgreSQLParser.ACOS) | (1 << PostgreSQLParser.ADDDATE) | (1 << PostgreSQLParser.ADDTIME) | (1 << PostgreSQLParser.AES_DECRYPT) | (1 << PostgreSQLParser.AES_ENCRYPT) | (1 << PostgreSQLParser.ASCII_SYM) | (1 << PostgreSQLParser.ASIN) | (1 << PostgreSQLParser.ATAN) | (1 << PostgreSQLParser.ATAN2) | (1 << PostgreSQLParser.AVG) | (1 << PostgreSQLParser.BENCHMARK) | (1 << PostgreSQLParser.BIN) | (1 << PostgreSQLParser.BINARY) | (1 << PostgreSQLParser.BIT_AND) | (1 << PostgreSQLParser.BIT_COUNT) | (1 << PostgreSQLParser.BIT_LENGTH) | (1 << PostgreSQLParser.BIT_OR) | (1 << PostgreSQLParser.BIT_XOR) | (1 << PostgreSQLParser.CASE_SYM) | (1 << PostgreSQLParser.CAST_SYM) | (1 << PostgreSQLParser.CBRT) | (1 << PostgreSQLParser.CEIL) | (1 << PostgreSQLParser.CEILING) | (1 << PostgreSQLParser.CHAR) | (1 << PostgreSQLParser.CHARSET) | (1 << PostgreSQLParser.CHAR_LENGTH) | (1 << PostgreSQLParser.COERCIBILITY) | (1 << PostgreSQLParser.COLLATION) | (1 << PostgreSQLParser.CONCAT) | (1 << PostgreSQLParser.CONCAT_WS) | (1 << PostgreSQLParser.CONNECTION_ID) | (1 << PostgreSQLParser.CONV) | (1 << PostgreSQLParser.CONVERT_SYM) | (1 << PostgreSQLParser.CONVERT_TZ) | (1 << PostgreSQLParser.COS) | (1 << PostgreSQLParser.COT) | (1 << PostgreSQLParser.COUNT) | (1 << PostgreSQLParser.CRC32) | (1 << PostgreSQLParser.CURDATE) | (1 << PostgreSQLParser.CURRENT_USER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.CURTIME - 64)) | (1 << (PostgreSQLParser.DATABASE - 64)) | (1 << (PostgreSQLParser.DATEDIFF - 64)) | (1 << (PostgreSQLParser.DATE_ADD - 64)) | (1 << (PostgreSQLParser.DATE_FORMAT - 64)) | (1 << (PostgreSQLParser.DATE_SUB - 64)) | (1 << (PostgreSQLParser.DATE_SYM - 64)) | (1 << (PostgreSQLParser.DAYNAME - 64)) | (1 << (PostgreSQLParser.DAYOFMONTH - 64)) | (1 << (PostgreSQLParser.DAYOFWEEK - 64)) | (1 << (PostgreSQLParser.DAYOFYEAR - 64)) | (1 << (PostgreSQLParser.DECODE - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.DEGREES - 64)) | (1 << (PostgreSQLParser.DES_DECRYPT - 64)) | (1 << (PostgreSQLParser.DES_ENCRYPT - 64)) | (1 << (PostgreSQLParser.DIV - 64)) | (1 << (PostgreSQLParser.ELT - 64)) | (1 << (PostgreSQLParser.ENCODE - 64)) | (1 << (PostgreSQLParser.ENCRYPT - 64)) | (1 << (PostgreSQLParser.EXISTS - 64)) | (1 << (PostgreSQLParser.EXP - 64)) | (1 << (PostgreSQLParser.EXPORT_SET - 64)) | (1 << (PostgreSQLParser.EXTRACT - 64)) | (1 << (PostgreSQLParser.FALSE_SYM - 64)) | (1 << (PostgreSQLParser.FIELD - 64)) | (1 << (PostgreSQLParser.FIND_IN_SET - 64)) | (1 << (PostgreSQLParser.FLOOR - 64)) | (1 << (PostgreSQLParser.FORMAT - 64)) | (1 << (PostgreSQLParser.FOUND_ROWS - 64)) | (1 << (PostgreSQLParser.FROM_BASE64 - 64)) | (1 << (PostgreSQLParser.FROM_DAYS - 64)) | (1 << (PostgreSQLParser.FROM_UNIXTIME - 64)) | (1 << (PostgreSQLParser.GET_FORMAT - 64)) | (1 << (PostgreSQLParser.GET_LOCK - 64)) | (1 << (PostgreSQLParser.GREATEST - 64)) | (1 << (PostgreSQLParser.GROUP_CONCAT - 64)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (PostgreSQLParser.HEX - 131)) | (1 << (PostgreSQLParser.HOUR - 131)) | (1 << (PostgreSQLParser.IF - 131)) | (1 << (PostgreSQLParser.IFNULL - 131)) | (1 << (PostgreSQLParser.INET_ATON - 131)) | (1 << (PostgreSQLParser.INET_NTOA - 131)) | (1 << (PostgreSQLParser.INSERT - 131)) | (1 << (PostgreSQLParser.INSTR - 131)) | (1 << (PostgreSQLParser.INTERVAL_SYM - 131)) | (1 << (PostgreSQLParser.IS_FREE_LOCK - 131)) | (1 << (PostgreSQLParser.IS_USED_LOCK - 131)) | (1 << (PostgreSQLParser.LAST_DAY - 131)) | (1 << (PostgreSQLParser.LAST_INSERT_ID - 131)) | (1 << (PostgreSQLParser.LEFT - 131)) | (1 << (PostgreSQLParser.LENGTH - 131)) | (1 << (PostgreSQLParser.LN - 131)) | (1 << (PostgreSQLParser.LOAD_FILE - 131)) | (1 << (PostgreSQLParser.LOCATE - 131)) | (1 << (PostgreSQLParser.LOG - 131)) | (1 << (PostgreSQLParser.LOWER - 131)) | (1 << (PostgreSQLParser.LPAD - 131)) | (1 << (PostgreSQLParser.LTRIM - 131)) | (1 << (PostgreSQLParser.MAKEDATE - 131)) | (1 << (PostgreSQLParser.MAKETIME - 131)) | (1 << (PostgreSQLParser.MAKE_SET - 131)) | (1 << (PostgreSQLParser.MASTER_POS_WAIT - 131)) | (1 << (PostgreSQLParser.MATCH - 131)) | (1 << (PostgreSQLParser.MAX_SYM - 131)) | (1 << (PostgreSQLParser.MD5 - 131)) | (1 << (PostgreSQLParser.MICROSECOND - 131)) | (1 << (PostgreSQLParser.MID - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (PostgreSQLParser.MINUTE - 195)) | (1 << (PostgreSQLParser.MIN_SYM - 195)) | (1 << (PostgreSQLParser.MOD - 195)) | (1 << (PostgreSQLParser.MONTH - 195)) | (1 << (PostgreSQLParser.MONTHNAME - 195)) | (1 << (PostgreSQLParser.NAME_CONST - 195)) | (1 << (PostgreSQLParser.NOT_SYM - 195)) | (1 << (PostgreSQLParser.NOW - 195)) | (1 << (PostgreSQLParser.NULL_SYM - 195)) | (1 << (PostgreSQLParser.OCT - 195)) | (1 << (PostgreSQLParser.OLD_PASSWORD - 195)) | (1 << (PostgreSQLParser.ORD - 195)) | (1 << (PostgreSQLParser.PASSWORD - 195)) | (1 << (PostgreSQLParser.PERIOD_ADD - 195)) | (1 << (PostgreSQLParser.PERIOD_DIFF - 195)) | (1 << (PostgreSQLParser.PI - 195)) | (1 << (PostgreSQLParser.POW - 195)) | (1 << (PostgreSQLParser.POWER - 195)) | (1 << (PostgreSQLParser.QUARTER - 195)) | (1 << (PostgreSQLParser.QUOTE - 195)) | (1 << (PostgreSQLParser.RADIANS - 195)) | (1 << (PostgreSQLParser.RANDOM - 195)) | (1 << (PostgreSQLParser.RELEASE_LOCK - 195)) | (1 << (PostgreSQLParser.REPEAT - 195)) | (1 << (PostgreSQLParser.REPLACE - 195)) | (1 << (PostgreSQLParser.REVERSE - 195)) | (1 << (PostgreSQLParser.RIGHT - 195)) | (1 << (PostgreSQLParser.ROUND - 195)) | (1 << (PostgreSQLParser.ROW_SYM - 195)) | (1 << (PostgreSQLParser.RPAD - 195)) | (1 << (PostgreSQLParser.RTRIM - 195)) | (1 << (PostgreSQLParser.SCHEMA - 195)) | (1 << (PostgreSQLParser.SECOND - 195)) | (1 << (PostgreSQLParser.SEC_TO_TIME - 195)) | (1 << (PostgreSQLParser.SESSION_USER - 195)) | (1 << (PostgreSQLParser.SIGN - 195)) | (1 << (PostgreSQLParser.SIN - 195)) | (1 << (PostgreSQLParser.SLEEP - 195)) | (1 << (PostgreSQLParser.SOUNDEX - 195)) | (1 << (PostgreSQLParser.SPACE - 195)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (PostgreSQLParser.SQRT - 264)) | (1 << (PostgreSQLParser.STD - 264)) | (1 << (PostgreSQLParser.STDDEV - 264)) | (1 << (PostgreSQLParser.STDDEV_POP - 264)) | (1 << (PostgreSQLParser.STDDEV_SAMP - 264)) | (1 << (PostgreSQLParser.STRCMP - 264)) | (1 << (PostgreSQLParser.STR_TO_DATE - 264)) | (1 << (PostgreSQLParser.SUBSTRING - 264)) | (1 << (PostgreSQLParser.SUBSTRING_INDEX - 264)) | (1 << (PostgreSQLParser.SUBTIME - 264)) | (1 << (PostgreSQLParser.SUM - 264)) | (1 << (PostgreSQLParser.SYSDATE - 264)) | (1 << (PostgreSQLParser.SYSTEM_USER - 264)) | (1 << (PostgreSQLParser.TAN - 264)) | (1 << (PostgreSQLParser.TIMEDIFF - 264)) | (1 << (PostgreSQLParser.TIMESTAMP - 264)) | (1 << (PostgreSQLParser.TIMESTAMPADD - 264)) | (1 << (PostgreSQLParser.TIMESTAMPDIFF - 264)) | (1 << (PostgreSQLParser.TIME_FORMAT - 264)) | (1 << (PostgreSQLParser.TIME_SYM - 264)) | (1 << (PostgreSQLParser.TIME_TO_SEC - 264)) | (1 << (PostgreSQLParser.TO_BASE64 - 264)) | (1 << (PostgreSQLParser.TO_DAYS - 264)) | (1 << (PostgreSQLParser.TO_SECONDS - 264)) | (1 << (PostgreSQLParser.TRIM - 264)) | (1 << (PostgreSQLParser.TRUE_SYM - 264)) | (1 << (PostgreSQLParser.TRUNCATE - 264)) | (1 << (PostgreSQLParser.UNHEX - 264)) | (1 << (PostgreSQLParser.UNIX_TIMESTAMP - 264)) | (1 << (PostgreSQLParser.UPPER - 264)) | (1 << (PostgreSQLParser.USER - 264)) | (1 << (PostgreSQLParser.UTC_DATE - 264)) | (1 << (PostgreSQLParser.UTC_TIME - 264)) | (1 << (PostgreSQLParser.UTC_TIMESTAMP - 264)) | (1 << (PostgreSQLParser.UUID - 264)) | (1 << (PostgreSQLParser.VALUES - 264)) | (1 << (PostgreSQLParser.VARIANCE - 264)) | (1 << (PostgreSQLParser.VAR_POP - 264)) | (1 << (PostgreSQLParser.VAR_SAMP - 264)) | (1 << (PostgreSQLParser.VERSION_SYM - 264)) | (1 << (PostgreSQLParser.WEEK - 264)) | (1 << (PostgreSQLParser.WEEKDAY - 264)) | (1 << (PostgreSQLParser.WEEKOFYEAR - 264)) | (1 << (PostgreSQLParser.WEIGHT_STRING - 264)) | (1 << (PostgreSQLParser.YEAR - 264)) | (1 << (PostgreSQLParser.YEARWEEK - 264)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (PostgreSQLParser.SPOINT - 329)) | (1 << (PostgreSQLParser.SCIRCLE - 329)) | (1 << (PostgreSQLParser.SLINE - 329)) | (1 << (PostgreSQLParser.SELLIPSE - 329)) | (1 << (PostgreSQLParser.SPOLY - 329)) | (1 << (PostgreSQLParser.SPATH - 329)) | (1 << (PostgreSQLParser.SBOX - 329)) | (1 << (PostgreSQLParser.STRANS - 329)) | (1 << (PostgreSQLParser.AREA - 329)) | (1 << (PostgreSQLParser.ARRAY_LENGTH - 329)) | (1 << (PostgreSQLParser.LPAREN - 329)) | (1 << (PostgreSQLParser.PLUS - 329)) | (1 << (PostgreSQLParser.MINUS - 329)) | (1 << (PostgreSQLParser.NEGATION - 329)) | (1 << (PostgreSQLParser.SLENGTH - 329)) | (1 << (PostgreSQLParser.SCENTER - 329)) | (1 << (PostgreSQLParser.INTEGER_NUM - 329)) | (1 << (PostgreSQLParser.HEX_DIGIT - 329)) | (1 << (PostgreSQLParser.BIT_NUM - 329)) | (1 << (PostgreSQLParser.REAL_NUMBER - 329)) | (1 << (PostgreSQLParser.TEXT_STRING - 329)) | (1 << (PostgreSQLParser.ID - 329)))) != 0):
                        self.state = 535
                        self.expression()
                        self.state = 540
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==PostgreSQLParser.COMMA:
                            self.state = 536
                            self.match(PostgreSQLParser.COMMA)
                            self.state = 537
                            self.expression()
                            self.state = 542
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 545
                    self.match(PostgreSQLParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.match(PostgreSQLParser.CONVERT_SYM)
                self.state = 549
                self.match(PostgreSQLParser.LPAREN)
                self.state = 550
                self.expression()
                self.state = 551
                self.match(PostgreSQLParser.COMMA)
                self.state = 552
                self.cast_data_type()
                self.state = 553
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 555
                self.match(PostgreSQLParser.CONVERT_SYM)
                self.state = 556
                self.match(PostgreSQLParser.LPAREN)
                self.state = 557
                self.expression()
                self.state = 558
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 559
                self.transcoding_name()
                self.state = 560
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 562
                self.match(PostgreSQLParser.CAST_SYM)
                self.state = 563
                self.match(PostgreSQLParser.LPAREN)
                self.state = 564
                self.expression()
                self.state = 565
                self.match(PostgreSQLParser.AS_SYM)
                self.state = 566
                self.cast_data_type()
                self.state = 567
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 569
                self.group_functions()
                self.state = 570
                self.match(PostgreSQLParser.LPAREN)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT or _la==PostgreSQLParser.ASTERISK:
                    self.state = 571
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT or _la==PostgreSQLParser.ASTERISK):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ABS) | (1 << PostgreSQLParser.ACOS) | (1 << PostgreSQLParser.ADDDATE) | (1 << PostgreSQLParser.ADDTIME) | (1 << PostgreSQLParser.AES_DECRYPT) | (1 << PostgreSQLParser.AES_ENCRYPT) | (1 << PostgreSQLParser.ASCII_SYM) | (1 << PostgreSQLParser.ASIN) | (1 << PostgreSQLParser.ATAN) | (1 << PostgreSQLParser.ATAN2) | (1 << PostgreSQLParser.AVG) | (1 << PostgreSQLParser.BENCHMARK) | (1 << PostgreSQLParser.BIN) | (1 << PostgreSQLParser.BINARY) | (1 << PostgreSQLParser.BIT_AND) | (1 << PostgreSQLParser.BIT_COUNT) | (1 << PostgreSQLParser.BIT_LENGTH) | (1 << PostgreSQLParser.BIT_OR) | (1 << PostgreSQLParser.BIT_XOR) | (1 << PostgreSQLParser.CASE_SYM) | (1 << PostgreSQLParser.CAST_SYM) | (1 << PostgreSQLParser.CBRT) | (1 << PostgreSQLParser.CEIL) | (1 << PostgreSQLParser.CEILING) | (1 << PostgreSQLParser.CHAR) | (1 << PostgreSQLParser.CHARSET) | (1 << PostgreSQLParser.CHAR_LENGTH) | (1 << PostgreSQLParser.COERCIBILITY) | (1 << PostgreSQLParser.COLLATION) | (1 << PostgreSQLParser.CONCAT) | (1 << PostgreSQLParser.CONCAT_WS) | (1 << PostgreSQLParser.CONNECTION_ID) | (1 << PostgreSQLParser.CONV) | (1 << PostgreSQLParser.CONVERT_SYM) | (1 << PostgreSQLParser.CONVERT_TZ) | (1 << PostgreSQLParser.COS) | (1 << PostgreSQLParser.COT) | (1 << PostgreSQLParser.COUNT) | (1 << PostgreSQLParser.CRC32) | (1 << PostgreSQLParser.CURDATE) | (1 << PostgreSQLParser.CURRENT_USER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.CURTIME - 64)) | (1 << (PostgreSQLParser.DATABASE - 64)) | (1 << (PostgreSQLParser.DATEDIFF - 64)) | (1 << (PostgreSQLParser.DATE_ADD - 64)) | (1 << (PostgreSQLParser.DATE_FORMAT - 64)) | (1 << (PostgreSQLParser.DATE_SUB - 64)) | (1 << (PostgreSQLParser.DATE_SYM - 64)) | (1 << (PostgreSQLParser.DAYNAME - 64)) | (1 << (PostgreSQLParser.DAYOFMONTH - 64)) | (1 << (PostgreSQLParser.DAYOFWEEK - 64)) | (1 << (PostgreSQLParser.DAYOFYEAR - 64)) | (1 << (PostgreSQLParser.DECODE - 64)) | (1 << (PostgreSQLParser.DEFAULT - 64)) | (1 << (PostgreSQLParser.DEGREES - 64)) | (1 << (PostgreSQLParser.DES_DECRYPT - 64)) | (1 << (PostgreSQLParser.DES_ENCRYPT - 64)) | (1 << (PostgreSQLParser.DIV - 64)) | (1 << (PostgreSQLParser.ELT - 64)) | (1 << (PostgreSQLParser.ENCODE - 64)) | (1 << (PostgreSQLParser.ENCRYPT - 64)) | (1 << (PostgreSQLParser.EXISTS - 64)) | (1 << (PostgreSQLParser.EXP - 64)) | (1 << (PostgreSQLParser.EXPORT_SET - 64)) | (1 << (PostgreSQLParser.EXTRACT - 64)) | (1 << (PostgreSQLParser.FALSE_SYM - 64)) | (1 << (PostgreSQLParser.FIELD - 64)) | (1 << (PostgreSQLParser.FIND_IN_SET - 64)) | (1 << (PostgreSQLParser.FLOOR - 64)) | (1 << (PostgreSQLParser.FORMAT - 64)) | (1 << (PostgreSQLParser.FOUND_ROWS - 64)) | (1 << (PostgreSQLParser.FROM_BASE64 - 64)) | (1 << (PostgreSQLParser.FROM_DAYS - 64)) | (1 << (PostgreSQLParser.FROM_UNIXTIME - 64)) | (1 << (PostgreSQLParser.GET_FORMAT - 64)) | (1 << (PostgreSQLParser.GET_LOCK - 64)) | (1 << (PostgreSQLParser.GREATEST - 64)) | (1 << (PostgreSQLParser.GROUP_CONCAT - 64)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (PostgreSQLParser.HEX - 131)) | (1 << (PostgreSQLParser.HOUR - 131)) | (1 << (PostgreSQLParser.IF - 131)) | (1 << (PostgreSQLParser.IFNULL - 131)) | (1 << (PostgreSQLParser.INET_ATON - 131)) | (1 << (PostgreSQLParser.INET_NTOA - 131)) | (1 << (PostgreSQLParser.INSERT - 131)) | (1 << (PostgreSQLParser.INSTR - 131)) | (1 << (PostgreSQLParser.INTERVAL_SYM - 131)) | (1 << (PostgreSQLParser.IS_FREE_LOCK - 131)) | (1 << (PostgreSQLParser.IS_USED_LOCK - 131)) | (1 << (PostgreSQLParser.LAST_DAY - 131)) | (1 << (PostgreSQLParser.LAST_INSERT_ID - 131)) | (1 << (PostgreSQLParser.LEFT - 131)) | (1 << (PostgreSQLParser.LENGTH - 131)) | (1 << (PostgreSQLParser.LN - 131)) | (1 << (PostgreSQLParser.LOAD_FILE - 131)) | (1 << (PostgreSQLParser.LOCATE - 131)) | (1 << (PostgreSQLParser.LOG - 131)) | (1 << (PostgreSQLParser.LOWER - 131)) | (1 << (PostgreSQLParser.LPAD - 131)) | (1 << (PostgreSQLParser.LTRIM - 131)) | (1 << (PostgreSQLParser.MAKEDATE - 131)) | (1 << (PostgreSQLParser.MAKETIME - 131)) | (1 << (PostgreSQLParser.MAKE_SET - 131)) | (1 << (PostgreSQLParser.MASTER_POS_WAIT - 131)) | (1 << (PostgreSQLParser.MATCH - 131)) | (1 << (PostgreSQLParser.MAX_SYM - 131)) | (1 << (PostgreSQLParser.MD5 - 131)) | (1 << (PostgreSQLParser.MICROSECOND - 131)) | (1 << (PostgreSQLParser.MID - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (PostgreSQLParser.MINUTE - 195)) | (1 << (PostgreSQLParser.MIN_SYM - 195)) | (1 << (PostgreSQLParser.MOD - 195)) | (1 << (PostgreSQLParser.MONTH - 195)) | (1 << (PostgreSQLParser.MONTHNAME - 195)) | (1 << (PostgreSQLParser.NAME_CONST - 195)) | (1 << (PostgreSQLParser.NOW - 195)) | (1 << (PostgreSQLParser.NULL_SYM - 195)) | (1 << (PostgreSQLParser.OCT - 195)) | (1 << (PostgreSQLParser.OLD_PASSWORD - 195)) | (1 << (PostgreSQLParser.ORD - 195)) | (1 << (PostgreSQLParser.PASSWORD - 195)) | (1 << (PostgreSQLParser.PERIOD_ADD - 195)) | (1 << (PostgreSQLParser.PERIOD_DIFF - 195)) | (1 << (PostgreSQLParser.PI - 195)) | (1 << (PostgreSQLParser.POW - 195)) | (1 << (PostgreSQLParser.POWER - 195)) | (1 << (PostgreSQLParser.QUARTER - 195)) | (1 << (PostgreSQLParser.QUOTE - 195)) | (1 << (PostgreSQLParser.RADIANS - 195)) | (1 << (PostgreSQLParser.RANDOM - 195)) | (1 << (PostgreSQLParser.RELEASE_LOCK - 195)) | (1 << (PostgreSQLParser.REPEAT - 195)) | (1 << (PostgreSQLParser.REPLACE - 195)) | (1 << (PostgreSQLParser.REVERSE - 195)) | (1 << (PostgreSQLParser.RIGHT - 195)) | (1 << (PostgreSQLParser.ROUND - 195)) | (1 << (PostgreSQLParser.ROW_SYM - 195)) | (1 << (PostgreSQLParser.RPAD - 195)) | (1 << (PostgreSQLParser.RTRIM - 195)) | (1 << (PostgreSQLParser.SCHEMA - 195)) | (1 << (PostgreSQLParser.SECOND - 195)) | (1 << (PostgreSQLParser.SEC_TO_TIME - 195)) | (1 << (PostgreSQLParser.SESSION_USER - 195)) | (1 << (PostgreSQLParser.SIGN - 195)) | (1 << (PostgreSQLParser.SIN - 195)) | (1 << (PostgreSQLParser.SLEEP - 195)) | (1 << (PostgreSQLParser.SOUNDEX - 195)) | (1 << (PostgreSQLParser.SPACE - 195)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (PostgreSQLParser.SQRT - 264)) | (1 << (PostgreSQLParser.STD - 264)) | (1 << (PostgreSQLParser.STDDEV - 264)) | (1 << (PostgreSQLParser.STDDEV_POP - 264)) | (1 << (PostgreSQLParser.STDDEV_SAMP - 264)) | (1 << (PostgreSQLParser.STRCMP - 264)) | (1 << (PostgreSQLParser.STR_TO_DATE - 264)) | (1 << (PostgreSQLParser.SUBSTRING - 264)) | (1 << (PostgreSQLParser.SUBSTRING_INDEX - 264)) | (1 << (PostgreSQLParser.SUBTIME - 264)) | (1 << (PostgreSQLParser.SUM - 264)) | (1 << (PostgreSQLParser.SYSDATE - 264)) | (1 << (PostgreSQLParser.SYSTEM_USER - 264)) | (1 << (PostgreSQLParser.TAN - 264)) | (1 << (PostgreSQLParser.TIMEDIFF - 264)) | (1 << (PostgreSQLParser.TIMESTAMP - 264)) | (1 << (PostgreSQLParser.TIMESTAMPADD - 264)) | (1 << (PostgreSQLParser.TIMESTAMPDIFF - 264)) | (1 << (PostgreSQLParser.TIME_FORMAT - 264)) | (1 << (PostgreSQLParser.TIME_SYM - 264)) | (1 << (PostgreSQLParser.TIME_TO_SEC - 264)) | (1 << (PostgreSQLParser.TO_BASE64 - 264)) | (1 << (PostgreSQLParser.TO_DAYS - 264)) | (1 << (PostgreSQLParser.TO_SECONDS - 264)) | (1 << (PostgreSQLParser.TRIM - 264)) | (1 << (PostgreSQLParser.TRUE_SYM - 264)) | (1 << (PostgreSQLParser.TRUNCATE - 264)) | (1 << (PostgreSQLParser.UNHEX - 264)) | (1 << (PostgreSQLParser.UNIX_TIMESTAMP - 264)) | (1 << (PostgreSQLParser.UPPER - 264)) | (1 << (PostgreSQLParser.USER - 264)) | (1 << (PostgreSQLParser.UTC_DATE - 264)) | (1 << (PostgreSQLParser.UTC_TIME - 264)) | (1 << (PostgreSQLParser.UTC_TIMESTAMP - 264)) | (1 << (PostgreSQLParser.UUID - 264)) | (1 << (PostgreSQLParser.VALUES - 264)) | (1 << (PostgreSQLParser.VARIANCE - 264)) | (1 << (PostgreSQLParser.VAR_POP - 264)) | (1 << (PostgreSQLParser.VAR_SAMP - 264)) | (1 << (PostgreSQLParser.VERSION_SYM - 264)) | (1 << (PostgreSQLParser.WEEK - 264)) | (1 << (PostgreSQLParser.WEEKDAY - 264)) | (1 << (PostgreSQLParser.WEEKOFYEAR - 264)) | (1 << (PostgreSQLParser.WEIGHT_STRING - 264)) | (1 << (PostgreSQLParser.YEAR - 264)) | (1 << (PostgreSQLParser.YEARWEEK - 264)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (PostgreSQLParser.SPOINT - 329)) | (1 << (PostgreSQLParser.SCIRCLE - 329)) | (1 << (PostgreSQLParser.SLINE - 329)) | (1 << (PostgreSQLParser.SELLIPSE - 329)) | (1 << (PostgreSQLParser.SPOLY - 329)) | (1 << (PostgreSQLParser.SPATH - 329)) | (1 << (PostgreSQLParser.SBOX - 329)) | (1 << (PostgreSQLParser.STRANS - 329)) | (1 << (PostgreSQLParser.AREA - 329)) | (1 << (PostgreSQLParser.ARRAY_LENGTH - 329)) | (1 << (PostgreSQLParser.LPAREN - 329)) | (1 << (PostgreSQLParser.PLUS - 329)) | (1 << (PostgreSQLParser.MINUS - 329)) | (1 << (PostgreSQLParser.NEGATION - 329)) | (1 << (PostgreSQLParser.SLENGTH - 329)) | (1 << (PostgreSQLParser.SCENTER - 329)) | (1 << (PostgreSQLParser.INTEGER_NUM - 329)) | (1 << (PostgreSQLParser.HEX_DIGIT - 329)) | (1 << (PostgreSQLParser.BIT_NUM - 329)) | (1 << (PostgreSQLParser.REAL_NUMBER - 329)) | (1 << (PostgreSQLParser.TEXT_STRING - 329)) | (1 << (PostgreSQLParser.ID - 329)))) != 0):
                    self.state = 576
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        self.state = 574
                        self.bit_expr()
                        pass

                    elif la_ == 2:
                        self.state = 575
                        self.sbit_expr()
                        pass




                self.state = 580
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Groupby_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Groupby_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def groupby_item(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Groupby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def ROLLUP_SYM(self):
            return self.getToken(PostgreSQLParser.ROLLUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterGroupby_clause"):
                listener.enterGroupby_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGroupby_clause"):
                listener.exitGroupby_clause(self)




    def groupby_clause(self):

        localctx = PostgreSQLParser.Groupby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_groupby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(PostgreSQLParser.GROUP_SYM)
            self.state = 585
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 586
            self.groupby_item()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 587
                self.match(PostgreSQLParser.COMMA)
                self.state = 588
                self.groupby_item()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 594
                self.match(PostgreSQLParser.WITH)
                self.state = 595
                self.match(PostgreSQLParser.ROLLUP_SYM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Groupby_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Groupby_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_item

        def enterRule(self, listener):
            if hasattr(listener, "enterGroupby_item"):
                listener.enterGroupby_item(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGroupby_item"):
                listener.exitGroupby_item(self)




    def groupby_item(self):

        localctx = PostgreSQLParser.Groupby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_groupby_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 598
                self.column_spec()
                pass

            elif la_ == 2:
                self.state = 599
                self.match(PostgreSQLParser.INTEGER_NUM)
                pass

            elif la_ == 3:
                self.state = 600
                self.bit_expr()
                pass


            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 603
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Having_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(PostgreSQLParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_having_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterHaving_clause"):
                listener.enterHaving_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHaving_clause"):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = PostgreSQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(PostgreSQLParser.HAVING)
            self.state = 607
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_hintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Index_hintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USE_SYM(self):
            return self.getToken(PostgreSQLParser.USE_SYM, 0)

        def index_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_optionsContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def index_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_listContext,0)


        def IGNORE_SYM(self):
            return self.getToken(PostgreSQLParser.IGNORE_SYM, 0)

        def FORCE_SYM(self):
            return self.getToken(PostgreSQLParser.FORCE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex_hint"):
                listener.enterIndex_hint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex_hint"):
                listener.exitIndex_hint(self)




    def index_hint(self):

        localctx = PostgreSQLParser.Index_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_index_hint)
        self._la = 0 # Token type
        try:
            self.state = 629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.USE_SYM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.match(PostgreSQLParser.USE_SYM)
                self.state = 610
                self.index_options()
                self.state = 611
                self.match(PostgreSQLParser.LPAREN)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ID:
                    self.state = 612
                    self.index_list()


                self.state = 615
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [PostgreSQLParser.IGNORE_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 617
                self.match(PostgreSQLParser.IGNORE_SYM)
                self.state = 618
                self.index_options()
                self.state = 619
                self.match(PostgreSQLParser.LPAREN)
                self.state = 620
                self.index_list()
                self.state = 621
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [PostgreSQLParser.FORCE_SYM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 623
                self.match(PostgreSQLParser.FORCE_SYM)
                self.state = 624
                self.index_options()
                self.state = 625
                self.match(PostgreSQLParser.LPAREN)
                self.state = 626
                self.index_list()
                self.state = 627
                self.match(PostgreSQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_hint_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Index_hint_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def index_hint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_hintContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_hintContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint_list

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex_hint_list"):
                listener.enterIndex_hint_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex_hint_list"):
                listener.exitIndex_hint_list(self)




    def index_hint_list(self):

        localctx = PostgreSQLParser.Index_hint_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_index_hint_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.index_hint()
            self.state = 636
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 632
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 633
                    self.index_hint() 
                self.state = 638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex_name"):
                listener.enterIndex_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex_name"):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = PostgreSQLParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Index_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def index_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_nameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_list

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex_list"):
                listener.enterIndex_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex_list"):
                listener.exitIndex_list(self)




    def index_list(self):

        localctx = PostgreSQLParser.Index_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_index_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.index_name()
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 642
                self.match(PostgreSQLParser.COMMA)
                self.state = 643
                self.index_name()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Index_optionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INDEX_SYM(self):
            return self.getToken(PostgreSQLParser.INDEX_SYM, 0)

        def KEY_SYM(self):
            return self.getToken(PostgreSQLParser.KEY_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_options

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex_options"):
                listener.enterIndex_options(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex_options"):
                listener.exitIndex_options(self)




    def index_options(self):

        localctx = PostgreSQLParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.INDEX_SYM or _la==PostgreSQLParser.KEY_SYM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FOR_SYM:
                self.state = 650
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 656
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.JOIN_SYM]:
                    self.state = 651
                    self.match(PostgreSQLParser.JOIN_SYM)
                    pass
                elif token in [PostgreSQLParser.ORDER_SYM]:
                    self.state = 652
                    self.match(PostgreSQLParser.ORDER_SYM)
                    self.state = 653
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                elif token in [PostgreSQLParser.GROUP_SYM]:
                    self.state = 654
                    self.match(PostgreSQLParser.GROUP_SYM)
                    self.state = 655
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Interval_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_SYM(self):
            return self.getToken(PostgreSQLParser.INTERVAL_SYM, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def interval_unit(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_unitContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_expr

        def enterRule(self, listener):
            if hasattr(listener, "enterInterval_expr"):
                listener.enterInterval_expr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInterval_expr"):
                listener.exitInterval_expr(self)




    def interval_expr(self):

        localctx = PostgreSQLParser.Interval_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_interval_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(PostgreSQLParser.INTERVAL_SYM)
            self.state = 661
            self.expression()
            self.state = 662
            self.interval_unit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Join_conditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_join_condition

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_condition"):
                listener.enterJoin_condition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_condition"):
                listener.exitJoin_condition(self)




    def join_condition(self):

        localctx = PostgreSQLParser.Join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_join_condition)
        try:
            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self.match(PostgreSQLParser.ON)
                self.state = 665
                self.expression()
                pass
            elif token in [PostgreSQLParser.USING_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 667
                self.column_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Limit_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def row_count(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_countContext,0)


        def offset(self):
            return self.getTypedRuleContext(PostgreSQLParser.OffsetContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def OFFSET_SYM(self):
            return self.getToken(PostgreSQLParser.OFFSET_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_limit_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterLimit_clause"):
                listener.enterLimit_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLimit_clause"):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = PostgreSQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_limit_clause)
        try:
            self.state = 681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.LIMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.match(PostgreSQLParser.LIMIT)

                self.state = 674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 671
                    self.offset()
                    self.state = 672
                    self.match(PostgreSQLParser.COMMA)


                self.state = 676
                self.row_count()
                pass
            elif token in [PostgreSQLParser.INTEGER_NUM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 677
                self.row_count()
                self.state = 678
                self.match(PostgreSQLParser.OFFSET_SYM)
                self.state = 679
                self.offset()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Match_against_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Match_against_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(PostgreSQLParser.MATCH, 0)

        def AGAINST(self):
            return self.getToken(PostgreSQLParser.AGAINST, 0)

        def column_spec(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,i)


        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def search_modifier(self):
            return self.getTypedRuleContext(PostgreSQLParser.Search_modifierContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_match_against_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterMatch_against_statement"):
                listener.enterMatch_against_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMatch_against_statement"):
                listener.exitMatch_against_statement(self)




    def match_against_statement(self):

        localctx = PostgreSQLParser.Match_against_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_match_against_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(PostgreSQLParser.MATCH)

            self.state = 684
            self.column_spec()
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 685
                self.match(PostgreSQLParser.COMMA)
                self.state = 686
                self.column_spec()
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 692
            self.match(PostgreSQLParser.AGAINST)

            self.state = 693
            self.expression()
            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 694
                self.search_modifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OffsetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.OffsetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset

        def enterRule(self, listener):
            if hasattr(listener, "enterOffset"):
                listener.enterOffset(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOffset"):
                listener.exitOffset(self)




    def offset(self):

        localctx = PostgreSQLParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_countContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Row_countContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row_count

        def enterRule(self, listener):
            if hasattr(listener, "enterRow_count"):
                listener.enterRow_count(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRow_count"):
                listener.exitRow_count(self)




    def row_count(self):

        localctx = PostgreSQLParser.Row_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_row_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Orderby_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def orderby_item(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Orderby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Orderby_itemContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterOrderby_clause"):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrderby_clause"):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = PostgreSQLParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(PostgreSQLParser.ORDER_SYM)
            self.state = 702
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 703
            self.orderby_item()
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 704
                self.match(PostgreSQLParser.COMMA)
                self.state = 705
                self.orderby_item()
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_itemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Orderby_itemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def groupby_item(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,0)


        def NULLS_SYM(self):
            return self.getToken(PostgreSQLParser.NULLS_SYM, 0)

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def FIRST_SYM(self):
            return self.getToken(PostgreSQLParser.FIRST_SYM, 0)

        def LAST_SYM(self):
            return self.getToken(PostgreSQLParser.LAST_SYM, 0)

        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_item

        def enterRule(self, listener):
            if hasattr(listener, "enterOrderby_item"):
                listener.enterOrderby_item(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrderby_item"):
                listener.exitOrderby_item(self)




    def orderby_item(self):

        localctx = PostgreSQLParser.Orderby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_orderby_item)
        self._la = 0 # Token type
        try:
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                self.groupby_item()
                self.state = 719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC:
                        self.state = 712
                        _la = self._input.LA(1)
                        if not(_la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 2:
                    self.state = 717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.NULLS_SYM:
                        self.state = 715
                        self.match(PostgreSQLParser.NULLS_SYM)
                        self.state = 716
                        _la = self._input.LA(1)
                        if not(_la==PostgreSQLParser.FIRST_SYM or _la==PostgreSQLParser.LAST_SYM):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.groupby_item()
                self.state = 722
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 723
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.GTH or _la==PostgreSQLParser.LTH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Partition_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYM(self):
            return self.getToken(PostgreSQLParser.PARTITION_SYM, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def partition_names(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_namesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterPartition_clause"):
                listener.enterPartition_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartition_clause"):
                listener.exitPartition_clause(self)




    def partition_clause(self):

        localctx = PostgreSQLParser.Partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(PostgreSQLParser.PARTITION_SYM)
            self.state = 728
            self.match(PostgreSQLParser.LPAREN)
            self.state = 729
            self.partition_names()
            self.state = 730
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Partition_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_name

        def enterRule(self, listener):
            if hasattr(listener, "enterPartition_name"):
                listener.enterPartition_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartition_name"):
                listener.exitPartition_name(self)




    def partition_name(self):

        localctx = PostgreSQLParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_namesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Partition_namesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def partition_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Partition_nameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_names

        def enterRule(self, listener):
            if hasattr(listener, "enterPartition_names"):
                listener.enterPartition_names(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartition_names"):
                listener.exitPartition_names(self)




    def partition_names(self):

        localctx = PostgreSQLParser.Partition_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_partition_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.partition_name()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 735
                self.match(PostgreSQLParser.COMMA)
                self.state = 736
                self.partition_name()
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_fac1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Bit_fac1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def simple_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def REGEXP(self):
            return self.getToken(PostgreSQLParser.REGEXP, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def predicate(self):
            return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def ESCAPE_SYM(self):
            return self.getToken(PostgreSQLParser.ESCAPE_SYM, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac1

        def enterRule(self, listener):
            if hasattr(listener, "enterBit_fac1"):
                listener.enterBit_fac1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBit_fac1"):
                listener.exitBit_fac1(self)




    def bit_fac1(self):

        localctx = PostgreSQLParser.Bit_fac1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_bit_fac1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NOT_SYM:
                self.state = 742
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.IN_SYM]:
                self.state = 745
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 748
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 746
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 747
                    self.expression_list()
                    pass


                pass
            elif token in [PostgreSQLParser.LIKE_SYM]:
                self.state = 750
                self.match(PostgreSQLParser.LIKE_SYM)
                self.state = 751
                self.simple_expr()
                self.state = 754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 752
                    self.match(PostgreSQLParser.ESCAPE_SYM)
                    self.state = 753
                    self.simple_expr()


                pass
            elif token in [PostgreSQLParser.REGEXP]:
                self.state = 756
                self.match(PostgreSQLParser.REGEXP)
                self.state = 759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 757
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 758
                    self.sbit_expr()
                    pass


                pass
            elif token in [PostgreSQLParser.BETWEEN]:
                self.state = 761
                self.match(PostgreSQLParser.BETWEEN)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.SYMMETRIC:
                    self.state = 762
                    self.match(PostgreSQLParser.SYMMETRIC)


                self.state = 767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 765
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 766
                    self.sbit_expr()
                    pass


                self.state = 769
                self.match(PostgreSQLParser.AND_SYM)
                self.state = 770
                self.predicate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_fac2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Bit_fac2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def SOUNDS_SYM(self):
            return self.getToken(PostgreSQLParser.SOUNDS_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac2

        def enterRule(self, listener):
            if hasattr(listener, "enterBit_fac2"):
                listener.enterBit_fac2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBit_fac2"):
                listener.exitBit_fac2(self)




    def bit_fac2(self):

        localctx = PostgreSQLParser.Bit_fac2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_bit_fac2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(PostgreSQLParser.SOUNDS_SYM)
            self.state = 775
            self.match(PostgreSQLParser.LIKE_SYM)
            self.state = 778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 776
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 777
                self.sbit_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.PredicateContext, self).__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def bit_fac1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac1Context,0)


        def bit_fac2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac2Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_predicate

        def enterRule(self, listener):
            if hasattr(listener, "enterPredicate"):
                listener.enterPredicate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPredicate"):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = PostgreSQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 780
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 781
                self.sbit_expr()
                pass


            self.state = 786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 784
                self.bit_fac1()

            elif la_ == 2:
                self.state = 785
                self.bit_fac2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.QueryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_query

        def enterRule(self, listener):
            if hasattr(listener, "enterQuery"):
                listener.enterQuery(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQuery"):
                listener.exitQuery(self)




    def query(self):

        localctx = PostgreSQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.select_statement()
            self.state = 789
            self.match(PostgreSQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Schema_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_schema_name

        def enterRule(self, listener):
            if hasattr(listener, "enterSchema_name"):
                listener.enterSchema_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSchema_name"):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = PostgreSQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Select_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def displayed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Displayed_columnContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_list

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_list"):
                listener.enterSelect_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_list"):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = PostgreSQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.state = 813
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BINARY, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.DIV, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GREATEST, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.SPOINT, PostgreSQLParser.SCIRCLE, PostgreSQLParser.SLINE, PostgreSQLParser.SELLIPSE, PostgreSQLParser.SPOLY, PostgreSQLParser.SPATH, PostgreSQLParser.SBOX, PostgreSQLParser.STRANS, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.NEGATION, PostgreSQLParser.SLENGTH, PostgreSQLParser.SCENTER, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.displayed_column()
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PostgreSQLParser.COMMA:
                    self.state = 794
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 795
                    self.displayed_column()
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [PostgreSQLParser.ASTERISK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 801
                self.match(PostgreSQLParser.ASTERISK)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COMMA:
                    self.state = 802
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 803
                    self.displayed_column()
                    self.state = 808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PostgreSQLParser.COMMA:
                        self.state = 804
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 805
                        self.displayed_column()
                        self.state = 810
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Select_statementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Select_expressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Select_expressionContext,i)


        def UNION_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.UNION_SYM)
            else:
                return self.getToken(PostgreSQLParser.UNION_SYM, i)

        def ALL(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ALL)
            else:
                return self.getToken(PostgreSQLParser.ALL, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_statement"):
                listener.enterSelect_statement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_statement"):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = PostgreSQLParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.select_expression()
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.UNION_SYM:
                self.state = 816
                self.match(PostgreSQLParser.UNION_SYM)
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ALL:
                    self.state = 817
                    self.match(PostgreSQLParser.ALL)


                self.state = 820
                self.select_expression()
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Simple_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Literal_valueContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def function_call(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_callContext,0)


        def ROW_SYM(self):
            return self.getToken(PostgreSQLParser.ROW_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def match_against_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Match_against_statementContext,0)


        def case_when_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statementContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simple_expr

        def enterRule(self, listener):
            if hasattr(listener, "enterSimple_expr"):
                listener.enterSimple_expr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimple_expr"):
                listener.exitSimple_expr(self)




    def simple_expr(self):

        localctx = PostgreSQLParser.Simple_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_simple_expr)
        try:
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 826
                self.literal_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 827
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                self.column_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 829
                self.function_call()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 830
                self.match(PostgreSQLParser.ROW_SYM)
                self.state = 831
                self.expression_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 832
                self.subquery()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 833
                self.match(PostgreSQLParser.EXISTS)
                self.state = 834
                self.subquery()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 835
                self.interval_expr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 836
                self.match_against_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 837
                self.case_when_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slice_specContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Slice_specContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LBRACK)
            else:
                return self.getToken(PostgreSQLParser.LBRACK, i)

        def INTEGER_NUM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RBRACK(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RBRACK)
            else:
                return self.getToken(PostgreSQLParser.RBRACK, i)

        def COLON(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COLON)
            else:
                return self.getToken(PostgreSQLParser.COLON, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_slice_spec

        def enterRule(self, listener):
            if hasattr(listener, "enterSlice_spec"):
                listener.enterSlice_spec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSlice_spec"):
                listener.exitSlice_spec(self)




    def slice_spec(self):

        localctx = PostgreSQLParser.Slice_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_slice_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 840
                self.match(PostgreSQLParser.LBRACK)
                self.state = 841
                self.match(PostgreSQLParser.INTEGER_NUM)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLON:
                    self.state = 842
                    self.match(PostgreSQLParser.COLON)
                    self.state = 843
                    self.match(PostgreSQLParser.INTEGER_NUM)


                self.state = 846
                self.match(PostgreSQLParser.RBRACK)
                self.state = 849 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.LBRACK):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.SubqueryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subquery

        def enterRule(self, listener):
            if hasattr(listener, "enterSubquery"):
                listener.enterSubquery(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubquery"):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = PostgreSQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(PostgreSQLParser.LPAREN)
            self.state = 852
            self.select_statement()
            self.state = 853
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_atomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Table_atomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def index_hint_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_hint_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def OJ_SYM(self):
            return self.getToken(PostgreSQLParser.OJ_SYM, 0)

        def table_reference(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_atom

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_atom"):
                listener.enterTable_atom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_atom"):
                listener.exitTable_atom(self)




    def table_atom(self):

        localctx = PostgreSQLParser.Table_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_table_atom)
        self._la = 0 # Token type
        try:
            self.state = 881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 855
                self.table_spec()
                self.state = 857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 856
                    self.partition_clause()


                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS_SYM or _la==PostgreSQLParser.ID:
                    self.state = 859
                    self.alias()


                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FORCE_SYM or _la==PostgreSQLParser.IGNORE_SYM or _la==PostgreSQLParser.USE_SYM:
                    self.state = 862
                    self.index_hint_list()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.subquery()
                self.state = 866
                self.alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 868
                self.match(PostgreSQLParser.LPAREN)
                self.state = 869
                self.table_references()
                self.state = 870
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 872
                self.match(PostgreSQLParser.OJ_SYM)
                self.state = 873
                self.table_reference()
                self.state = 874
                self.match(PostgreSQLParser.LEFT)
                self.state = 875
                self.match(PostgreSQLParser.OUTER)
                self.state = 876
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 877
                self.table_reference()
                self.state = 878
                self.match(PostgreSQLParser.ON)
                self.state = 879
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_name"):
                listener.enterTable_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_name"):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = PostgreSQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Table_factor1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def table_factor2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor2Context,0)


        def JOIN_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def table_atom(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def join_condition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def INNER_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INNER_SYM)
            else:
                return self.getToken(PostgreSQLParser.INNER_SYM, i)

        def CROSS(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CROSS)
            else:
                return self.getToken(PostgreSQLParser.CROSS, i)

        def LEFT(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor1

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_factor1"):
                listener.enterTable_factor1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_factor1"):
                listener.exitTable_factor1(self)




    def table_factor1(self):

        localctx = PostgreSQLParser.Table_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_table_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.table_factor2()
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.CROSS or _la==PostgreSQLParser.INNER_SYM or _la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT:
                        self.state = 886
                        _la = self._input.LA(1)
                        if not(_la==PostgreSQLParser.CROSS or _la==PostgreSQLParser.INNER_SYM or _la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 889
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 890
                    self.table_atom()
                    self.state = 892
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                    if la_ == 1:
                        self.state = 891
                        self.join_condition()

             
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Table_factor2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def table_factor3(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor3Context,0)


        def STRAIGHT_JOIN(self):
            return self.getToken(PostgreSQLParser.STRAIGHT_JOIN, 0)

        def table_atom(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor2

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_factor2"):
                listener.enterTable_factor2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_factor2"):
                listener.exitTable_factor2(self)




    def table_factor2(self):

        localctx = PostgreSQLParser.Table_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_table_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.table_factor3()
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.STRAIGHT_JOIN:
                self.state = 900
                self.match(PostgreSQLParser.STRAIGHT_JOIN)
                self.state = 901
                self.table_atom()
                self.state = 904
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 902
                    self.match(PostgreSQLParser.ON)
                    self.state = 903
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor3Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Table_factor3Context, self).__init__(parent, invokingState)
            self.parser = parser

        def table_factor4(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_factor4Context,i)


        def JOIN_SYM(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def join_condition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def LEFT(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def OUTER(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OUTER)
            else:
                return self.getToken(PostgreSQLParser.OUTER, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor3

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_factor3"):
                listener.enterTable_factor3(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_factor3"):
                listener.exitTable_factor3(self)




    def table_factor3(self):

        localctx = PostgreSQLParser.Table_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_table_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.table_factor4()
            self.state = 919
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 909
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.OUTER:
                        self.state = 910
                        self.match(PostgreSQLParser.OUTER)


                    self.state = 913
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 914
                    self.table_factor4()
                    self.state = 915
                    self.join_condition() 
                self.state = 921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor4Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Table_factor4Context, self).__init__(parent, invokingState)
            self.parser = parser

        def table_atom(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor4

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_factor4"):
                listener.enterTable_factor4(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_factor4"):
                listener.exitTable_factor4(self)




    def table_factor4(self):

        localctx = PostgreSQLParser.Table_factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_table_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.table_atom()
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NATURAL:
                self.state = 923
                self.match(PostgreSQLParser.NATURAL)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT:
                    self.state = 924
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.OUTER:
                        self.state = 925
                        self.match(PostgreSQLParser.OUTER)




                self.state = 930
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 931
                self.table_atom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Table_referenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_factor1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor1Context,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def values_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Values_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_reference

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_reference"):
                listener.enterTable_reference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_reference"):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = PostgreSQLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.table_factor1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 935
                self.match(PostgreSQLParser.LPAREN)
                self.state = 936
                self.values_list()
                self.state = 937
                self.match(PostgreSQLParser.RPAREN)
                self.state = 939
                self.alias()
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 940
                    self.column_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_referencesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Table_referencesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_references

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_references"):
                listener.enterTable_references(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_references"):
                listener.exitTable_references(self)




    def table_references(self):

        localctx = PostgreSQLParser.Table_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_table_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.table_reference()
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 946
                self.match(PostgreSQLParser.COMMA)
                self.state = 947
                self.table_reference()
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_specContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Table_specContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_spec

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_spec"):
                listener.enterTable_spec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_spec"):
                listener.exitTable_spec(self)




    def table_spec(self):

        localctx = PostgreSQLParser.Table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_table_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 953
                self.schema_name()
                self.state = 954
                self.match(PostgreSQLParser.DOT)


            self.state = 958
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Values_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Values_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def expression_list(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_values_list

        def enterRule(self, listener):
            if hasattr(listener, "enterValues_list"):
                listener.enterValues_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitValues_list"):
                listener.exitValues_list(self)




    def values_list(self):

        localctx = PostgreSQLParser.Values_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_values_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(PostgreSQLParser.VALUES)

            self.state = 961
            self.expression_list()
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 962
                self.match(PostgreSQLParser.COMMA)
                self.state = 963
                self.expression_list()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Where_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_where_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterWhere_clause"):
                listener.enterWhere_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWhere_clause"):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = PostgreSQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(PostgreSQLParser.WHERE)
            self.state = 970
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pg_sphere_opContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Pg_sphere_opContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SCONTAINS(self):
            return self.getToken(PostgreSQLParser.SCONTAINS, 0)

        def SCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SCONTAINS2, 0)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def SLEFTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTCONTAINS2, 0)

        def SNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS, 0)

        def SNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS2, 0)

        def SLEFTNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS, 0)

        def SLEFTNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS2, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def SNOTOVERLAP(self):
            return self.getToken(PostgreSQLParser.SNOTOVERLAP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_op

        def enterRule(self, listener):
            if hasattr(listener, "enterPg_sphere_op"):
                listener.enterPg_sphere_op(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPg_sphere_op"):
                listener.exitPg_sphere_op(self)




    def pg_sphere_op(self):

        localctx = PostgreSQLParser.Pg_sphere_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pg_sphere_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            _la = self._input.LA(1)
            if not(((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (PostgreSQLParser.AND_SYM - 343)) | (1 << (PostgreSQLParser.NEGATION - 343)) | (1 << (PostgreSQLParser.SCONTAINS - 343)) | (1 << (PostgreSQLParser.SCONTAINS2 - 343)) | (1 << (PostgreSQLParser.SLEFTCONTAINS2 - 343)) | (1 << (PostgreSQLParser.SNOTCONTAINS - 343)) | (1 << (PostgreSQLParser.SNOTCONTAINS2 - 343)) | (1 << (PostgreSQLParser.SLEFTNOTCONTAINS - 343)) | (1 << (PostgreSQLParser.SLEFTNOTCONTAINS2 - 343)) | (1 << (PostgreSQLParser.SNOTOVERLAP - 343)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sbit_exprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Sbit_exprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pg_sphere_object(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Pg_sphere_objectContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_objectContext,i)


        def spoint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def pg_sphere_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_opContext,0)


        def simple_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def SCROSS(self):
            return self.getToken(PostgreSQLParser.SCROSS, 0)

        def SDISTANCE(self):
            return self.getToken(PostgreSQLParser.SDISTANCE, 0)

        def scircle(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ScircleContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,i)


        def SLENGTH(self):
            return self.getToken(PostgreSQLParser.SLENGTH, 0)

        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def SCENTER(self):
            return self.getToken(PostgreSQLParser.SCENTER, 0)

        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def MINUS(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def strans(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.StransContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.StransContext,i)


        def PLUS(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbit_expr

        def enterRule(self, listener):
            if hasattr(listener, "enterSbit_expr"):
                listener.enterSbit_expr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSbit_expr"):
                listener.exitSbit_expr(self)




    def sbit_expr(self):

        localctx = PostgreSQLParser.Sbit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_sbit_expr)
        self._la = 0 # Token type
        try:
            self.state = 1048
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 976
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.DIV, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GREATEST, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.SCIRCLE, PostgreSQLParser.SLINE, PostgreSQLParser.SELLIPSE, PostgreSQLParser.SPOLY, PostgreSQLParser.SPATH, PostgreSQLParser.SBOX, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 974
                    self.pg_sphere_object()
                    pass
                elif token in [PostgreSQLParser.SPOINT]:
                    self.state = 975
                    self.spoint()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SPOINT]:
                    self.state = 978
                    self.spoint()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.DIV, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GREATEST, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 979
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 982
                self.pg_sphere_op()
                self.state = 983
                self.pg_sphere_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 985
                self.pg_sphere_object()
                self.state = 986
                self.match(PostgreSQLParser.EQ)
                self.state = 987
                self.pg_sphere_object()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 989
                self.pg_sphere_object()
                self.state = 990
                self.pg_sphere_op()
                self.state = 991
                self.pg_sphere_object()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 993
                    self.sline()
                    pass

                elif la_ == 2:
                    self.state = 994
                    self.simple_expr()
                    self.state = 995
                    self.match(PostgreSQLParser.SCROSS)
                    self.state = 996
                    self.sline()
                    pass

                elif la_ == 3:
                    self.state = 998
                    self.simple_expr()
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1004
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SPOINT]:
                    self.state = 1001
                    self.spoint()
                    pass
                elif token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 1002
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.DIV, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GREATEST, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 1003
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1006
                self.match(PostgreSQLParser.SDISTANCE)
                self.state = 1010
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SPOINT]:
                    self.state = 1007
                    self.spoint()
                    pass
                elif token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 1008
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.DIV, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GREATEST, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 1009
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1012
                self.match(PostgreSQLParser.SLENGTH)
                self.state = 1017
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 1013
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.SBOX]:
                    self.state = 1014
                    self.sbox()
                    pass
                elif token in [PostgreSQLParser.SPOLY]:
                    self.state = 1015
                    self.spoly()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.DIV, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GREATEST, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 1016
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1019
                self.match(PostgreSQLParser.SCENTER)
                self.state = 1023
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 1020
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.SELLIPSE]:
                    self.state = 1021
                    self.sellipse()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.DIV, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GREATEST, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 1022
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1025
                self.match(PostgreSQLParser.MINUS)
                self.state = 1029
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SLINE]:
                    self.state = 1026
                    self.sline()
                    pass
                elif token in [PostgreSQLParser.SPATH]:
                    self.state = 1027
                    self.spath()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.DIV, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GREATEST, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 1028
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1038
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1031
                    self.spoint()

                elif la_ == 2:
                    self.state = 1032
                    self.scircle()

                elif la_ == 3:
                    self.state = 1033
                    self.sline()

                elif la_ == 4:
                    self.state = 1034
                    self.sellipse()

                elif la_ == 5:
                    self.state = 1035
                    self.spoly()

                elif la_ == 6:
                    self.state = 1036
                    self.spath()

                elif la_ == 7:
                    self.state = 1037
                    self.simple_expr()


                self.state = 1044 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS:
                            self.state = 1040
                            _la = self._input.LA(1)
                            if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1043
                        self.strans()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1046 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpointContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.SpointContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SPOINT(self):
            return self.getToken(PostgreSQLParser.SPOINT, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoint

        def enterRule(self, listener):
            if hasattr(listener, "enterSpoint"):
                listener.enterSpoint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpoint"):
                listener.exitSpoint(self)




    def spoint(self):

        localctx = PostgreSQLParser.SpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_spoint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(PostgreSQLParser.SPOINT)
            self.state = 1051
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1052
            self.bit_expr()
            self.state = 1053
            self.match(PostgreSQLParser.COMMA)
            self.state = 1054
            self.bit_expr()
            self.state = 1055
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScircleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.ScircleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SCIRCLE(self):
            return self.getToken(PostgreSQLParser.SCIRCLE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_scircle

        def enterRule(self, listener):
            if hasattr(listener, "enterScircle"):
                listener.enterScircle(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScircle"):
                listener.exitScircle(self)




    def scircle(self):

        localctx = PostgreSQLParser.ScircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_scircle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(PostgreSQLParser.SCIRCLE)
            self.state = 1058
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1059
            self.spoint()
            self.state = 1060
            self.match(PostgreSQLParser.COMMA)
            self.state = 1061
            self.bit_expr()
            self.state = 1062
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SlineContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.SlineContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SLINE(self):
            return self.getToken(PostgreSQLParser.SLINE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def strans(self):
            return self.getTypedRuleContext(PostgreSQLParser.StransContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sline

        def enterRule(self, listener):
            if hasattr(listener, "enterSline"):
                listener.enterSline(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSline"):
                listener.exitSline(self)




    def sline(self):

        localctx = PostgreSQLParser.SlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_sline)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.match(PostgreSQLParser.SLINE)
                self.state = 1065
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1066
                self.spoint()
                self.state = 1067
                self.match(PostgreSQLParser.COMMA)
                self.state = 1068
                self.spoint()
                self.state = 1069
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1071
                self.match(PostgreSQLParser.SLINE)
                self.state = 1072
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1073
                self.strans()
                self.state = 1074
                self.match(PostgreSQLParser.COMMA)
                self.state = 1075
                self.bit_expr()
                self.state = 1076
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SellipseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.SellipseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SELLIPSE(self):
            return self.getToken(PostgreSQLParser.SELLIPSE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def bit_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sellipse

        def enterRule(self, listener):
            if hasattr(listener, "enterSellipse"):
                listener.enterSellipse(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSellipse"):
                listener.exitSellipse(self)




    def sellipse(self):

        localctx = PostgreSQLParser.SellipseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_sellipse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(PostgreSQLParser.SELLIPSE)
            self.state = 1081
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1082
            self.spoint()
            self.state = 1083
            self.match(PostgreSQLParser.COMMA)
            self.state = 1084
            self.bit_expr()
            self.state = 1085
            self.match(PostgreSQLParser.COMMA)
            self.state = 1086
            self.bit_expr()
            self.state = 1087
            self.match(PostgreSQLParser.COMMA)
            self.state = 1088
            self.bit_expr()
            self.state = 1089
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SboxContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.SboxContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SBOX(self):
            return self.getToken(PostgreSQLParser.SBOX, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbox

        def enterRule(self, listener):
            if hasattr(listener, "enterSbox"):
                listener.enterSbox(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSbox"):
                listener.exitSbox(self)




    def sbox(self):

        localctx = PostgreSQLParser.SboxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_sbox)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(PostgreSQLParser.SBOX)
            self.state = 1092
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1093
            self.spoint()
            self.state = 1094
            self.match(PostgreSQLParser.COMMA)
            self.state = 1095
            self.spoint()
            self.state = 1096
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpolyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.SpolyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SPOLY(self):
            return self.getToken(PostgreSQLParser.SPOLY, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoly

        def enterRule(self, listener):
            if hasattr(listener, "enterSpoly"):
                listener.enterSpoly(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpoly"):
                listener.exitSpoly(self)




    def spoly(self):

        localctx = PostgreSQLParser.SpolyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_spoly)
        try:
            self.state = 1109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1098
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1099
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1101
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1102
                self.column_spec()
                self.state = 1103
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1105
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1106
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1107
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 1108
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpathContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.SpathContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SPATH(self):
            return self.getToken(PostgreSQLParser.SPATH, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spath

        def enterRule(self, listener):
            if hasattr(listener, "enterSpath"):
                listener.enterSpath(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpath"):
                listener.exitSpath(self)




    def spath(self):

        localctx = PostgreSQLParser.SpathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_spath)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.match(PostgreSQLParser.SPATH)
                self.state = 1112
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1113
                self.match(PostgreSQLParser.SPATH)
                self.state = 1114
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1115
                self.column_spec()
                self.state = 1116
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StransContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.StransContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRANS(self):
            return self.getToken(PostgreSQLParser.STRANS, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def TRANS(self):
            return self.getToken(PostgreSQLParser.TRANS, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_strans

        def enterRule(self, listener):
            if hasattr(listener, "enterStrans"):
                listener.enterStrans(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStrans"):
                listener.exitStrans(self)




    def strans(self):

        localctx = PostgreSQLParser.StransContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_strans)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(PostgreSQLParser.STRANS)
            self.state = 1121
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1122
            self.bit_expr()
            self.state = 1123
            self.match(PostgreSQLParser.COMMA)
            self.state = 1124
            self.bit_expr()
            self.state = 1125
            self.match(PostgreSQLParser.COMMA)
            self.state = 1126
            self.bit_expr()
            self.state = 1127
            self.match(PostgreSQLParser.COMMA)
            self.state = 1128
            self.match(PostgreSQLParser.TRANS)
            self.state = 1129
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pg_sphere_objectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PostgreSQLParser.Pg_sphere_objectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def scircle(self):
            return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,0)


        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_object

        def enterRule(self, listener):
            if hasattr(listener, "enterPg_sphere_object"):
                listener.enterPg_sphere_object(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPg_sphere_object"):
                listener.exitPg_sphere_object(self)




    def pg_sphere_object(self):

        localctx = PostgreSQLParser.Pg_sphere_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_pg_sphere_object)
        try:
            self.state = 1138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.SCIRCLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1131
                self.scircle()
                pass
            elif token in [PostgreSQLParser.SLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self.sline()
                pass
            elif token in [PostgreSQLParser.SELLIPSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1133
                self.sellipse()
                pass
            elif token in [PostgreSQLParser.SBOX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1134
                self.sbox()
                pass
            elif token in [PostgreSQLParser.SPOLY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1135
                self.spoly()
                pass
            elif token in [PostgreSQLParser.SPATH]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1136
                self.spath()
                pass
            elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ADDDATE, PostgreSQLParser.ADDTIME, PostgreSQLParser.AES_DECRYPT, PostgreSQLParser.AES_ENCRYPT, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BENCHMARK, PostgreSQLParser.BIN, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHAR, PostgreSQLParser.CHARSET, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.COERCIBILITY, PostgreSQLParser.COLLATION, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONNECTION_ID, PostgreSQLParser.CONV, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CRC32, PostgreSQLParser.CURDATE, PostgreSQLParser.CURRENT_USER, PostgreSQLParser.CURTIME, PostgreSQLParser.DATABASE, PostgreSQLParser.DATEDIFF, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_SUB, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DECODE, PostgreSQLParser.DEFAULT, PostgreSQLParser.DEGREES, PostgreSQLParser.DES_DECRYPT, PostgreSQLParser.DES_ENCRYPT, PostgreSQLParser.DIV, PostgreSQLParser.ELT, PostgreSQLParser.ENCODE, PostgreSQLParser.ENCRYPT, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXPORT_SET, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FIELD, PostgreSQLParser.FIND_IN_SET, PostgreSQLParser.FLOOR, PostgreSQLParser.FORMAT, PostgreSQLParser.FOUND_ROWS, PostgreSQLParser.FROM_BASE64, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GET_LOCK, PostgreSQLParser.GREATEST, PostgreSQLParser.GROUP_CONCAT, PostgreSQLParser.HEX, PostgreSQLParser.HOUR, PostgreSQLParser.IF, PostgreSQLParser.IFNULL, PostgreSQLParser.INET_ATON, PostgreSQLParser.INET_NTOA, PostgreSQLParser.INSERT, PostgreSQLParser.INSTR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.IS_FREE_LOCK, PostgreSQLParser.IS_USED_LOCK, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LAST_INSERT_ID, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOAD_FILE, PostgreSQLParser.LOCATE, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAKE_SET, PostgreSQLParser.MASTER_POS_WAIT, PostgreSQLParser.MATCH, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MID, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NAME_CONST, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.OCT, PostgreSQLParser.OLD_PASSWORD, PostgreSQLParser.ORD, PostgreSQLParser.PASSWORD, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.QUOTE, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.RELEASE_LOCK, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SCHEMA, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SESSION_USER, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SLEEP, PostgreSQLParser.SOUNDEX, PostgreSQLParser.SPACE, PostgreSQLParser.SQRT, PostgreSQLParser.STD, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STRCMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBSTRING_INDEX, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.SYSTEM_USER, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_BASE64, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNHEX, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.USER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.UUID, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.VERSION_SYM, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.WEIGHT_STRING, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1137
                self.simple_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





