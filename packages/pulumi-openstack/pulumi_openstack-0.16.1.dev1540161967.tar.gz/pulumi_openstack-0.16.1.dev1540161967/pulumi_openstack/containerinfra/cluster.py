# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Cluster(pulumi.CustomResource):
    """
    Manages a V1 Magnum cluster resource within OpenStack.
    """
    def __init__(__self__, __name__, __opts__=None, cluster_template_id=None, create_timeout=None, discovery_url=None, docker_volume_size=None, flavor=None, keypair=None, labels=None, master_count=None, master_flavor=None, name=None, node_count=None, region=None):
        """Create a Cluster resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not cluster_template_id:
            raise TypeError('Missing required property cluster_template_id')
        elif not isinstance(cluster_template_id, basestring):
            raise TypeError('Expected property cluster_template_id to be a basestring')
        __self__.cluster_template_id = cluster_template_id
        __props__['clusterTemplateId'] = cluster_template_id

        if create_timeout and not isinstance(create_timeout, int):
            raise TypeError('Expected property create_timeout to be a int')
        __self__.create_timeout = create_timeout
        __props__['createTimeout'] = create_timeout

        if discovery_url and not isinstance(discovery_url, basestring):
            raise TypeError('Expected property discovery_url to be a basestring')
        __self__.discovery_url = discovery_url
        __props__['discoveryUrl'] = discovery_url

        if docker_volume_size and not isinstance(docker_volume_size, int):
            raise TypeError('Expected property docker_volume_size to be a int')
        __self__.docker_volume_size = docker_volume_size
        __props__['dockerVolumeSize'] = docker_volume_size

        if flavor and not isinstance(flavor, basestring):
            raise TypeError('Expected property flavor to be a basestring')
        __self__.flavor = flavor
        __props__['flavor'] = flavor

        if keypair and not isinstance(keypair, basestring):
            raise TypeError('Expected property keypair to be a basestring')
        __self__.keypair = keypair
        __props__['keypair'] = keypair

        if labels and not isinstance(labels, dict):
            raise TypeError('Expected property labels to be a dict')
        __self__.labels = labels
        __props__['labels'] = labels

        if master_count and not isinstance(master_count, int):
            raise TypeError('Expected property master_count to be a int')
        __self__.master_count = master_count
        __props__['masterCount'] = master_count

        if master_flavor and not isinstance(master_flavor, basestring):
            raise TypeError('Expected property master_flavor to be a basestring')
        __self__.master_flavor = master_flavor
        __props__['masterFlavor'] = master_flavor

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if node_count and not isinstance(node_count, int):
            raise TypeError('Expected property node_count to be a int')
        __self__.node_count = node_count
        __props__['nodeCount'] = node_count

        if region and not isinstance(region, basestring):
            raise TypeError('Expected property region to be a basestring')
        __self__.region = region
        __props__['region'] = region

        __self__.api_address = pulumi.runtime.UNKNOWN
        __self__.coe_version = pulumi.runtime.UNKNOWN
        __self__.container_version = pulumi.runtime.UNKNOWN
        __self__.created_at = pulumi.runtime.UNKNOWN
        __self__.master_addresses = pulumi.runtime.UNKNOWN
        __self__.node_addresses = pulumi.runtime.UNKNOWN
        __self__.project_id = pulumi.runtime.UNKNOWN
        __self__.stack_id = pulumi.runtime.UNKNOWN
        __self__.updated_at = pulumi.runtime.UNKNOWN
        __self__.user_id = pulumi.runtime.UNKNOWN

        super(Cluster, __self__).__init__(
            'openstack:containerinfra/cluster:Cluster',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'apiAddress' in outs:
            self.api_address = outs['apiAddress']
        if 'clusterTemplateId' in outs:
            self.cluster_template_id = outs['clusterTemplateId']
        if 'coeVersion' in outs:
            self.coe_version = outs['coeVersion']
        if 'containerVersion' in outs:
            self.container_version = outs['containerVersion']
        if 'createTimeout' in outs:
            self.create_timeout = outs['createTimeout']
        if 'createdAt' in outs:
            self.created_at = outs['createdAt']
        if 'discoveryUrl' in outs:
            self.discovery_url = outs['discoveryUrl']
        if 'dockerVolumeSize' in outs:
            self.docker_volume_size = outs['dockerVolumeSize']
        if 'flavor' in outs:
            self.flavor = outs['flavor']
        if 'keypair' in outs:
            self.keypair = outs['keypair']
        if 'labels' in outs:
            self.labels = outs['labels']
        if 'masterAddresses' in outs:
            self.master_addresses = outs['masterAddresses']
        if 'masterCount' in outs:
            self.master_count = outs['masterCount']
        if 'masterFlavor' in outs:
            self.master_flavor = outs['masterFlavor']
        if 'name' in outs:
            self.name = outs['name']
        if 'nodeAddresses' in outs:
            self.node_addresses = outs['nodeAddresses']
        if 'nodeCount' in outs:
            self.node_count = outs['nodeCount']
        if 'projectId' in outs:
            self.project_id = outs['projectId']
        if 'region' in outs:
            self.region = outs['region']
        if 'stackId' in outs:
            self.stack_id = outs['stackId']
        if 'updatedAt' in outs:
            self.updated_at = outs['updatedAt']
        if 'userId' in outs:
            self.user_id = outs['userId']
