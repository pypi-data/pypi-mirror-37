# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class ClusterTemplate(pulumi.CustomResource):
    """
    Manages a V1 Magnum cluster template resource within OpenStack.
    """
    def __init__(__self__, __name__, __opts__=None, apiserver_port=None, cluster_distro=None, coe=None, dns_nameserver=None, docker_storage_driver=None, docker_volume_size=None, external_network_id=None, fixed_network=None, fixed_subnet=None, flavor=None, floating_ip_enabled=None, http_proxy=None, https_proxy=None, image=None, insecure_registry=None, keypair_id=None, labels=None, master_flavor=None, master_lb_enabled=None, name=None, network_driver=None, no_proxy=None, public=None, region=None, registry_enabled=None, server_type=None, tls_disabled=None, volume_driver=None):
        """Create a ClusterTemplate resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if apiserver_port and not isinstance(apiserver_port, int):
            raise TypeError('Expected property apiserver_port to be a int')
        __self__.apiserver_port = apiserver_port
        __props__['apiserverPort'] = apiserver_port

        if cluster_distro and not isinstance(cluster_distro, basestring):
            raise TypeError('Expected property cluster_distro to be a basestring')
        __self__.cluster_distro = cluster_distro
        __props__['clusterDistro'] = cluster_distro

        if not coe:
            raise TypeError('Missing required property coe')
        elif not isinstance(coe, basestring):
            raise TypeError('Expected property coe to be a basestring')
        __self__.coe = coe
        __props__['coe'] = coe

        if dns_nameserver and not isinstance(dns_nameserver, basestring):
            raise TypeError('Expected property dns_nameserver to be a basestring')
        __self__.dns_nameserver = dns_nameserver
        __props__['dnsNameserver'] = dns_nameserver

        if docker_storage_driver and not isinstance(docker_storage_driver, basestring):
            raise TypeError('Expected property docker_storage_driver to be a basestring')
        __self__.docker_storage_driver = docker_storage_driver
        __props__['dockerStorageDriver'] = docker_storage_driver

        if docker_volume_size and not isinstance(docker_volume_size, int):
            raise TypeError('Expected property docker_volume_size to be a int')
        __self__.docker_volume_size = docker_volume_size
        __props__['dockerVolumeSize'] = docker_volume_size

        if external_network_id and not isinstance(external_network_id, basestring):
            raise TypeError('Expected property external_network_id to be a basestring')
        __self__.external_network_id = external_network_id
        __props__['externalNetworkId'] = external_network_id

        if fixed_network and not isinstance(fixed_network, basestring):
            raise TypeError('Expected property fixed_network to be a basestring')
        __self__.fixed_network = fixed_network
        __props__['fixedNetwork'] = fixed_network

        if fixed_subnet and not isinstance(fixed_subnet, basestring):
            raise TypeError('Expected property fixed_subnet to be a basestring')
        __self__.fixed_subnet = fixed_subnet
        __props__['fixedSubnet'] = fixed_subnet

        if flavor and not isinstance(flavor, basestring):
            raise TypeError('Expected property flavor to be a basestring')
        __self__.flavor = flavor
        __props__['flavor'] = flavor

        if floating_ip_enabled and not isinstance(floating_ip_enabled, bool):
            raise TypeError('Expected property floating_ip_enabled to be a bool')
        __self__.floating_ip_enabled = floating_ip_enabled
        __props__['floatingIpEnabled'] = floating_ip_enabled

        if http_proxy and not isinstance(http_proxy, basestring):
            raise TypeError('Expected property http_proxy to be a basestring')
        __self__.http_proxy = http_proxy
        __props__['httpProxy'] = http_proxy

        if https_proxy and not isinstance(https_proxy, basestring):
            raise TypeError('Expected property https_proxy to be a basestring')
        __self__.https_proxy = https_proxy
        __props__['httpsProxy'] = https_proxy

        if not image:
            raise TypeError('Missing required property image')
        elif not isinstance(image, basestring):
            raise TypeError('Expected property image to be a basestring')
        __self__.image = image
        __props__['image'] = image

        if insecure_registry and not isinstance(insecure_registry, basestring):
            raise TypeError('Expected property insecure_registry to be a basestring')
        __self__.insecure_registry = insecure_registry
        __props__['insecureRegistry'] = insecure_registry

        if keypair_id and not isinstance(keypair_id, basestring):
            raise TypeError('Expected property keypair_id to be a basestring')
        __self__.keypair_id = keypair_id
        __props__['keypairId'] = keypair_id

        if labels and not isinstance(labels, dict):
            raise TypeError('Expected property labels to be a dict')
        __self__.labels = labels
        __props__['labels'] = labels

        if master_flavor and not isinstance(master_flavor, basestring):
            raise TypeError('Expected property master_flavor to be a basestring')
        __self__.master_flavor = master_flavor
        __props__['masterFlavor'] = master_flavor

        if master_lb_enabled and not isinstance(master_lb_enabled, bool):
            raise TypeError('Expected property master_lb_enabled to be a bool')
        __self__.master_lb_enabled = master_lb_enabled
        __props__['masterLbEnabled'] = master_lb_enabled

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if network_driver and not isinstance(network_driver, basestring):
            raise TypeError('Expected property network_driver to be a basestring')
        __self__.network_driver = network_driver
        __props__['networkDriver'] = network_driver

        if no_proxy and not isinstance(no_proxy, basestring):
            raise TypeError('Expected property no_proxy to be a basestring')
        __self__.no_proxy = no_proxy
        __props__['noProxy'] = no_proxy

        if public and not isinstance(public, bool):
            raise TypeError('Expected property public to be a bool')
        __self__.public = public
        __props__['public'] = public

        if region and not isinstance(region, basestring):
            raise TypeError('Expected property region to be a basestring')
        __self__.region = region
        __props__['region'] = region

        if registry_enabled and not isinstance(registry_enabled, bool):
            raise TypeError('Expected property registry_enabled to be a bool')
        __self__.registry_enabled = registry_enabled
        __props__['registryEnabled'] = registry_enabled

        if server_type and not isinstance(server_type, basestring):
            raise TypeError('Expected property server_type to be a basestring')
        __self__.server_type = server_type
        __props__['serverType'] = server_type

        if tls_disabled and not isinstance(tls_disabled, bool):
            raise TypeError('Expected property tls_disabled to be a bool')
        __self__.tls_disabled = tls_disabled
        __props__['tlsDisabled'] = tls_disabled

        if volume_driver and not isinstance(volume_driver, basestring):
            raise TypeError('Expected property volume_driver to be a basestring')
        __self__.volume_driver = volume_driver
        __props__['volumeDriver'] = volume_driver

        __self__.created_at = pulumi.runtime.UNKNOWN
        __self__.project_id = pulumi.runtime.UNKNOWN
        __self__.updated_at = pulumi.runtime.UNKNOWN
        __self__.user_id = pulumi.runtime.UNKNOWN

        super(ClusterTemplate, __self__).__init__(
            'openstack:containerinfra/clusterTemplate:ClusterTemplate',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'apiserverPort' in outs:
            self.apiserver_port = outs['apiserverPort']
        if 'clusterDistro' in outs:
            self.cluster_distro = outs['clusterDistro']
        if 'coe' in outs:
            self.coe = outs['coe']
        if 'createdAt' in outs:
            self.created_at = outs['createdAt']
        if 'dnsNameserver' in outs:
            self.dns_nameserver = outs['dnsNameserver']
        if 'dockerStorageDriver' in outs:
            self.docker_storage_driver = outs['dockerStorageDriver']
        if 'dockerVolumeSize' in outs:
            self.docker_volume_size = outs['dockerVolumeSize']
        if 'externalNetworkId' in outs:
            self.external_network_id = outs['externalNetworkId']
        if 'fixedNetwork' in outs:
            self.fixed_network = outs['fixedNetwork']
        if 'fixedSubnet' in outs:
            self.fixed_subnet = outs['fixedSubnet']
        if 'flavor' in outs:
            self.flavor = outs['flavor']
        if 'floatingIpEnabled' in outs:
            self.floating_ip_enabled = outs['floatingIpEnabled']
        if 'httpProxy' in outs:
            self.http_proxy = outs['httpProxy']
        if 'httpsProxy' in outs:
            self.https_proxy = outs['httpsProxy']
        if 'image' in outs:
            self.image = outs['image']
        if 'insecureRegistry' in outs:
            self.insecure_registry = outs['insecureRegistry']
        if 'keypairId' in outs:
            self.keypair_id = outs['keypairId']
        if 'labels' in outs:
            self.labels = outs['labels']
        if 'masterFlavor' in outs:
            self.master_flavor = outs['masterFlavor']
        if 'masterLbEnabled' in outs:
            self.master_lb_enabled = outs['masterLbEnabled']
        if 'name' in outs:
            self.name = outs['name']
        if 'networkDriver' in outs:
            self.network_driver = outs['networkDriver']
        if 'noProxy' in outs:
            self.no_proxy = outs['noProxy']
        if 'projectId' in outs:
            self.project_id = outs['projectId']
        if 'public' in outs:
            self.public = outs['public']
        if 'region' in outs:
            self.region = outs['region']
        if 'registryEnabled' in outs:
            self.registry_enabled = outs['registryEnabled']
        if 'serverType' in outs:
            self.server_type = outs['serverType']
        if 'tlsDisabled' in outs:
            self.tls_disabled = outs['tlsDisabled']
        if 'updatedAt' in outs:
            self.updated_at = outs['updatedAt']
        if 'userId' in outs:
            self.user_id = outs['userId']
        if 'volumeDriver' in outs:
            self.volume_driver = outs['volumeDriver']
