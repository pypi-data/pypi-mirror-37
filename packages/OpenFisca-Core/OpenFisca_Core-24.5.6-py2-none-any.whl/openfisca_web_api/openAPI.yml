swagger: "2.0"
info:
  title: "{COUNTRY_PACKAGE_NAME} Web API"
  description: "The OpenFisca Web API lets you get up-to-date information and formulas included in the {COUNTRY_PACKAGE_NAME} legislation."
  version: null
  termsOfService: "https://openfisca.org/doc/publishing"
  contact:
    email: "contact@openfisca.fr"
  license:
    name: "AGPL"
    url: "https://www.gnu.org/licenses/agpl-3.0"
host: null
schemes:
  - "https"
tags:
  - name: "Parameters"
    description: "A parameter is a numeric property of the legislation that can evolve over time."
    externalDocs:
      description: "Parameters documentation"
      url: "https://openfisca.org/doc/parameters"
  - name: "Variables"
    description: "A variable depends on a person, or an entity (e.g. zip code, salary, income tax)."
    externalDocs:
      description: "Variables documentation"
      url: "https://openfisca.org/doc/variables"
  - name: "Entities"
    description: "An entity is a person of a group of individuals (such as a household)."
    externalDocs:
      description: "Entities documentation"
      url: "https://openfisca.org/doc/person,_entities,_role.html"
  - name: "Calculations"
  - name: "Documentation"
paths:
  /calculate:
    post:
      summary: "Run a simulation"
      tags:
        - Calculations
      operationId: "calculate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "Situation"
        description: 'Describe the situation (persons and entities). Add the variable you wish to calculate in the proper entity, with null as the value. Learn more in our official documentation: https://openfisca.org/doc/openfisca-web-api/input-output-data'
        required: true
        schema:
          $ref: '#/definitions/SituationInput'
      responses:
        200:
          description: "The calculation result is sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
          schema:
            $ref: '#/definitions/SituationOutput'
        404:
          description: "A variable mentioned in the input situation does not exist in the loaded tax and benefit system. Details are sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
        400:
          description: "The request is invalid. Details about the error are sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
  /parameters:
    get:
      tags:
        - "Parameters"
      summary: "List all available parameters"
      operationId: "getParameters"
      produces:
        - "application/json"
      responses:
        200:
          description: "The list of parameters is sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
          schema:
            $ref: '#/definitions/Parameters'
  /parameter/{parameterID}:
    get:
      tags:
      - "Parameters"
      summary: "Get information about a specific parameter"
      operationId: "getParameter"
      produces:
      - "application/json"
      parameters:
      - name: "parameterID"
        in: "path"
        description: "ID of parameter. IDs can be obtained by enumerating the /parameters endpoint"
        required: true
        type: "string"
      responses:
        200:
          description: "The requested parameter's information is sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
          schema:
            $ref: "#/definitions/Parameter"
        404:
          description: "The requested parameter does not exist"
          headers:
            $ref: '#/commons/Headers'
  /variables:
    get:
      tags:
      - "Variables"
      summary: "List all available variables"
      operationId: "getVariables"
      produces:
      - "application/json"
      responses:
        200:
          description: "The list of variables is sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
          schema:
            $ref: "#/definitions/Variables"
  /variable/{variableID}:
    get:
      tags:
      - "Variables"
      summary: "Get information about a specific variable"
      operationId: "getVariable"
      produces:
      - "application/json"
      parameters:
      - name: "variableID"
        in: "path"
        description: "ID of a variable. IDs can be obtained by enumerating the /variables endpoint."
        required: true
        type: "string"
      responses:
        200:
          description: "The requested variable's information is sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
          schema:
            $ref: "#/definitions/Variable"
        404:
          description: "The requested variable does not exist"
          headers:
            $ref: '#/commons/Headers'
  /entities:
    get:
      tags:
      - "Entities"
      summary: "List all available Entities"
      operationId: "getVariables"
      produces:
      - "application/json"
      responses:
        200:
          description: "The list of the entities as well as their information is sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
          schema:
            $ref: "#/definitions/Entities"
  /trace:
    post:
      summary: "Explore a simulation's steps in details."
      tags:
        - Calculations
      operationId: "trace"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "Situation"
        description: 'Describe the situation (persons and entities). Add the variable you wish to calculate in the proper entity, with null as the value.'
        required: true
        schema:
          $ref: '#/definitions/SituationInput'
      responses:
        200:
          description: "The calculation details are sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
          schema:
            $ref: '#/definitions/Trace'
        404:
          description: "A variable mentioned in the input situation does not exist in the loaded tax and benefit system. Details are sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
        400:
          description: "The request is invalid. Details about the error are sent back in the response body"
          headers:
            $ref: '#/commons/Headers'
  /spec:
    get:
      summary: Provide the API documentation in an OpenAPI format
      tags:
        - Documentation
      operationId: spec
      produces:
        - application/json
      responses:
        200:
          description: The API documentation is sent back in the response body
          headers:
            $ref: '#/commons/Headers'

definitions:
  Parameter:
    type: "object"
    properties:
      values:
        $ref: '#/definitions/Values'
      brackets:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/Brackets"
      subparams:
        type: "object"
        additionalProperties:
          type: "object"
          properties:
            definition:
              type: 'string'
      metadata:
        type: "object"
      description:
        type: "string"
      id:
        type: "integer"
        format: "string"
      source:
        type: "string"
    example:
      id: "cotsoc.gen.smic_h_b"
      description: "SMIC horaire brut"
      values: {"2001-08-01": 6.67,
                "2002-07-01": 6.83,
                "2003-07-01": 7.19,
                "2004-07-01": 7.61,
                "2005-07-01": 8.03,
                "2006-07-01": 8.27,
                "2007-07-01": 8.44,
                "2008-05-01": 8.63,
                "2008-07-01": 8.71,
                "2009-07-01": 8.82,
                "2010-01-01": 8.86,
                "2011-01-01": 9.0,
                "2011-12-01": 9.19,
                "2012-01-01": 9.22,
                "2012-07-01": 9.4,
                "2013-01-01": 9.43,
                "2014-01-01": 9.53,
                "2015-01-01": 9.61,
                "2016-01-01": 9.67,
                "2017-01-01": 9.76}
      source: https://github.com/openfisca/openfisca-france/blob/22.2.1/openfisca_france/parameters/cotsoc/gen/smic_h_b.yaml
      metadata:
        unit: "currency-EUR"

  Parameters:
    type: "object"
    additionalProperties:
      type: "object"
      properties:
        description:
          type: 'string'

  Variable:
    type: "object"
    properties:
      defaultValue:
        type: "string"
      definitionPeriod:
        type: string
        enum:
          - MONTH
          - YEAR
          - ETERNITY
      description:
        type: "string"
      entity:
        type: "string"
      formulas:
        type: "object"
        additionalProperties:
         $ref: "#/definitions/Formula"
      id:
        type: "string"
      reference:
        type: "array"
        items:
          type: "string"
      source:
        type: "string"
      valueType:
        type: "string"
        enum:
          - Int
          - Float
          - Boolean
          - Date
          - String
    example:
      defaultValue: 0,
      definitionPeriod: "MONTH"
      description: "Aide à l'embauche d'un salarié pour les PME"
      entity: "individu"
      id: "aide_embauche_pme"
      references: [
                    "http://travail-emploi.gouv.fr/grands-dossiers/embauchepme"
                  ]
      source: "https://github.com/openfisca/openfisca-france/blob/18.2.5/openfisca_france/model/prelevements_obligatoires/prelevements_sociaux/cotisations_sociales/allegement.py#L214-L287"
      valueType: "Float"
      formulas: { "2016-01-18":{
                    "content": "def formula_2016_01_18(individu, period, parameters):\n    effectif_entreprise = individu('effectif_entreprise', period)\n    apprenti = individu('apprenti', period)\n    contrat_de_travail_duree = individu('contrat_de_travail_duree', period)\n    TypesContratDeTravailDuree = contrat_de_travail_duree.possible_values\n    contrat_de_travail_debut = individu('contrat_de_travail_debut', period)\n    contrat_de_travail_fin = individu('contrat_de_travail_fin', period)\n    coefficient_proratisation = individu('coefficient_proratisation', period)\n    smic_proratise = individu('smic_proratise', period)\n    salaire_de_base = individu('salaire_de_base', period)\n    exoneration_cotisations_employeur_jei = individu('exoneration_cotisations_employeur_jei', period)\n    aide_premier_salarie = individu('aide_premier_salarie', period)\n\n    # Cette aide est temporaire.\n    # Si toutefois elle est reconduite et modifiée, les dates et le montant seront à implémenter comme\n    # des params xml.\n\n    # jusqu’à 1,3 fois le Smic\n    eligible_salaire = salaire_de_base <= (1.3 * smic_proratise)\n\n    # pour les PME\n    eligible_effectif = effectif_entreprise < 250\n\n    non_cumulee = and_(\n        # non cumulable avec l'aide pour la première embauche\n        # qui est identique, si ce n'est qu'elle couvre tous les salaires\n        aide_premier_salarie == 0,\n        # non cumul avec le dispositif Jeune Entreprise Innovante (JEI)\n        not_(exoneration_cotisations_employeur_jei)\n        )\n\n    eligible_contrat = and_(\n        contrat_de_travail_debut >= datetime64(\"2016-01-18\"),\n        contrat_de_travail_debut <= datetime64(\"2017-06-30\")\n        )\n\n    # Si CDD, durée du contrat doit être > 1 an\n    eligible_duree = or_(\n        # durée indéterminée\n        contrat_de_travail_duree == TypesContratDeTravailDuree.cdi,\n        # durée déterminée supérieure à 1 an\n        and_(\n            # CDD\n            contrat_de_travail_duree == TypesContratDeTravailDuree.cdd,\n            # > 6 mois\n            (contrat_de_travail_fin - contrat_de_travail_debut).astype('timedelta64[M]') >= timedelta64(6, 'M')\n            )\n        )\n\n    # Valable 2 ans seulement\n    eligible_date = datetime64(period.offset(-24, 'month').start) < contrat_de_travail_debut\n\n    eligible = (\n        eligible_salaire * eligible_effectif * non_cumulee * eligible_contrat * eligible_duree *\n        eligible_date * not_(apprenti)\n        )\n    # somme sur 24 mois, à raison de 500 € maximum par trimestre\n    montant_max = 4000\n\n    # Si le salarié est embauché à temps partiel,\n    # l’aide est proratisée en fonction de sa durée de travail.\n    # TODO cette multiplication par le coefficient de proratisation suffit-elle pour le cas du temps partiel ?\n    # A tester\n\n    return eligible * (montant_max / 24) * coefficient_proratisation\n",
      "source": "https://github.com/openfisca/openfisca-france/blob/21.8.1/openfisca_france/model/prelevements_obligatoires/prelevements_sociaux/cotisations_sociales/allegements.py#L213-L285"
      } }

  Variables:
    type: "object"
    additionalProperties:
      type: "object"
      properties:
        description:
          type: 'string'

  Formula:
    type: "object"
    properties:
      content:
        type: "string"
      source:
        type: "string"

  Brackets:
    type: "object"
    additionalProperties:
      type: "number"
      format: "float"

  Values:
    type: "object"
    additionalProperties:
      type: "number"
      format: "float"

  Entities:
    type: "object"
    properties:
      description:
        type: "string"
      documentation:
        type: "string"
      plural:
        type: "string"
      roles:
        type: "object"
        additionalProperties:
         $ref: "#/definitions/Roles"
  Roles:
    type: "object"
    properties:
      description:
        type: "string"
      max:
        type: "integer"
      plural:
        type: "string"
  SituationInput:
    example:
      individus:
        Bill:
          salaire_de_base:
            "2017": 20000
        Bob:
          salaire_de_base:
            "2017": 30000
        Janet: {}
      menages:
        menage_1:
          personne_de_reference: [Bill]
          conjoint: [Bob]
          enfants: [Janet]
          revenu_disponible:
            "2017": null
          impots_directs:
            "2017": null
      familles:
        famille_1:
          parents: [Bill, Bob]
          enfants: [Janet]
      foyers_fiscaux:
        foyer_fiscal_1:
          declarants: [Bill, Bob]
          personnes_a_charge: [Janet]

  SituationOutput:
    example:
      individus:
        Bill:
          salaire_de_base:
            "2017": 20000
        Bob:
          salaire_de_base:
            "2017": 30000
        Janet: {}
      menages:
        menage_1:
          personne_de_reference: [Bill]
          conjoint: [Bob]
          enfants: [Janet]
          revenu_disponible:
            "2017": 36585.89
          impots_directs:
            "2017": -3733.72
      familles:
        famille_1:
          parents: [Bill, Bob]
          enfants: [Janet]
      foyers_fiscaux:
        foyer_fiscal_1:
          declarants: [Bill, Bob]
          personnes_a_charge: [Janet]

  Trace:
    type: object
    properties:
      requestedCalculations:
        type: array
        items:
          type: string
      entitiesDescription:
        type: object
        properties: null  # Will be dynamically added by the Web API
      trace:
        type: object
        additionalProperties:
          type: object
          properties:
            value:
              type: array
              items:
                type: any
            dependencies:
              type: array
              items:
                type: string
    example:
      requestedCalculations: [revenu_disponible<2017>]
      entitiesDescription:
        individus: [Bill, Bob, Janet]
        menages: [menage_1]
        familles: [famille_1]
        foyers_fiscaux: [foyer_fiscal_1]
      trace:
        revenu_disponible<2017>:
          value: 18000
          dependencies: [impots<2017>, salaire<2017>]
        impots<2017>:
          value: 2000
          dependencies: [salaire<2017>]
        salaire<2017>:
          value: 20000
          dependencies: []

commons:
  Headers:
    Country-Package:
      description: "The name of the country package currently loaded in this API server"
      type: "string"
    Country-Package-Version:
      description: "The version of the country package currently loaded in this API server"
      type: "string"
