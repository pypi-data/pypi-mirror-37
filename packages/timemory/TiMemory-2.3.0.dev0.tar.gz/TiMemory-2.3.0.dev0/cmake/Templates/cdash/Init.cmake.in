
# include guard
if(__cdashinit_is_loaded)
    return()
endif()
set(__cdashinit_is_loaded ON)

include(ProcessorCount)
ProcessorCount(CTEST_PROCESSOR_COUNT)

set(CTEST_MAKE_COMMAND       "'@CMAKE_MAKE_PROGRAM@'")
set(CTEST_CMAKE_COMMAND      "@CMAKE_COMMAND@")
set(CTEST_CMAKE_GENERATOR    "'@CMAKE_GENERATOR@'")
set(CTEST_CONFIG_OPTIONS     "@CMAKE_CONFIGURE_OPTIONS@")
set(CTEST_COMPILER           "@CMAKE_CXX_COMPILER_ID@")
set(CTEST_COMPILER_VERSION   "@CMAKE_CXX_COMPILER_VERSION@")
set(CTEST_DASHBOARD_ROOT     "@CMAKE_DASHBOARD_ROOT@")
set(CTEST_BRANCH             "@CMAKE_SOURCE_BRANCH@")
set(CTEST_REVISION           "@CMAKE_SOURCE_REVISION@")
set(CTEST_LOCAL_DIRECTORY    "@CMAKE_LOCAL_DIRECTORY@")
set(CTEST_GENERATOR          "'@CMAKE_GENERATOR@'")
set(CTEST_LOCAL_CHECKOUT     "@CTEST_LOCAL_CHECKOUT@")
set(CTEST_GENERATOR_PLATFORM "@CMAKE_GENERATOR_PLATFORM@")
set(MPI_FOUND                "@MPI_FOUND@")
set(CTEST_TOKEN_FILE         "@TOKEN_FILE@")
if(NOT DEFINED CTEST_MODEL)
    set(CTEST_MODEL          "@CTEST_MODEL@")
endif(NOT DEFINED CTEST_MODEL)

# ---------------------------------------------------------------------------- #
# -- Programs
# ---------------------------------------------------------------------------- #

find_program(CTEST_UNAME_COMMAND    NAMES uname)
find_program(CTEST_GIT_COMMAND      NAMES git)
find_program(CTEST_VALGRIND_COMMAND NAMES valgrind)
find_program(CTEST_GNU_COV_COMMAND  NAMES gcov)
find_program(CTEST_LLVM_COV_COMMAND NAMES llvm-cov)
    
# ---------------------------------------------------------------------------- #
# Use uname
# ---------------------------------------------------------------------------- #
function(GET_UNAME NAME FLAG)
    # checking if worked
    set(_RET 1)
    # iteration limiting
    set(_NITER 0)
    set(_NAME "")
    while(_RET GREATER 0 AND _NITER LESS 100 AND "${_NAME}" STREQUAL "")
        execute_process(COMMAND ${CTEST_UNAME_COMMAND} ${FLAG}
            OUTPUT_VARIABLE _NAME
            WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
            RESULT_VARIABLE _RET
            OUTPUT_STRIP_TRAILING_WHITESPACE)
        math(EXPR _NITER "${_NITER}+1")
    endwhile(_RET GREATER 0 AND _NITER LESS 100 AND "${_NAME}" STREQUAL "")
    # fail if not successful
    if(_RET GREATER 0)
        message(FATAL_ERROR
            "Unable to successfully execute: '${CTEST_UNAME_COMMAND} ${FLAG}'")
    endif(_RET GREATER 0)
    # set the variable in parent scope
    set(${NAME} ${_NAME} PARENT_SCOPE)
endfunction(GET_UNAME NAME FLAG)

# ---------------------------------------------------------------------------- #
# Get the OS machine hardware name (e.g. x86_64)
# ---------------------------------------------------------------------------- #
function(GET_OS_MACHINE_HARDWARE_NAME VAR)
    get_uname(_VAR -m)
    set(${VAR} ${_VAR} PARENT_SCOPE)
endfunction(GET_OS_MACHINE_HARDWARE_NAME VAR)

# ---------------------------------------------------------------------------- #
# Get the OS system name (e.g. Darwin, Linux)
# ---------------------------------------------------------------------------- #
function(GET_OS_SYSTEM_NAME VAR)
    get_uname(_VAR -s)
    set(${VAR} ${_VAR} PARENT_SCOPE)
endfunction(GET_OS_SYSTEM_NAME VAR)

# ---------------------------------------------------------------------------- #

GET_OS_SYSTEM_NAME(OS_NAME)
GET_OS_MACHINE_HARDWARE_NAME(HW_NAME)

# ---------------------------------------------------------------------------- #

if(NOT DEFINED MODEL)
    if("${CTEST_MODEL}" STREQUAL "")
        set(MODEL Continuous)
    else("${CTEST_MODEL}" STREQUAL "")
        set(MODEL ${CTEST_MODEL})
    endif("${CTEST_MODEL}" STREQUAL "")
endif(NOT DEFINED MODEL)

set(NPROCS "${CTEST_PROCESSOR_COUNT}")
if("${NPROCS}" GREATER 16)
    set(NPROCS 16)
endif("${NPROCS}" GREATER 16)

# ---------------------------------------------------------------------------- #

set(CTEST_BUILD_NAME "[${CTEST_BRANCH}] [${OS_NAME} ${HW_NAME}] [${CTEST_COMPILER} ${CTEST_COMPILER_VERSION}] [Python @PYBIND11_PYTHON_VERSION@] [C++@CMAKE_CXX_STANDARD@]")

if(MPI_FOUND)
    set(CTEST_BUILD_NAME "${CTEST_BUILD_NAME} [MPI]")
endif(MPI_FOUND)

set(CTEST_SOURCE_DIRECTORY      "${CTEST_DASHBOARD_ROOT}/source-@PROJECT_NAME@")
set(CTEST_BINARY_DIRECTORY      "${CTEST_DASHBOARD_ROOT}/build-@PROJECT_NAME@")
set(CTEST_INSTALL_DIRECTORY     "${CTEST_DASHBOARD_ROOT}/install-@PROJECT_NAME@")
set(OPTION_BUILD                "-j${NPROCS}")
set(CTEST_COMPILER_IS_GNU       "@CMAKE_CXX_COMPILER_IS_GNU@")
set(CTEST_COMPILER_IS_CLANG     "@CMAKE_CXX_COMPILER_IS_CLANG@")
set(CTEST_COMPILER_IS_INTEL     "@CMAKE_CXX_COMPILER_IS_INTEL@")

if(NOT "${CTEST_LOCAL_DIRECTORY}" STREQUAL "")
    if(WIN32)
	    set(COPY_CMD ${CTEST_CMAKE_COMMAND})
        set(COPY_ARGS "-E copy_directory")
        set(CTEST_CHECKOUT_COMMAND "${COPY_CMD} ${COPY_ARGS} ${CTEST_LOCAL_DIRECTORY} ${CTEST_SOURCE_DIRECTORY}")
    else()
        find_program(COPY_CMD rsync)
        set(COPY_ARGS "-ruv")
        set(CTEST_CHECKOUT_COMMAND "${COPY_CMD} ${COPY_ARGS} ${CTEST_LOCAL_DIRECTORY}/ ${CTEST_SOURCE_DIRECTORY}")
    endif()

else(NOT "${CTEST_LOCAL_DIRECTORY}" STREQUAL "")

    set(CTEST_CHECKOUT_COMMAND
        "${CTEST_GIT_COMMAND} clone -b ${CTEST_BRANCH} --recurse-submodules https://github.com/jrmadsen/@PROJECT_NAME@ ${CTEST_SOURCE_DIRECTORY}")
    set(CTEST_UPDATE_COMMAND        "${CTEST_GIT_COMMAND} checkout -qf ${CTEST_REVISION}")

endif(NOT "${CTEST_LOCAL_DIRECTORY}" STREQUAL "")

set(CTEST_CONFIGURATION_TYPE    "@CMAKE_BUILD_TYPE@")
if(WIN32)
    STRING(REPLACE " " "\\ " CTEST_CONFIG_OPTIONS "${CTEST_CONFIG_OPTIONS}")
    STRING(REPLACE "\\ -D" " -D" CTEST_CONFIG_OPTIONS "${CTEST_CONFIG_OPTIONS}")
endif(WIN32)
if(NOT "${CTEST_GENERATOR_PLATFORM}" STREQUAL "")
    set(GENERATOR_ARGS "-A ${CTEST_GENERATOR_PLATFORM}")
else(NOT "${CTEST_GENERATOR_PLATFORM}" STREQUAL "")
    set(GENERATOR_ARGS "")
endif(NOT "${CTEST_GENERATOR_PLATFORM}" STREQUAL "")
set(CTEST_CONFIGURE_COMMAND     "${CTEST_CMAKE_COMMAND} ${CTEST_CONFIG_OPTIONS} -DTIMEMORY_BUILD_TESTING=ON -DTIMEMORY_DASHBOARD_MODE=ON -DCMAKE_INSTALL_PREFIX=${CTEST_INSTALL_DIRECTORY} -Wno-dev ${CTEST_SOURCE_DIRECTORY} -G ${CTEST_CMAKE_GENERATOR} ${GENERATOR_ARGS}")

if(WIN32)
    set(CTEST_BUILD_COMMAND     "${CTEST_CMAKE_COMMAND} --build ${CTEST_BINARY_DIRECTORY} --config @CMAKE_BUILD_TYPE@ --target INSTALL")
else(WIN32)
    set(CTEST_BUILD_COMMAND     "${CTEST_MAKE_COMMAND} install ${OPTION_BUILD}")
endif(WIN32)

if(CTEST_COMPILER_IS_GNU)
    set(CTEST_COVERAGE_COMMAND ${CTEST_GNU_COV_COMMAND})
elseif(CTEST_COMPILER_IS_CLANG)
    set(CTEST_COVERAGE_COMMAND ${CTEST_LLVM_COV_COMMAND})
endif(CTEST_COMPILER_IS_GNU)
set(CTEST_MEMORYCHECK_COMMAND "${CTEST_VALGRIND_COMMAND}")
set(CTEST_MEMORYCHECK_COMMAND_OPTIONS "--leak-check=full --show-reachable=no --show-possibly-lost=yes")
#  --main-stacksize=104857600 --valgrind-stacksize=10485760

if(NOT DEFINED TRIGGER)
    set(TRIGGER "Any" CACHE STRING "Delay submit until TRIGGER == '(Any|Build|Test|Coverage|MemCheck)'")
endif(NOT DEFINED TRIGGER)

message(STATUS "CDash submit trigger (TRIGGER) : [\"${TRIGGER}\"]")


# ---------------------------------------------------------------------------- #
# -- Clean/Reset
# ---------------------------------------------------------------------------- #
macro(CLEAN_DIRECTORIES)
    execute_process(
        COMMAND ${CTEST_CMAKE_COMMAND} -E remove_directory ${CTEST_SOURCE_DIRECTORY}
        COMMAND ${CTEST_CMAKE_COMMAND} -E remove_directory ${CTEST_BINARY_DIRECTORY}
        COMMAND ${CTEST_CMAKE_COMMAND} -E remove_directory ${CTEST_INSTALL_DIRECTORY}
        WORKING_DIRECTORY ${CTEST_DASHBOARD_ROOT})
endmacro(CLEAN_DIRECTORIES)


# ---------------------------------------------------------------------------- #
# -- Settings
# ---------------------------------------------------------------------------- #

## -- Process timeout in seconds
set(CTEST_TIMEOUT           "7200")
## -- Set output to English
set(ENV{LC_MESSAGES}      "en_EN" )

# set environment paths
set(ENV{PROJECT_BIN_PATH}   "${CTEST_INSTALL_DIRECTORY}/@CMAKE_INSTALL_BINDIR@")
set(ENV{PROJECT_LIB_PATH}   "${CTEST_INSTALL_DIRECTORY}/@CMAKE_INSTALL_LIBDIR@")
set(ENV{PROJECT_PYC_PATH}   "${CTEST_INSTALL_DIRECTORY}/@TIMEMORY_INSTALL_PYTHONDIR@")


# ---------------------------------------------------------------------------- #
# -- Configure file
# ---------------------------------------------------------------------------- #
macro(CONFIGURE_CTEST_FILES)

    ## -- CTest Config
    configure_file(CTestConfig.cmake ${CTEST_BINARY_DIRECTORY}/CTestConfig.cmake COPYONLY)
    ## -- CTest Custom
    configure_file(CTestCustom.cmake ${CTEST_BINARY_DIRECTORY}/CTestCustom.cmake COPYONLY)

endmacro(CONFIGURE_CTEST_FILES)


# ---------------------------------------------------------------------------- #
# -- Read CTestNotes.cmake file
# ---------------------------------------------------------------------------- #
macro(READ_NOTES)

    ## check
    file(GLOB_RECURSE NOTE_FILES "${CTEST_BINARY_DIRECTORY}/*CTestNotes.cmake")
    foreach(_FILE ${NOTE_FILES})
        include("${_FILE}")
    endforeach(_FILE ${NOTE_FILES})

endmacro(READ_NOTES)


# ---------------------------------------------------------------------------- #
# -- Check to see if there is a ctest token (for CDash submission)
# ---------------------------------------------------------------------------- #
macro(CHECK_FOR_CTEST_TOKEN)

    # set using token to off
    set(CTEST_USE_TOKEN OFF)
    # set token to empty
    set(CTEST_TOKEN     "")

    if(NOT "${CTEST_TOKEN_FILE}" STREQUAL "")
        string(REGEX REPLACE "^~" "$ENV{HOME}" CTEST_TOKEN_FILE "${CTEST_TOKEN_FILE}")
    endif(NOT "${CTEST_TOKEN_FILE}" STREQUAL "")

    # check for a file containing token
    if(NOT "${CTEST_TOKEN_FILE}" STREQUAL "" AND EXISTS "${CTEST_TOKEN_FILE}")
        message(STATUS "Reading CTest token file: ${CTEST_TOKEN_FILE}")
        file(READ "${CTEST_TOKEN_FILE}" CTEST_TOKEN)
        string(REPLACE "\n" "" CTEST_TOKEN "${CTEST_TOKEN}")
    endif(NOT "${CTEST_TOKEN_FILE}" STREQUAL "" AND EXISTS "${CTEST_TOKEN_FILE}")

    # if no file, check the environment
    if("${CTEST_TOKEN}" STREQUAL "" AND NOT "$ENV{CTEST_TOKEN}" STREQUAL "")
        set(CTEST_TOKEN "$ENV{CTEST_TOKEN}")
    endif("${CTEST_TOKEN}" STREQUAL "" AND NOT "$ENV{CTEST_TOKEN}" STREQUAL "")

    # if non-empty token, set CTEST_USE_TOKEN to ON
    if(NOT "${CTEST_TOKEN}" STREQUAL "")
        set(CTEST_USE_TOKEN ON)
    endif(NOT "${CTEST_TOKEN}" STREQUAL "")

endmacro(CHECK_FOR_CTEST_TOKEN)


# ---------------------------------------------------------------------------- #
# -- Submit command
# ---------------------------------------------------------------------------- #
macro(SUBMIT_COMMAND)

    # check for token
    check_for_ctest_token()

    if(NOT CTEST_USE_TOKEN)
        # standard submit
        ctest_submit(RETURN_VALUE ret ${ARGN})
    else(NOT CTEST_USE_TOKEN)
        # submit with token
        ctest_submit(RETURN_VALUE ret
                     HTTPHEADER "Authorization: Bearer ${CTEST_TOKEN}"
                     ${ARGN})
    endif(NOT CTEST_USE_TOKEN)

endmacro(SUBMIT_COMMAND)


# ---------------------------------------------------------------------------- #
# -- Determine if submit time
# ---------------------------------------------------------------------------- #
macro(SUBMIT KEY)

    if("${TRIGGER}" STREQUAL "Any" OR "${TRIGGER}" STREQUAL "Submit")
        read_notes()
        submit_command(${ARGN})
    else("${TRIGGER}" STREQUAL "Any" OR "${TRIGGER}" STREQUAL "Submit")
        if("${TRIGGER}" STREQUAL "${KEY}")
            submit_command(${ARGN})
        endif("${TRIGGER}" STREQUAL "${KEY}")
    endif("${TRIGGER}" STREQUAL "Any" OR "${TRIGGER}" STREQUAL "Submit")

endmacro(SUBMIT KEY)


# ---------------------------------------------------------------------------- #
# -- Setup the test
# ---------------------------------------------------------------------------- #
macro(SETUP KEY)

    if("${TRIGGER}" STREQUAL "Any" OR "${KEY}" STREQUAL "Build")

        message(STATUS "Key (${KEY}) triggered a fresh build...")
        clean_directories()
        configure_ctest_files()

        ctest_start(${MODEL}   TRACK ${MODEL})
        configure_ctest_files()
        ## -- read CTestCustom.cmake file
        ctest_read_custom_files("${CTEST_BINARY_DIRECTORY}")
        ctest_configure (BUILD "${CTEST_BINARY_DIRECTORY}" RETURN_VALUE ret)
        ctest_build     (BUILD "${CTEST_BINARY_DIRECTORY}" RETURN_VALUE ret)

    else("${TRIGGER}" STREQUAL "Any" OR "${KEY}" STREQUAL "Build")

        unset(CTEST_CHECKOUT_COMMAND)
        configure_ctest_files()    
        ctest_start(${MODEL}   TRACK ${MODEL} APPEND)
        configure_ctest_files()    
        ## -- read CTestCustom.cmake file
        ctest_read_custom_files("${CTEST_BINARY_DIRECTORY}")

    endif("${TRIGGER}" STREQUAL "Any" OR "${KEY}" STREQUAL "Build")

endmacro(SETUP KEY)
