from socket import AF_INET, SOCK_STREAM, error, socket, timeout
from sys import exit

from libexploit.io.stdout import init_logger


class NetworkTarget(object):
    def __init__(rhost, rport, verbose):
        self.logger = init_logger(name=__name__, verbose=verbose)
        self.logger.debug('remote host: {rhost}'.format(rhost=rhost))
        self.logger.debug('remote port: {rport}'.format(rport=rport))
        self.rhost = rhost
        self.rport = rport
        self.session_socket = None

    def remote_host(self):
        return (self.rhost, self.rport)

    def connect_ipv4_tcp(self, timeout=10):
        '''Create an IPv4 socket for use with the remote target
        Args:
            timeout (int): The time to wait for the connection before
                failing.
        '''
        self.target_socket = socket(AF_INET, SOCK_STREAM)
        self.target_socket.settimeout(timeout)
        try:
            self.logger.debug('connecting to remote host')
            self.target_socket.connect(self.remote_host())
            self.logger.debug('successfully connected')
        except timeout:
            self.logger.critical(
                'connection to remote host timed out. is the target service running?')
            self.logger.info('exiting')
            exit(1)
        except error:
            self.logger.critical(
                'failed to connect to remote host with error', exc_info=True)
            self.logger.info('exiting')
            exit(1)
        return self.target_socket

    def recv(recv_bytes=1024):
        '''Receive bytes from the target
        Args:
            recv_bytes (int): The number of bytes to read from the remote host.
        '''
        if not self.target_socket:
            self.logger.error(
                'no connection currently exists to target, connecting as IPv4 TCP...')
            self.connect_ipv4_tcp()

        try:
            v = self.target_socket.recv(recv_bytes)
        except timeout:
            self.logger.critical(
                ('timeout occurred while waiting for data from the remote host.'
                 'is the target service paused in a debugger?'))
            self.logger.info('exiting')
            exit(1)
        except error:
            self.logger.critical(
                'an error occurred while waiting for data from the remote host', exc_info=True)
