{%- import 'snippet.j2' as snippet -%}

{% call snippet.gear_module(module_name, intfs, comment) %}

  localparam DIN_NUM = {{intfs|length - 1}};

  {% for i in intfs %}
    {{ svgen_typedef(i['local_type'], i['name'])|indent(4, False) }}

  {% endfor %}

   logic handshake;
   logic cnt_rst;
   logic [$clog2(DIN_NUM)-1:0] cnt_s;
   logic [DIN_NUM-1:0]         valid_array;
   logic [DIN_NUM-1:0]         ready_array;
   din0_t [DIN_NUM-1:0]         din_array;
   dout_t dout_s;

{% for i in intfs[:-1] %}
   assign valid_array[{{loop.index-1}}] = {{i['name']}}.valid;
   assign din_array[{{loop.index-1}}]   = {{i['name']}}.data;
   assign {{i['name']}}.ready = ready_array[{{loop.index-1}}];
{% endfor %}

   assign handshake = dout.ready && valid_array[cnt_s];

   generate
      for (genvar i = 0; i < DIN_NUM; i++) begin
         assign ready_array[i] = dout.ready & (i == cnt_s);
      end
   endgenerate

   assign cnt_rst = (cnt_s == (DIN_NUM - 1)) & din_array[cnt_s].eot & handshake;

   always_ff @(posedge clk) begin
      if (rst | cnt_rst) begin
         cnt_s <= '0;
      end else if (handshake && din_array[cnt_s].eot) begin
         cnt_s <= cnt_s + 1;
      end
   end

   assign dout_s.data = din_array[cnt_s].data;
   assign dout_s.eot[0] = din_array[cnt_s].eot;
   assign dout_s.eot[1] = (cnt_s == (DIN_NUM - 1));
   assign dout.data = dout_s;
   assign dout.valid = valid_array[cnt_s];

{% endcall %}
